        -:    0:Source:results/2d/type21/type21.f
        -:    0:Graph:./results\2d\type21\type21.gcno
        -:    0:Data:./results\2d\type21\type21.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 91%
        1:    1:      program type21
        -:    2:      integer(4),parameter:: n=4,m=4,l=4,err=100
        -:    3:      real ,dimension (n,m,l):: a     
        -:    4:      integer::k,p,q,err1,err2,err3
        -:    5:      type OBJECT
        -:    6:         character (15) name
        -:    7:         integer st(n)
        -:    8:         integer bl(n,m)
        -:    9:         integer matr(n,m)
        -:   10:      end type OBJECT
        -:   11:
        -:   12:      integer, dimension(n,m) :: a1, b, c
        -:   13:      integer, dimension(n) :: qq
        -:   14:
        -:   15:CDVM$ distribute (BLOCK, *):: a1 
        -:   16:CDVM$ align qq(i) with a1( i, *)
        -:   17:CDVM$ align (i,j) with a1(i,j):: c,b
        -:   18:      type(OBJECT) :: GR,OTD
        -:   19:CDVM$ ASYNCID Y
        -:   20:
        1:   21:      print *,'====== START OF TYPE21 =========='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   22:! Testing of different variants of deffinitions a
        1:   23:      do k=1,n
        -:   24:        do p=1,m
        -:   25:          do q=1,l
        -:   26:             a(k,p,q)=10+k+p+q
        -:   27:          end do
        -:   28:        end do
        -:   29:      end do
        -:   30:      a=1; a(1:n,1:m,1:l)=10+n+m+l!!; print*,a
        1:   31:      a=1; forall(k=1:n,p=1:m,q=1:l) a(k,p,q) = 10+k+p+q;
        5:   32:      do k=1,n
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:   33:        do p=1,m
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       20:   34:          a1(k,p)=k
        -:   35:        end do
        -:   36:      end do
        1:   37:      c=0
        -:   38:
        -:   39:CDVM$ ASYNCHRONOUS Y
        5:   40:      qq(:)= a1(:,2)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:   41:      b(:,:) = a1(:,:)
       13:   42:      c(1:2,:) = a1(3:4,:)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        -:   43:CDVM$ END ASYNCHRONOUS
        5:   44:      GR%st=(/1,2,3,4/)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:   45:
        5:   46:      do k=1,n
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:   47:        do p=1,m
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       20:   48:          GR%matr(k,p)=k
        -:   49:        end do
        -:   50:      end do
        -:   51:
       21:   52:      GR%bl=reshape((/3,4,0,0,3,4,0,0,3,4,0,0,3,4,0,0/),(/4,4/))
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        -:   53:
        -:   54:CDVM$ ASYNCWAIT Y
        5:   55:      err1=err;err2=err;err3=err
        -:   56:CDVM$ parallel(i) on qq(i),reduction (min(err1))
        5:   57:      do i=1,n
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:   58:        if (qq(i) .ne. GR%st(i)) then        
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   59:          err1 = min (i,err1)
        -:   60:        endif 
        -:   61:      enddo
        -:   62:
        -:   63:CDVM$ parallel(i,j) on a1(i,j), reduction (min(err2))
        5:   64:      do i=1,n
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:   65:        do j=1,m
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       20:   66:          if (a1(i,j) .ne. GR%matr(i,j)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   67:            err2 = min (i,err2)
        -:   68:          endif
        -:   69:        enddo
        -:   70:      enddo
        -:   71:
        -:   72:CDVM$ parallel(i,j) on c(i,j), reduction (min(err3))
        5:   73:      do i=1,n
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:   74:        do j=1,m
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       20:   75:           if (c(i,j) .ne.GR%bl(i,j)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   76:             err3 = min (i,err3)
        -:   77:           endif
        -:   78:        enddo
        -:   79:      enddo
        -:   80:  
        1:   81:      if ((err1 .ne. err).OR.(err2 .ne.err).OR.(err3.ne.err)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   82:      print *,'type21 - ***error '
call    0 never executed
call    1 never executed
call    2 never executed
        -:   83:      else
        1:   84:      print *,'type21 - complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   85:      endif
        1:   86:      print *,'=== END OF TYPE21 ======================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   87:
function main called 1 returned 100% blocks executed 100%
        1:   88:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   89:
