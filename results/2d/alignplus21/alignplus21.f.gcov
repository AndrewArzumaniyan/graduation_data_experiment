        -:    0:Source:results/2d/alignplus21/alignplus21.f
        -:    0:Graph:./results\2d\alignplus21\alignplus21.gcno
        -:    0:Data:./results\2d\alignplus21\alignplus21.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program ALIGNPLUS21
        -:    2:
        -:    3:c    TESTING align CLAUSE .       
        -:    4:c    arrA2[*][ BLOCK] arrB1[]
        -:    5:c    or arrA2[ BLOCK][*] arrB1[]
        1:    6:      print *, '===START OF alignplus21=================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    7:C --------------------------------------------------
        -:    8:c 211       ALIGN arrB[i] WITH arrA[1][i]   vector arrB on section 
        -:    9:*                                                 (the first line of arrA)
        1:   10:      call align211
call    0 returned 100%
        -:   11:C -------------------------------------------------
        -:   12:c 212     ALIGN arrB[i] WITH arrA[2*i+2][2] vector arrB on section 
        -:   13:*                                       (the second column of arrA) with stretching and shift
        1:   14:      call align212
call    0 returned 100%
        -:   15:C -------------------------------------------------
        -:   16:c 213     ALIGN arrB[i] WITH arrA[][i]  vector replication on every line of arrA
        1:   17:      call align213
call    0 returned 100%
        -:   18:C -------------------------------------------------
        -:   19:c 214     ALIGN arrB[i] WITH arrA[2*i+2][ ] vector arrB on replication on 
        -:   20:*                                          every column of arrA with stretching and shift
        1:   21:      call align214
call    0 returned 100%
        -:   22:C --------------------------------------------------
        -:   23:c 215       ALIGN arrB[i] WITH arrA[1][i]   vector arrB on section 
        -:   24:*                                                 (the first line of arrA)
        1:   25:      call align215
call    0 returned 100%
        -:   26:C -------------------------------------------------
        -:   27:c 216     ALIGN arrB[i] WITH arrA[2*i+2][2] vector arrB on section 
        -:   28:*                                       (the second column of arrA) with stretching and shift
        1:   29:      call align216
call    0 returned 100%
        -:   30:C -------------------------------------------------
        -:   31:c 217     ALIGN arrB[i] WITH arrA[][i]  vector replication on every line of arrA
        1:   32:      call align217
call    0 returned 100%
        -:   33:C -------------------------------------------------
        -:   34:c 218     ALIGN arrB[i] WITH arrA[2*i+2][ ] vector arrB on replication on 
        -:   35:*                                          every column of arrA with stretching and shift
        1:   36:      call align218
call    0 returned 100%
        -:   37:C -------------------------------------------------
        1:   38:      print *, '=== END OF alignplus21 =================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   39:C
        -:   40:C
function main called 1 returned 100% blocks executed 100%
        1:   41:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   42:
        -:   43:C ----------------------------------------------------align211
        -:   44:c 211 arrA2[*][ BLOCK]  arrB1[] ALIGN arrB[i] WITH arrA[1][i]vector arrB on section 
        -:   45:*                                                                   (the first line of arrA)
function align211_ called 1 returned 100% blocks executed 80%
        1:   46:      subroutine align211
        -:   47:      integer, parameter :: AN1=8,AN2=8,BN1=4,NL=1000,ER=10000
        -:   48:c     parameters for ALIGN arrB[i] WITH arrA(1,i)                                                
        -:   49:      character*9 tname
        1:   50:      integer, allocatable :: A2(:,:), B1(:)
        -:   51:      integer erri,i,j,ia,ja,ib,jb
        -:   52:               
        -:   53:!dvm$ distribute A2(*,BLOCK)    
        -:   54:!dvm$ ALIGN B1(i) WITH A2(1,i)
        -:   55:
        1:   56:      tname='align211'
       1*:   57:      allocate (A2(AN1,AN2),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        5:   58:      erri= ER
        -:   59:      NNL=NL 
        -:   60:
        -:   61:!dvm$ actual(erri)
        -:   62:!dvm$ region local(A2,B1)
        -:   63:!dvm$ parallel (i) on B1(i)
        5:   64:      do i=1,BN1
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:   65:            B1(i) =0     
        -:   66:      enddo 
        -:   67:
        -:   68:!dvm$ parallel (i,j) on A2(i,j), private(ib)
        9:   69:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:   70:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       64:   71:             A2(i,j) = i*NL+j
       72:   72:             if ((i .eq. 1) ) then
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        8:   73:                      if ( 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   74:     *                  (j .le. BN1)  
        -:   75:     *                  )  then 
        4:   76:                        ib = j
        4:   77:                        B1(ib) = ib
        -:   78:                      endif 
        -:   79:             endif   
        -:   80:          enddo 
        -:   81:      enddo 
        -:   82:
        -:   83:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia,ja)
        5:   84:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:   85:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   86:            else
    #####:   87:               erri = min(erri,i)
        -:   88:            endif
        4:   89:            ia=1
        4:   90:            ja=i
        5:   91:            if (A2(ia,ja) .eq.(ia*NL+ja)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   92:            else
    #####:   93:                erri = i*NL/10+j
        -:   94:            endif 
        -:   95:      enddo 
        -:   96:!dvm$ end region   
        -:   97:!dvm$ get_actual(erri) 
        -:   98:     
        1:   99:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  100:          call ansyes(tname)
call    0 returned 100%
        -:  101:      else
    #####:  102:          call ansno(tname)
call    0 never executed
        -:  103:      endif 
       1*:  104:      deallocate (B1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  105:
        1:  106:      end
        -:  107:C ----------------------------------------------------align212
        -:  108:c 212     ALIGN arrB[i] WITH arrA[2*i+2][2] vector arrB on section 
        -:  109:*                                       (the second column of arrA) with stretching and shift
function align212_ called 1 returned 100% blocks executed 81%
        1:  110:      subroutine align212
        -:  111:      integer, parameter :: AN1=14,AN2=3,BN1=6,NL=1000,ER=10000
        -:  112:c     parameters for ALIGN arrB[i] WITH arrA(k1i*i+li,lj)                                                
        -:  113:      integer, parameter :: k1i=2,k2i=0,li=2,k1j=0,k2j=0,lj=2
        -:  114:      character*9 tname
        1:  115:      integer, allocatable :: A2(:,:), B1(:)
        -:  116:      integer :: erri, i
        -:  117:               
        -:  118:!dvm$ distribute A2(*,BLOCK)    
        -:  119:!dvm$ ALIGN B1(i) WITH A2(k1i*i+li,lj)
        -:  120:
        1:  121:      tname='align212'
       1*:  122:      allocate (A2(AN1,AN2),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        7:  123:      erri= ER
        -:  124:      NNL=NL 
        -:  125:
        -:  126:!dvm$ actual(erri)
        -:  127:!dvm$ region local(A2,B1)
        -:  128:!dvm$ parallel (i) on B1(i)
        7:  129:      do i=1,BN1
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        7:  130:            B1(i) =0     
        -:  131:      enddo 
        -:  132:
        -:  133:!dvm$ parallel (i,j) on A2(i,j), private(ib)
       15:  134:      do i=1,AN1
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
       57:  135:          do j=1,AN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       42:  136:             A2(i,j) = i*NL+j
        -:  137:             if ((j .eq. lj) .and. 
        -:  138:     *                  ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       42:  139:     *                  (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 86% (fallthrough)
branch  5 taken 14%
        -:  140:     *                  (((i-li)/k1i) .le. BN1)  
       14:  141:     *                  )  then 
        6:  142:               ib = (i-li)/k1i
        6:  143:               B1(ib) = ib
        -:  144:             endif   
        -:  145:          enddo 
        -:  146:      enddo 
        -:  147:
        -:  148:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia,ja)
        7:  149:      do i=1,BN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        6:  150:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  151:            else
    #####:  152:               erri = min(erri,i)
        -:  153:            endif
        6:  154:            ia=k1i*i+li
        6:  155:            ja=lj
        7:  156:            if (A2(ia,ja) .eq.(ia*NL+ja)) then     
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  157:            else
    #####:  158:                erri = min(erri,i*NL/10+j)
        -:  159:            endif 
        -:  160:      enddo 
        -:  161:!dvm$ end region   
        -:  162:!dvm$ get_actual(erri) 
        -:  163:     
        1:  164:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  165:          call ansyes(tname)
call    0 returned 100%
        -:  166:      else
    #####:  167:          call ansno(tname)
call    0 never executed
        -:  168:      endif 
       1*:  169:      deallocate (B1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  170:
        1:  171:      end
        -:  172:C ----------------------------------------------------align213
        -:  173:c 213     ALIGN arrB[i] WITH arrA[][i]  vector replication on every line of arrA
function align213_ called 1 returned 100% blocks executed 79%
        1:  174:      subroutine align213
        -:  175:      integer, parameter :: AN1=8,AN2=8,BN1=6,NL=1000,ER=10000
        -:  176:c     parameters for ALIGN arrB[i] WITH arrA[][k1j * i + lj]                                                
        -:  177:      integer, parameter :: k1i=0,k2i=0,li=0,k1j=1,k2j=0,lj=0
        -:  178:      character*9 tname
        1:  179:      integer, allocatable :: A2(:,:), B1(:)
        -:  180:      integer s,cs,erri,i,j,ia,ja,ib,jb
        -:  181:               
        -:  182:!dvm$ distribute A2(*,BLOCK)    
        -:  183:!dvm$ ALIGN B1(i) WITH A2(*,k1j * i + lj)
        -:  184:
        1:  185:      tname='align213'
       1*:  186:      allocate (A2(AN1,AN2),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        7:  187:      erri= ER
        -:  188:      NNL=NL 
        7:  189:      s=0
        -:  190:
        -:  191:!dvm$ actual(erri,s)
        -:  192:!dvm$ region local(A2,B1)
        -:  193:!dvm$ parallel (i) on B1(i)
        7:  194:      do i=1,BN1
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        7:  195:            B1(i) =i     
        -:  196:      enddo 
        -:  197:
        -:  198:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri ) ), private(ib)
        9:  199:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  200:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       64:  201:             A2(i,j) = i*NL+j
        -:  202:             if (
        -:  203:     *          ((j-lj) .eq.(((j-lj)/k1j) *k1j)) .and.
       64:  204:     *          (((j-lj)/k1j) .gt. 0)  .and.
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        8:  205:     *          (((j-lj)/k1j) .le. BN1)  )then
       48:  206:                ib = (j-lj)/k1j
       48:  207:                if (B1(ib) .eq.(ib)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  208:                else
    #####:  209:                    erri = min(erri,ib)
        -:  210:                endif
        -:  211:             endif   
        -:  212:          enddo 
        -:  213:      enddo 
        -:  214:
        -:  215:!dvm$ parallel (i) on B1(i), reduction( min( erri ),sum(s) )
        7:  216:      do i=1,BN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        6:  217:            s = s + B1(i)
        7:  218:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  219:            else
    #####:  220:               erri = min(erri,i)
        -:  221:            endif
        -:  222:      enddo 
        -:  223:!dvm$ end region   
        -:  224:!dvm$ get_actual(erri,s) 
        -:  225:  
        1:  226:      cs = ((1 + BN1)* BN1/ 2)
        -:  227:c      write (*,*) erri,s,cs
        -:  228:  
        1:  229:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  230:     *     (s .eq.cs )) then     
        1:  231:          call ansyes(tname)
call    0 returned 100%
        -:  232:          else
    #####:  233:          call ansno(tname)
call    0 never executed
        -:  234:      endif 
       1*:  235:      deallocate (B1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  236:
        1:  237:      end
        -:  238:C ----------------------------------------------------align214
        -:  239:c 214     ALIGN arrB[i] WITH arrA[2*i+2][ ] vector arrB on replication on 
        -:  240:*                                          every column of arrA with stretching and shift
function align214_ called 1 returned 100% blocks executed 69%
        1:  241:      subroutine align214
        -:  242:      integer, parameter :: AN1=28,AN2=8,BN1=5,NL=1000,ER=10000
        -:  243:c     parameters for ALIGN arrB[i] WITH arrA(k1i*i+li,*)                                                
        -:  244:      integer, parameter :: k1i=2,k2i=0,li=2,k1j=0,k2j=0,lj=0
        -:  245:      character*9 tname
        1:  246:      integer, allocatable :: A2(:,:), B1(:)
        -:  247:      integer s,erri,i,j,ia,ja,ib,jb
        -:  248:               
        -:  249:!dvm$ distribute A2(*,BLOCK)    
        -:  250:!dvm$ ALIGN B1(i) WITH A2(k1i*i+li,*)
        -:  251:
        1:  252:      tname='align214'
       1*:  253:      allocate (A2(AN1,AN2),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  254:      erri= ER
        1:  255:      NNL=NL 
        1:  256:      s=0  
        -:  257:
        -:  258:!dvm$ actual(erri,s)
        -:  259:!dvm$ region local(A2,B1)
        -:  260:!dvm$ parallel (i) on B1(i)
        6:  261:      do i=1,BN1
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        6:  262:            B1(i) =i
        -:  263:      enddo 
        -:  264:
        -:  265:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri )), private(ib)
       29:  266:      do i=1,AN1
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
      253:  267:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      224:  268:             A2(i,j) = i*NL+j
        -:  269:             if (  
        -:  270:     *          ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
      224:  271:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
       28:  272:     *          (((i-li)/k1i) .le. BN1)  )then
       40:  273:                ib = (i-li)/k1i
       40:  274:                if (B1(ib) .eq.(ib)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  275:                else
    #####:  276:                    erri = min(erri,ib)
        -:  277:                endif
        -:  278:             endif   
        -:  279:          enddo 
        -:  280:      enddo 
        -:  281:
        -:  282:!dvm$ parallel (i) on B1(i), reduction( min( erri ),sum(s) )
        6:  283:      do i=1,BN1
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:  284:            s = s + B1(i)
        6:  285:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  286:            else
    #####:  287:               erri = min(erri,i)
        -:  288:            endif
        -:  289:      enddo 
        -:  290:!dvm$ end region   
        -:  291:!dvm$ get_actual(erri,s) 
        -:  292:
        1:  293:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  294:     *     (s .eq. ((1 + BN1)* BN1/ 2))) then     
        1:  295:          call ansyes(tname)
call    0 returned 100%
        -:  296:          else
    #####:  297:          call ansno(tname)
call    0 never executed
    #####:  298:          write (*,*) erri,s
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  299:      endif 
       1*:  300:      deallocate(B1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  301:      end
        -:  302:C ----------------------------------------------------align215
        -:  303:c 215 arrA2[*][ BLOCK]  arrB1[] ALIGN arrB[i] WITH arrA[1][i]vector arrB on section 
        -:  304:*                                                                   (the first line of arrA)
function align215_ called 1 returned 100% blocks executed 80%
        1:  305:      subroutine align215
        -:  306:      integer, parameter :: AN1=8,AN2=8,BN1=4,NL=1000,ER=10000
        -:  307:c     parameters for ALIGN arrB[i] WITH arrA(1,i)                                                
        -:  308:      character*9 tname
        1:  309:      integer, allocatable :: A2(:,:), B1(:)
        -:  310:      integer erri,i,j,ia,ja,ib,jb
        -:  311:               
        -:  312:!dvm$ distribute A2(BLOCK,*)    
        -:  313:!dvm$ ALIGN B1(i) WITH A2(1,i)
        -:  314:
        1:  315:      tname='align215'
       1*:  316:      allocate (A2(AN1,AN2),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        5:  317:      erri= ER
        -:  318:      NNL=NL 
        -:  319:
        -:  320:!dvm$ actual(erri)
        -:  321:!dvm$ region local(A2,B1)
        -:  322:!dvm$ parallel (i) on B1(i)
        5:  323:      do i=1,BN1
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  324:            B1(i) =0     
        -:  325:      enddo 
        -:  326:
        -:  327:!dvm$ parallel (i,j) on A2(i,j), private(ib)
        9:  328:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  329:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       64:  330:             A2(i,j) = i*NL+j
       72:  331:             if ((i .eq. 1) ) then
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        8:  332:                      if ( 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  333:     *                  (j .le. BN1)  
        -:  334:     *                  )  then 
        4:  335:                        ib = j
        4:  336:                        B1(ib) = ib
        -:  337:                      endif 
        -:  338:             endif   
        -:  339:          enddo 
        -:  340:      enddo 
        -:  341:
        -:  342:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia,ja)
        5:  343:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  344:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  345:            else
    #####:  346:               erri = min(erri,i)
        -:  347:            endif
        4:  348:            ia=1
        4:  349:            ja=i
        5:  350:            if (A2(ia,ja) .eq.(ia*NL+ja)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  351:            else
    #####:  352:                erri = min(erri,i*NL/10+j)
        -:  353:            endif 
        -:  354:      enddo 
        -:  355:!dvm$ end region   
        -:  356:!dvm$ get_actual(erri) 
        -:  357:  
        1:  358:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  359:          call ansyes(tname)
call    0 returned 100%
        -:  360:          else
    #####:  361:          call ansno(tname)
call    0 never executed
        -:  362:      endif 
       1*:  363:      deallocate (B1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  364:
        1:  365:      end
        -:  366:C ----------------------------------------------------align216
        -:  367:c 216     ALIGN arrB[i] WITH arrA[2*i+2][2] vector arrB on section 
        -:  368:*                                       (the second column of arrA) with stretching and shift
function align216_ called 1 returned 100% blocks executed 81%
        1:  369:      subroutine align216
        -:  370:      integer, parameter :: AN1=14,AN2=3,BN1=6,NL=1000,ER=10000
        -:  371:c     parameters for ALIGN arrB[i] WITH arrA(k1i*i+li,lj)                                                
        -:  372:      integer, parameter :: k1i=2,k2i=0,li=2,k1j=0,k2j=0,lj=2
        -:  373:      character*9 tname
        1:  374:      integer, allocatable :: A2(:,:), B1(:)
        -:  375:      integer :: erri, i
        -:  376:               
        -:  377:!dvm$ distribute A2(BLOCK,*)   
        -:  378:!dvm$ ALIGN B1(i) WITH A2(k1i*i+li,lj)
        -:  379:
        1:  380:      tname='align216'
       1*:  381:      allocate (A2(AN1,AN2),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        7:  382:      erri= ER
        -:  383:      NNL=NL 
        -:  384:
        -:  385:!dvm$ actual(erri)
        -:  386:!dvm$ region local(A2,B1)
        -:  387:!dvm$ parallel (i) on B1(i)
        7:  388:      do i=1,BN1
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        7:  389:            B1(i) =0     
        -:  390:      enddo 
        -:  391:
        -:  392:!dvm$ parallel (i,j) on A2(i,j), private(ib)
       15:  393:      do i=1,AN1
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
       57:  394:          do j=1,AN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       42:  395:             A2(i,j) = i*NL+j
        -:  396:             if ((j .eq. lj) .and. 
        -:  397:     *                  ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       42:  398:     *                  (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 86% (fallthrough)
branch  5 taken 14%
        -:  399:     *                  (((i-li)/k1i) .le. BN1)  
       14:  400:     *                  )  then 
        6:  401:               ib = (i-li)/k1i
        6:  402:               B1(ib) = ib
        -:  403:             endif   
        -:  404:          enddo 
        -:  405:      enddo 
        -:  406:
        -:  407:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia,ja)
        7:  408:      do i=1,BN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        6:  409:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:            else
    #####:  411:               erri = min(erri,i)
        -:  412:            endif
        6:  413:            ia=k1i*i+li
        6:  414:            ja=lj
        7:  415:            if (A2(ia,ja) .eq.(ia*NL+ja)) then     
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  416:            else
    #####:  417:                erri = min(erri,i*NL/10+j)
        -:  418:            endif 
        -:  419:      enddo 
        -:  420:!dvm$ end region   
        -:  421:!dvm$ get_actual(erri) 
        -:  422:  
        1:  423:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  424:          call ansyes(tname)
call    0 returned 100%
        -:  425:      else
    #####:  426:          call ansno(tname)
call    0 never executed
        -:  427:      endif 
       1*:  428:      deallocate (B1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  429:
        1:  430:      end
        -:  431:C ----------------------------------------------------align217
        -:  432:c 217     ALIGN arrB[i] WITH arrA[][i]  vector replication on every line of arrA
function align217_ called 1 returned 100% blocks executed 79%
        1:  433:      subroutine align217
        -:  434:      integer, parameter :: AN1=8,AN2=8,BN1=6,NL=1000,ER=10000
        -:  435:c     parameters for ALIGN arrB[i] WITH arrA[][k1j * i + lj]                                                
        -:  436:      integer, parameter :: k1i=0,k2i=0,li=0,k1j=1,k2j=0,lj=0
        -:  437:      character*9 tname
        1:  438:      integer, allocatable :: A2(:,:), B1(:)
        -:  439:      integer s,cs,erri,i,j,ia,ja,ib,jb
        -:  440:               
        -:  441:!dvm$ distribute A2(BLOCK,*)    
        -:  442:!dvm$ ALIGN B1(i) WITH A2(*,k1j * i + lj)
        -:  443:
        1:  444:      tname='align217'
       1*:  445:      allocate (A2(AN1,AN2),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        7:  446:      erri= ER
        -:  447:      NNL=NL 
        7:  448:      s=0
        -:  449:
        -:  450:!dvm$ actual(erri,s)
        -:  451:!dvm$ region local(A2,B1)
        -:  452:!dvm$ parallel (i) on B1(i)
        7:  453:      do i=1,BN1
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        7:  454:            B1(i) =i     
        -:  455:      enddo 
        -:  456:
        -:  457:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri ) ), private(ib)
        9:  458:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  459:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       64:  460:             A2(i,j) = i*NL+j
        -:  461:             if (
        -:  462:     *          ((j-lj) .eq.(((j-lj)/k1j) *k1j)) .and.
       64:  463:     *          (((j-lj)/k1j) .gt. 0)  .and.
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        8:  464:     *          (((j-lj)/k1j) .le. BN1)  )then
       48:  465:                ib = (j-lj)/k1j
       48:  466:                if (B1(ib) .eq.(ib)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  467:                else
    #####:  468:                    erri = min(erri,ib)
        -:  469:                endif
        -:  470:             endif   
        -:  471:          enddo 
        -:  472:      enddo 
        -:  473:
        -:  474:!dvm$ parallel (i) on B1(i), reduction( min( erri ),sum(s) )
        7:  475:      do i=1,BN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        6:  476:            s = s + B1(i)
        7:  477:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  478:            else
    #####:  479:               erri = min(erri,i)
        -:  480:            endif
        -:  481:      enddo 
        -:  482:!dvm$ end region   
        -:  483:!dvm$ get_actual(erri,s) 
        -:  484:  
        1:  485:      cs = ((1 + BN1)* BN1/ 2)
        1:  486:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  487:     *     (s .eq.cs )) then     
        1:  488:          call ansyes(tname)
call    0 returned 100%
        -:  489:          else
    #####:  490:          call ansno(tname)
call    0 never executed
        -:  491:      endif 
       1*:  492:      deallocate (B1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  493:
        1:  494:      end
        -:  495:C ----------------------------------------------------align218
        -:  496:c 218     ALIGN arrB[i] WITH arrA[2*i+2][ ] vector arrB on replication on 
        -:  497:*                                          every column of arrA with stretching and shift
function align218_ called 1 returned 100% blocks executed 69%
        1:  498:      subroutine align218
        -:  499:      integer, parameter :: AN1=28,AN2=8,BN1=5,NL=1000,ER=10000
        -:  500:c     parameters for ALIGN arrB[i] WITH arrA(k1i*i+li,*)                                                
        -:  501:      integer, parameter :: k1i=2,k2i=0,li=2,k1j=0,k2j=0,lj=0
        -:  502:      character*9 tname
        1:  503:      integer, allocatable :: A2(:,:), B1(:)
        -:  504:      integer s,erri,i,j,ia,ja,ib,jb
        -:  505:               
        -:  506:!dvm$ distribute A2(BLOCK,*)    
        -:  507:!dvm$ ALIGN B1(i) WITH A2(k1i*i+li,*)
        -:  508:
        1:  509:      tname='align218'
       1*:  510:      allocate (A2(AN1,AN2),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  511:      erri= ER
        1:  512:      NNL=NL 
        1:  513:      s=0  
        -:  514:
        -:  515:!dvm$ actual(erri,s)
        -:  516:!dvm$ region local(A2,B1)
        -:  517:!dvm$ parallel (i) on B1(i)
        6:  518:      do i=1,BN1
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        6:  519:            B1(i) =i
        -:  520:      enddo 
        -:  521:
        -:  522:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri )), private(ib)
       29:  523:      do i=1,AN1
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
      253:  524:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      224:  525:             A2(i,j) = i*NL+j
        -:  526:             if (  
        -:  527:     *          ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
      224:  528:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
       28:  529:     *          (((i-li)/k1i) .le. BN1)  )then
       40:  530:                ib = (i-li)/k1i
       40:  531:                if (B1(ib) .eq.(ib)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  532:                else
    #####:  533:                    erri = min(erri,ib)
        -:  534:                endif
        -:  535:             endif   
        -:  536:          enddo 
        -:  537:      enddo 
        -:  538:
        -:  539:!dvm$ parallel (i) on B1(i), reduction( min( erri ),sum(s) )
        6:  540:      do i=1,BN1
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:  541:            s = s + B1(i)
        6:  542:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  543:            else
    #####:  544:               erri = min(erri,i)
        -:  545:            endif
        -:  546:      enddo 
        -:  547:!dvm$ end region   
        -:  548:!dvm$ get_actual(erri,s) 
        -:  549:
        1:  550:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  551:     *     (s .eq. ((1 + BN1)* BN1/ 2))) then     
        1:  552:          call ansyes(tname)
call    0 returned 100%
        -:  553:          else
    #####:  554:          call ansno(tname)
call    0 never executed
    #####:  555:          write (*,*) erri,s
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  556:      endif 
       1*:  557:      deallocate (B1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  558:
        1:  559:      end
        -:  560:C -------------------------------------------------
        -:  561:
function ansyes_ called 8 returned 100% blocks executed 100%
        8:  562:      subroutine ansyes(name)
        -:  563:      character*9 name
        8:  564:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        8:  565:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  566:      subroutine ansno(name)
        -:  567:      character*9 name
    #####:  568:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  569:      end  
