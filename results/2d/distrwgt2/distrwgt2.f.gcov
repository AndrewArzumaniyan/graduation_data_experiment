        -:    0:Source:results/2d/distrwgt2/distrwgt2.f
        -:    0:Graph:./results\2d\distrwgt2\distrwgt2.gcno
        -:    0:Data:./results\2d\distrwgt2\distrwgt2.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program DISTRW2
        -:    2:
        -:    3:!    Testing DISTRIBUTE and REDISTRIBUTE directives       
        -:    4:!            WGT_BLOCK distribution
        -:    5:       
        1:    6:      print *,'===START OF distrwgt2========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    7:
        -:    8:C -------------------------------------------------
        -:    9:c 24  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]  REDISTRIBUTE arrA2[*][*]
        1:   10:      call distrw24
call    0 returned 100%
        -:   11:C -------------------------------------------------
        -:   12:c 25  DISTRIBUTE arrA2[*][*]  REDISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]
        1:   13:      call distrw25
call    0 returned 100%
        -:   14:C -------------------------------------------------
        -:   15:c 26  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK] 
        -:   16:C                             REDISTRIBUTE arrA2[BLOCK][BLOCK]
        1:   17:      call distrw26
call    0 returned 100%
        -:   18:C -------------------------------------------------
        -:   19:c 27  DISTRIBUTE arrA2[BLOCK][BLOCK]
        -:   20:c                             REDISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]
        1:   21:      call distrw27
call    0 returned 100%
        -:   22:C -------------------------------------------------
        -:   23:c 28  DISTRIBUTE arrA2[WGT_BLOCK][BLOCK]
        -:   24:c                         REDISTRIBUTE arrA2[BLOCK][WGT_BLOCK]
        1:   25:      call distrw28
call    0 returned 100%
        -:   26:C -------------------------------------------------
        -:   27:c 29  DISTRIBUTE arrA2[BLOCK][WGT_BLOCK]
        -:   28:c                         REDISTRIBUTE arrA2[WGT_BLOCK][BLOCK]
        1:   29:      call distrw29
call    0 returned 100%
        -:   30:C -------------------------------------------------
        -:   31:c 210  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]    other weigths
        -:   32:c                      REDISTRIBUTE [WGT_BLOCK][WGT_BLOCK]
        1:   33:      call distrw210
call    0 returned 100%
        -:   34:C -------------------------------------------------
        -:   35:c 211  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]   with zero weigths
        -:   36:c                      REDISTRIBUTE [WGT_BLOCK][WGT_BLOCK]
        1:   37:      call distrw211
call    0 returned 100%
        -:   38:C -------------------------------------------------
        -:   39:c 212  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]   with zero weigths
        -:   40:c                      REDISTRIBUTE [BLOCK][WGT_BLOCK]
        -:   41:c                      REDISTRIBUTE [WGT_BLOCK][BLOCK]
        1:   42:      call distrw212
call    0 returned 100%
        -:   43:C -------------------------------------------------
        -:   44:c 213  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]   with zero weigths
        -:   45:c                      REDISTRIBUTE [*][*]
        -:   46:c                      REDISTRIBUTE [WGT_BLOCK][WGT_BLOCK]
        1:   47:      call distrw213
call    0 returned 100%
        -:   48:C -------------------------------------------------
        -:   49:c 214  DISTRIBUTE arrA2[WGT_BLOCK][*]           with zero weigths
        -:   50:c                      REDISTRIBUTE [*][WGT_BLOCK]
        -:   51:c                      REDISTRIBUTE [WGT_BLOCK][WGT_BLOCK]
        1:   52:      call distrw214
call    0 returned 100%
        -:   53:C -------------------------------------------------
        -:   54:c 32  DISTRIBUTE  arrA3[WGT_BLOCK][WGT_BLOCK] [*] 
        -:   55:c                      REDISTRIBUTE arrA3[*][WGT_BLOCK][WGT_BLOCK]
        1:   56:      call distrw32
call    0 returned 100%
        -:   57:C -------------------------------------------------
        -:   58:c 33  DISTRIBUTE  arrA3[WGT_BLOCK][WGT_BLOCK][*]
        -:   59:c                      REDISTRIBUTE arrA3[WGT_BLOCK][*][BLOCK]
        1:   60:      call distrw33
call    0 returned 100%
        -:   61:C -------------------------------------------------
        -:   62:c 34  DISTRIBUTE  arrA3[WGT_BLOCK][*][WGT_BLOCK] 
        -:   63:c                      REDISTRIBUTE arrA3[WGT_BLOCK][WGT_BLOCK][*]
        1:   64:      call distrw34
call    0 returned 100%
        -:   65:C -------------------------------------------------
        -:   66:c 35  DISTRIBUTE  arrA3[WGT_BLOCK][WGT_BLOCK][*]
        -:   67:c                      REDISTRIBUTE arrA3[*][*][WGT_BLOCK]
        1:   68:      call distrw35
call    0 returned 100%
        -:   69:C -------------------------------------------------
        -:   70:c 36  DISTRIBUTE  arrA3[WGT_BLOCK][*][BLOCK]
        -:   71:c                      REDISTRIBUTE arrA3[BLOCK][*][WGT_BLOCK]
        1:   72:      call distrw36
call    0 returned 100%
        -:   73:C -------------------------------------------------
        -:   74:c 37  DISTRIBUTE  arrA3[WGT_BLOCK][BLOCK][*]
        -:   75:c                      REDISTRIBUTE arrA3[BLOCK][*][WGT_BLOCK]
        1:   76:      call distrw37
call    0 returned 100%
        -:   77:C -------------------------------------------------
        -:   78:c 38  DISTRIBUTE  arrA3[BLOCK][*][WGT_BLOCK]
        -:   79:c                      REDISTRIBUTE arrA3[*][WGT_BLOCK][BLOCK]
        1:   80:      call distrw38
call    0 returned 100%
        -:   81:C -------------------------------------------------
        -:   82:c 41  DISTRIBUTE arrA4[*][*][WGT_BLOCK][WGT_BLOCK]
        -:   83:c                     REDISTRIBUTE arrA4[*][*][*][*]
        1:   84:      call distrw41
call    0 returned 100%
        -:   85:C -------------------------------------------------
        -:   86:c 42  DISTRIBUTE arrA4[WGT_BLOCK][*][WGT_BLOCK][*]
        -:   87:c                     REDISTRIBUTE arrA4[*][WGT_BLOCK][WGT_BLOCK][*]
        1:   88:      call distrw42
call    0 returned 100%
        -:   89:C -------------------------------------------------
        -:   90:C
        1:   91:      print *,'=== END OF distrwgt2 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   92:
function main called 1 returned 100% blocks executed 100%
        1:   93:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   94:
        -:   95:C ----------------------------------------------------distrw24
        -:   96:c 24  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]  REDISTRIBUTE arrA2[*][*]
        -:   97:
function distrw24_ called 1 returned 100% blocks executed 85%
        1:   98:      subroutine distrw24
        -:   99:
        -:  100:      integer, parameter :: AN1=12,AN2=12,NL=1000,ER=10000
        -:  101:      integer :: erri= ER,i,j
        -:  102:
        -:  103:      double precision, dimension(6) ::
        -:  104:     >        WB1=(/2., 2., 3., 1., 5., 1./)     
        -:  105:      double precision, dimension(7) ::
        -:  106:     >        WB2=(/3., 2., 2., 3., 1., 1., 4./)     
        -:  107:
        1:  108:      integer, allocatable :: A2(:,:)
        -:  109:      character(*), parameter :: tname='distrw24  '
        -:  110:               
        -:  111:!dvm$ distribute A2(WGT_BLOCK(WB1,6),WGT_BLOCK(WB2,7))   
        -:  112:!dvm$ dynamic A2
        -:  113:
       1*:  114:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  115:
        -:  116:!dvm$ region
        -:  117:!dvm$ parallel (i,j) on A2(i,j)
       13:  118:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      157:  119:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      156:  120:            A2(i,j) =i*NL+j     
        -:  121:          enddo
        -:  122:      enddo
        -:  123:!dvm$ end region
        -:  124:
        -:  125:!dvm$ redistribute A2(*,*)    
        -:  126:
        -:  127:!dvm$ actual (erri)
        -:  128:
        -:  129:!dvm$ region
        -:  130:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri ) )
       13:  131:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      157:  132:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      156:  133:            if (A2(i,j) /= (i*NL+j)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  134:               erri = min(erri,i*NL/10+j)
        -:  135:            endif 
        -:  136:          enddo
        -:  137:      enddo
        -:  138:!dvm$ end region
        -:  139:
        -:  140:!dvm$ get_actual (erri)
        -:  141:
        1:  142:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  143:          call ansyes(tname)
call    0 returned 100%
        -:  144:      else
    #####:  145:          call ansno(tname)
call    0 never executed
        -:  146:      endif 
        -:  147: 
       1*:  148:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  149:
        1:  150:      end subroutine distrw24
        -:  151:
        -:  152:C ----------------------------------------------------distrw25
        -:  153:c 25  DISTRIBUTE arrA2[*][*]  REDISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]
        -:  154:
function distrw25_ called 1 returned 100% blocks executed 85%
        1:  155:      subroutine distrw25
        -:  156:
        -:  157:      integer, parameter :: AN1=8,AN2=8,NL=1000,ER=10000
        -:  158:      integer :: erri= ER,i,j
        -:  159:
        -:  160:      double precision, dimension(5) :: WB1=(/1.0,2.,2.,3.0, 0./)     
        -:  161:      double precision, dimension(7) :: WB2=(/1.0,1.,2.,1.0, 1.,1.,1./)     
        -:  162:
        1:  163:      integer, allocatable :: A2(:,:)
        -:  164:      character(*), parameter :: tname='distrw25  '
        -:  165:               
        -:  166:!dvm$ distribute A2(*,*)   
        -:  167:!dvm$ dynamic A2
        -:  168:
       1*:  169:       allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  170:
        -:  171:!dvm$ region
        -:  172:!dvm$ parallel (i,j) on A2(i,j)
        9:  173:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  174:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  175:            A2(i,j) =i*NL+j+10     
        -:  176:          enddo
        -:  177:      enddo
        -:  178:!dvm$ end region
        -:  179:
        -:  180:!dvm$ redistribute A2(WGT_BLOCK(WB1,5), WGT_BLOCK(WB2,7))    
        -:  181:
        -:  182:!dvm$ actual (erri)
        -:  183:
        -:  184:!dvm$ region
        -:  185:!dvm$ parallel (i,j) on A2(i,j), reduction( min(erri) )
        9:  186:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  187:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  188:            if (A2(i,j) /= (i*NL+j)+10) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  189:               erri = min(erri,i*NL/10+j)
        -:  190:            endif 
        -:  191:          enddo
        -:  192:      enddo
        -:  193:!dvm$ end region
        -:  194:
        -:  195:!dvm$ get_actual (erri)
        -:  196:
        1:  197:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  198:          call ansyes(tname)
call    0 returned 100%
        -:  199:      else
    #####:  200:          call ansno(tname)
call    0 never executed
        -:  201:      endif 
        -:  202:
       1*:  203:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  204:
        1:  205:      end subroutine distrw25
        -:  206:
        -:  207:C ----------------------------------------------------distrw26
        -:  208:c 26  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]  REDISTRIBUTE arrA2[BLOCK][BLOCK]
        -:  209:
function distrw26_ called 1 returned 100% blocks executed 88%
        1:  210:      subroutine distrw26
        -:  211:
        -:  212:      integer, parameter :: AN1=12,AN2=12,NL=1000,ER=10000
        -:  213:      integer :: erri= ER,i,j
        -:  214:
        -:  215:      double precision, dimension(6) :: WB=(/1.0,4.,1.,1.0, 2., 1./)     
        -:  216:
        1:  217:      integer, allocatable :: A2(:,:)
        -:  218:      character(10), parameter :: tname='distrw26  '
        -:  219:               
        -:  220:!dvm$ distribute A2(WGT_BLOCK(WB,6),WGT_BLOCK(WB,6))   
        -:  221:!dvm$ dynamic A2
        -:  222:
       1*:  223:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  224:
      157:  225:      A2 = 3
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
        -:  226:
        -:  227:!dvm$ actual (A2)
        -:  228:
        -:  229:!dvm$ region
        -:  230:!dvm$ parallel (i,j) on A2(i,j)
       13:  231:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      157:  232:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      156:  233:            A2(i,j) =A2(i,j) + i*NL+j     
        -:  234:          enddo
        -:  235:      enddo
        -:  236:!dvm$ end region
        -:  237:
        -:  238:!dvm$ redistribute A2(BLOCK,BLOCK)    
        -:  239:
        -:  240:!dvm$ actual (erri)
        -:  241:
        -:  242:!dvm$ region
        -:  243:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri ) )
       13:  244:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      157:  245:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      156:  246:            if (A2(i,j) /= (i*NL+j) + 3) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  247:               erri = min(erri,i*NL/10+j)
        -:  248:            endif 
        -:  249:          enddo
        -:  250:      enddo
        -:  251:!dvm$ end region
        -:  252:
        -:  253:!dvm$ get_actual (erri)
        -:  254:
        1:  255:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  256:          call ansyes(tname)
call    0 returned 100%
        -:  257:      else
    #####:  258:          call ansno(tname)
call    0 never executed
        -:  259:      endif 
        -:  260:
       1*:  261:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  262:
        1:  263:      end subroutine distrw26
        -:  264:
        -:  265:C ----------------------------------------------------distrw27
        -:  266:c 27  DISTRIBUTE arrA2[BLOCK][BLOCK]  REDISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]
        -:  267:
function distrw27_ called 1 returned 100% blocks executed 85%
        1:  268:      subroutine distrw27
        -:  269:
        -:  270:      integer, parameter :: AN1=8,AN2=8,NL=1000,ER=10000
        -:  271:      integer :: erri= ER,i,j
        -:  272:
        -:  273:      double precision, dimension(6) :: WB=(/2.0,1.,3.,2.0, 1., 1./)     
        -:  274:
        1:  275:      integer, allocatable :: A2(:,:)
        -:  276:      character(10), parameter :: tname='distrw27'
        -:  277:               
        -:  278:!dvm$ distribute A2(BLOCK,BLOCK)   
        -:  279:!dvm$ dynamic A2
        -:  280:
       1*:  281:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  282:
        -:  283:!dvm$ region
        -:  284:!dvm$ parallel (i,j) on A2(i,j)
        9:  285:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  286:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  287:            A2(i,j) =(i*NL+j) * 2     
        -:  288:          enddo
        -:  289:      enddo
        -:  290:!dvm$ end region
        -:  291:
        -:  292:!dvm$ redistribute A2(WGT_BLOCK(WB,6),WGT_BLOCK(WB,4))    
        -:  293:
        -:  294:!dvm$ actual (erri)
        -:  295:
        -:  296:!dvm$ region
        -:  297:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri ) )
        9:  298:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  299:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       64:  300:            A2(i,j) = A2(i,j) / 2 
       72:  301:            if (A2(i,j) /= (i*NL+j)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  302:               erri = min(erri,i*NL/10+j)
        -:  303:            endif 
        -:  304:          enddo
        -:  305:      enddo
        -:  306:!dvm$ end region
        -:  307:
        -:  308:!dvm$ get_actual (erri)
        -:  309:
        1:  310:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  311:          call ansyes(tname)
call    0 returned 100%
        -:  312:      else
    #####:  313:          call ansno(tname)
call    0 never executed
        -:  314:      endif 
        -:  315:
       1*:  316:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  317:
        1:  318:      end subroutine distrw27
        -:  319:
        -:  320:C ----------------------------------------------------distrw28
        -:  321:c 28  DISTRIBUTE arrA2[WGT_BLOCK][BLOCK]  REDISTRIBUTE arrA2[BLOCK][WGT_BLOCK]
        -:  322:
function distrw28_ called 1 returned 100% blocks executed 85%
        1:  323:      subroutine distrw28
        -:  324:
        -:  325:      integer, parameter :: AN1=12,AN2=12,NL=1000,ER=10000
        -:  326:      integer :: erri= ER,i,j
        -:  327:
        -:  328:      double precision, dimension(8) :: WB1=(/1.,2.,2.,3.,1.,1.,2.,4./)
        -:  329:      double precision, dimension(6) :: WB2=(/1.0,2.,2.,3.0, 1., 1./)
        -:  330:
        1:  331:      integer, allocatable :: A2(:,:)
        -:  332:      character(10) :: tname='distrw28  '
        -:  333:               
        -:  334:!dvm$ distribute A2(WGT_BLOCK(WB1,8),BLOCK)   
        -:  335:!dvm$ dynamic A2
        -:  336:
       1*:  337:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  338:
        -:  339:!dvm$ region
        -:  340:!dvm$ parallel (i,j) on A2(i,j)
       13:  341:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      157:  342:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      156:  343:            A2(i,j) =i*NL+j     
        -:  344:          enddo
        -:  345:      enddo
        -:  346:!dvm$ end region
        -:  347:
        -:  348:!dvm$ redistribute A2(BLOCK,WGT_BLOCK(WB2,6))    
        -:  349:
        -:  350:!dvm$ actual (erri)
        -:  351:
        -:  352:!dvm$ region
        -:  353:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri ) )
       13:  354:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      157:  355:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      156:  356:            if (A2(i,j) /= (i*NL+j)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  357:               erri = min(erri,i*NL/10+j)
        -:  358:            endif 
        -:  359:          enddo
        -:  360:      enddo
        -:  361:!dvm$ end region
        -:  362:
        -:  363:!dvm$ get_actual (erri)
        -:  364:
        1:  365:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  366:          call ansyes(tname)
call    0 returned 100%
        -:  367:      else
    #####:  368:          call ansno(tname)
call    0 never executed
        -:  369:      endif 
        -:  370:
       1*:  371:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  372:
        1:  373:      end subroutine distrw28
        -:  374:
        -:  375:C ----------------------------------------------------distrw29
        -:  376:c 29  DISTRIBUTE arrA2[BLOCK][WGT_BLOCK]  REDISTRIBUTE arrA2[WGT_BLOCK][BLOCK]
        -:  377:
function distrw29_ called 1 returned 100% blocks executed 88%
        1:  378:      subroutine distrw29
        -:  379:
        -:  380:      integer, parameter :: AN1=12,AN2=12,NL=1000,ER=10000
        -:  381:      integer :: erri= ER,i,j
        -:  382:
        -:  383:      double precision, dimension(6) :: WB1=(/1.0,2.,2.,3.,3.,1./)
        -:  384:      double precision, dimension(6) :: WB2=(/1.0,2.,2.,3.0, 1., 1./)     
        -:  385:
        1:  386:      integer, allocatable :: A2(:,:)
        -:  387:      character(10), parameter :: tname='distrw29'
        -:  388:               
        -:  389:!dvm$ distribute A2(BLOCK,WGT_BLOCK(WB1,6))   
        -:  390:!dvm$ dynamic A2
        -:  391:
       1*:  392:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  393:      
      157:  394:      A2 = 8
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
        -:  395:
        -:  396:!dvm$ actual (A2)
        -:  397:
        -:  398:!dvm$ region
        -:  399:!dvm$ parallel (i,j) on A2(i,j)
       13:  400:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      157:  401:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      156:  402:            A2(i,j) =A2(i,j) * (i*NL+j)     
        -:  403:          enddo
        -:  404:      enddo
        -:  405:!dvm$ end region
        -:  406:
        -:  407:!dvm$ redistribute A2(WGT_BLOCK(WB2,6),BLOCK)    
        -:  408:
        -:  409:!dvm$ actual (erri)
        -:  410:
        -:  411:!dvm$ region
        -:  412:!dvm$ parallel (i,j) on A2(i,j), reduction( min( erri ) )
       13:  413:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      157:  414:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      156:  415:            if (A2(i,j) /= (i*NL+j)*8) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  416:               erri = min(erri,i*NL/10+j)
        -:  417:            endif 
        -:  418:          enddo
        -:  419:      enddo
        -:  420:!dvm$ end region
        -:  421:
        -:  422:!dvm$ get_actual (erri)
        -:  423:
        1:  424:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  425:          call ansyes(tname)
call    0 returned 100%
        -:  426:      else
    #####:  427:          call ansno(tname)
call    0 never executed
        -:  428:      endif 
        -:  429:
       1*:  430:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  431:
        1:  432:      end subroutine distrw29
        -:  433:
        -:  434:C ----------------------------------------------------distrw210
        -:  435:c 210  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]
        -:  436:c                REDISTRIBUTE [WGT_BLOCK][WGT_BLOCK] with other weigths
        -:  437:
function distrw210_ called 1 returned 100% blocks executed 85%
        1:  438:      subroutine distrw210
        -:  439:
        -:  440:      integer, parameter :: AN1=10,AN2=8,NL=1000,ER=10000
        -:  441:      integer :: erri= ER,i,j
        -:  442:
        -:  443:      double precision, dimension(8) ::
        -:  444:     >       WB1 = (/1.0, 2., 1., 1.0, 3.2, 2., 3., 1./)     
        -:  445:      double precision, dimension(6) ::
        -:  446:     >       WB2 = (/1.0, 1., 2., 1.0, 2., 1./)     
        -:  447:
        1:  448:      integer, allocatable :: A2(:,:)
        -:  449:      character(*), parameter :: tname='distrw210 '
        -:  450:               
        -:  451:!dvm$ distribute A2(WGT_BLOCK(WB1,8),WGT_BLOCK(WB2,6))   
        -:  452:!dvm$ dynamic A2
        -:  453:
       1*:  454:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  455:
        -:  456:!dvm$ region
        -:  457:!dvm$ parallel (i,j) on A2(i,j)
       11:  458:      do i=1,AN1
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       91:  459:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       90:  460:            A2(i,j) =i*NL+j     
        -:  461:          enddo
        -:  462:      enddo
        -:  463:!dvm$ end region
        -:  464:
        -:  465:!dvm$ redistribute A2(WGT_BLOCK(WB2,6),WGT_BLOCK(WB1,7))    
        -:  466:
        -:  467:!dvm$ actual (erri)
        -:  468:
        -:  469:!dvm$ region
        -:  470:!dvm$ parallel (i,j) on A2(i,j), reduction( min(erri) )
       11:  471:      do i=1,AN1
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       91:  472:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       90:  473:            if (A2(i,j) /= (i*NL+j)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  474:               erri = min(erri,i*NL/10+j)
        -:  475:            endif 
        -:  476:          enddo
        -:  477:      enddo
        -:  478:!dvm$ end region
        -:  479:                                                    
        -:  480:!dvm$ get_actual (erri)
        -:  481:
        1:  482:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  483:          call ansyes(tname)
call    0 returned 100%
        -:  484:      else
    #####:  485:          call ansno(tname)
call    0 never executed
        -:  486:      endif 
        -:  487: 
       1*:  488:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  489:
        1:  490:      end subroutine distrw210
        -:  491:
        -:  492:C ----------------------------------------------------distrw211
        -:  493:c 211  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]
        -:  494:c                REDISTRIBUTE [WGT_BLOCK][WGT_BLOCK] with zero weigths
        -:  495:
function distrw211_ called 1 returned 100% blocks executed 88%
        1:  496:      subroutine distrw211
        -:  497:
        -:  498:      integer, parameter :: AN1=8,AN2=17,NL=1000,ER=10000
        -:  499:      integer :: erri= ER,i,j
        -:  500:
        -:  501:      double precision, dimension(6) ::
        -:  502:     >       WB1=(/0., 1.0, 2., 1., 1.0, 0./)     
        -:  503:      double precision, dimension(9) ::
        -:  504:     >       WB2=(/1.0, 1., 0., 2., 0., 0., 1.0, 2., 1./)     
        -:  505:
        1:  506:      integer, allocatable :: A2(:,:)
        -:  507:      character(*), parameter :: tname='distrw211 '
        -:  508:               
        -:  509:!dvm$ distribute A2(WGT_BLOCK(WB1,6),WGT_BLOCK(WB2,9))   
        -:  510:!dvm$ dynamic A2
        -:  511:
       1*:  512:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  513:
      154:  514:      A2 = 1
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
        -:  515:
        -:  516:!dvm$ region
        -:  517:!dvm$ parallel (i,j) on A2(i,j)
        9:  518:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      145:  519:          do j=1,AN2
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      144:  520:            A2(i,j) = A2(i,j) + i*NL+j     
        -:  521:          enddo
        -:  522:      enddo
        -:  523:!dvm$ end region
        -:  524:
        -:  525:!dvm$ redistribute A2(WGT_BLOCK(WB2,7),WGT_BLOCK(WB1,5))    
        -:  526:
        -:  527:!dvm$ actual (erri)
        -:  528:
        -:  529:!dvm$ region
        -:  530:!dvm$ parallel (i,j) on A2(i,j), reduction( min(erri) )
        9:  531:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      145:  532:          do j=1,AN2
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      144:  533:            if (A2(i,j) /= (i*NL+j+1)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  534:               erri = min(erri,i*NL/10+j)
        -:  535:            endif 
        -:  536:          enddo
        -:  537:      enddo
        -:  538:!dvm$ end region
        -:  539:                                                    
        -:  540:!dvm$ get_actual (erri)
        -:  541:
        1:  542:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  543:          call ansyes(tname)
call    0 returned 100%
        -:  544:      else
    #####:  545:          call ansno(tname)
call    0 never executed
        -:  546:      endif 
        -:  547: 
       1*:  548:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  549:
        1:  550:      end subroutine distrw211
        -:  551:
        -:  552:C ----------------------------------------------------distrw212
        -:  553:c 212  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]   with zero weigths
        -:  554:c                      REDISTRIBUTE [BLOCK][WGT_BLOCK]
        -:  555:c                      REDISTRIBUTE [WGT_BLOCK][BLOCK]
        -:  556:
function distrw212_ called 1 returned 100% blocks executed 90%
        1:  557:      subroutine distrw212
        -:  558:
        -:  559:      integer, parameter :: AN1=10,AN2=12,NL=1000,ER=10000
        -:  560:      integer :: erri= ER,i,j
        -:  561:
        -:  562:      double precision, dimension(7) ::
        -:  563:     >       WB1=(/2., 0., 2., 1.0, 1.0, 1., 0./)     
        -:  564:      double precision, dimension(8) ::
        -:  565:     >       WB2=(/3.2, 2., 3.1, 2., 1.0, 4., 0., 1./)     
        -:  566:
        1:  567:      integer, allocatable :: A2(:,:)
        -:  568:      character(*), parameter :: tname='distrw212 '
        -:  569:               
        -:  570:!dvm$ distribute A2(WGT_BLOCK(WB1,7),WGT_BLOCK(WB2,8))   
        -:  571:!dvm$ dynamic A2
        -:  572:
       1*:  573:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  574:
      133:  575:      A2 = 0
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 91% (fallthrough)
branch  3 taken 9%
        -:  576:
        -:  577:!dvm$ region
        -:  578:!dvm$ parallel (i,j) on A2(i,j)
       11:  579:      do i=1,AN1
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      131:  580:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      130:  581:            A2(i,j) =i*NL+j     
        -:  582:          enddo
        -:  583:      enddo
        -:  584:!dvm$ end region
        -:  585:
        -:  586:!dvm$ redistribute A2(BLOCK, WGT_BLOCK(WB1,6))    
        -:  587:
        -:  588:!dvm$ region
        -:  589:!dvm$ parallel (i,j) on A2(i,j)
       11:  590:      do i=1,AN1
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      131:  591:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      130:  592:            A2(i,j) = A2(i,j) * 2     
        -:  593:          enddo
        -:  594:      enddo
        -:  595:!dvm$ end region
        -:  596:
        -:  597:!dvm$ redistribute A2(WGT_BLOCK(WB2,7), BLOCK)    
        -:  598:
        -:  599:!dvm$ actual (erri)
        -:  600:
        -:  601:!dvm$ region
        -:  602:!dvm$ parallel (i,j) on A2(i,j), reduction( min(erri) )
       11:  603:      do i=1,AN1
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      131:  604:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      130:  605:            if (A2(i,j) /= (i*NL+j)*2) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  606:               erri = min(erri,i*NL/10+j)
        -:  607:            endif 
        -:  608:          enddo
        -:  609:      enddo
        -:  610:!dvm$ end region
        -:  611:                                                    
        -:  612:!dvm$ get_actual (erri)
        -:  613:
        1:  614:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  615:          call ansyes(tname)
call    0 returned 100%
        -:  616:      else
    #####:  617:          call ansno(tname)
call    0 never executed
        -:  618:      endif 
        -:  619: 
       1*:  620:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  621:
        1:  622:      end subroutine distrw212
        -:  623:
        -:  624:C ----------------------------------------------------distrw213
        -:  625:c 213  DISTRIBUTE arrA2[WGT_BLOCK][WGT_BLOCK]   with zero weigths
        -:  626:c                      REDISTRIBUTE [*][*]
        -:  627:c                      REDISTRIBUTE [WGT_BLOCK][WGT_BLOCK]
function distrw213_ called 1 returned 100% blocks executed 90%
        1:  628:      subroutine distrw213
        -:  629:
        -:  630:      integer, parameter :: AN1=16,AN2=7,NL=1000,ER=10000
        -:  631:      integer :: erri= ER,i,j
        -:  632:
        -:  633:      double precision, dimension(8) ::
        -:  634:     >       WB1=(/2., 4., 2., 1.5, 1., 0.5, 0., 3./)     
        -:  635:      double precision, dimension(8) ::
        -:  636:     >       WB2=(/0., 0., 3.1, 2., 1.0, 4., 0., 1./)     
        -:  637:
        1:  638:      integer, allocatable :: A2(:,:)
        -:  639:      character(*), parameter :: tname='distrw213 '
        -:  640:               
        -:  641:!dvm$ distribute A2(WGT_BLOCK(WB1,8),WGT_BLOCK(WB2,8))   
        -:  642:!dvm$ dynamic A2
        -:  643:
       1*:  644:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  645:
      120:  646:      A2 = 4
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
        -:  647:
        -:  648:!dvm$ region
        -:  649:!dvm$ parallel (i,j) on A2(i,j)
       17:  650:      do i=1,AN1
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      129:  651:          do j=1,AN2
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
      128:  652:            A2(i,j) = A2(i,j) + i*NL+j     
        -:  653:          enddo
        -:  654:      enddo
        -:  655:!dvm$ end region
        -:  656:
        -:  657:!dvm$ redistribute A2(*,*)    
        -:  658:
        -:  659:!dvm$ region
        -:  660:!dvm$ parallel (i,j) on A2(i,j)
       17:  661:      do i=1,AN1
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      129:  662:          do j=1,AN2
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
      128:  663:            A2(i,j) = A2(i,j) * 3     
        -:  664:          enddo
        -:  665:      enddo
        -:  666:!dvm$ end region
        -:  667:
        -:  668:!dvm$ redistribute A2(WGT_BLOCK(WB2,6),WGT_BLOCK(WB1,6))   
        -:  669:
        -:  670:!dvm$ actual (erri)
        -:  671:
        -:  672:!dvm$ region
        -:  673:!dvm$ parallel (i,j) on A2(i,j), reduction( min(erri) )
       17:  674:      do i=1,AN1
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      129:  675:          do j=1,AN2
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
      128:  676:            if (A2(i,j) /= (i*NL+j+4)*3) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  677:               erri = min(erri,i*NL/10+j)
        -:  678:            endif 
        -:  679:          enddo
        -:  680:      enddo
        -:  681:!dvm$ end region
        -:  682:                                                    
        -:  683:!dvm$ get_actual (erri)
        -:  684:
        1:  685:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  686:          call ansyes(tname)
call    0 returned 100%
        -:  687:      else
    #####:  688:          call ansno(tname)
call    0 never executed
        -:  689:      endif 
        -:  690: 
       1*:  691:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  692:
        1:  693:      end subroutine distrw213
        -:  694:
        -:  695:C ----------------------------------------------------distrw214
        -:  696:c 214  DISTRIBUTE arrA2[WGT_BLOCK][*]           with zero weigths
        -:  697:c                      REDISTRIBUTE [*][WGT_BLOCK]
        -:  698:c                      REDISTRIBUTE [WGT_BLOCK][WGT_BLOCK]
function distrw214_ called 1 returned 100% blocks executed 90%
        1:  699:      subroutine distrw214
        -:  700:
        -:  701:      integer, parameter :: AN1=12,AN2=10,NL=1000,ER=10000
        -:  702:      integer :: erri= ER,i,j
        -:  703:
        -:  704:      double precision, dimension(7) ::
        -:  705:     >       WB1=(/ 4., 0., 1.5, 1., 2., 0.5, 0./)     
        -:  706:      double precision, dimension(8) ::
        -:  707:     >       WB2=(/1.7, 0., 3.1, 2., 2.5, 4., 0., 1./)     
        -:  708:
        1:  709:      integer, allocatable :: A2(:,:)
        -:  710:      character(*), parameter :: tname='distrw214 '
        -:  711:               
        -:  712:!dvm$ distribute A2(WGT_BLOCK(WB1,6),*)   
        -:  713:!dvm$ dynamic A2
        -:  714:
       1*:  715:      allocate (A2(AN1,AN2))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  716:
      131:  717:      A2 = 0
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
        -:  718:
        -:  719:!dvm$ region
        -:  720:!dvm$ parallel (i,j) on A2(i,j)
       13:  721:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      133:  722:          do j=1,AN2
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      132:  723:            A2(i,j) = A2(i,j) + i*NL+j     
        -:  724:          enddo
        -:  725:      enddo
        -:  726:!dvm$ end region
        -:  727:
        -:  728:!dvm$ redistribute A2(*,WGT_BLOCK(WB2,8))    
        -:  729:
        -:  730:!dvm$ region
        -:  731:!dvm$ parallel (i,j) on A2(i,j)
       13:  732:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      133:  733:          do j=1,AN2
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      132:  734:            A2(i,j) = A2(i,j) + 3     
        -:  735:          enddo
        -:  736:      enddo
        -:  737:!dvm$ end region
        -:  738:
        -:  739:!dvm$ redistribute A2(WGT_BLOCK(WB2,7),WGT_BLOCK(WB1,7))   
        -:  740:
        -:  741:!dvm$ actual (erri)
        -:  742:
        -:  743:!dvm$ region
        -:  744:!dvm$ parallel (i,j) on A2(i,j), reduction( min(erri) )
       13:  745:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      133:  746:          do j=1,AN2
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      132:  747:            if (A2(i,j) /= (i*NL+j+3)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  748:               erri = min(erri,i*NL/10+j)
        -:  749:            endif 
        -:  750:          enddo
        -:  751:      enddo
        -:  752:!dvm$ end region
        -:  753:                                                    
        -:  754:!dvm$ get_actual (erri)
        -:  755:
        1:  756:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  757:          call ansyes(tname)
call    0 returned 100%
        -:  758:      else
    #####:  759:          call ansno(tname)
call    0 never executed
        -:  760:      endif 
        -:  761: 
       1*:  762:      deallocate (A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  763:
        1:  764:      end subroutine distrw214
        -:  765:
        -:  766:C ----------------------------------------------------distrw32
        -:  767:c 32  DISTRIBUTE  arrA3[WGT_BLOCK][WGT_BLOCK][*]
        -:  768:c                 REDISTRIBUTE arrA3[*][WGT_BLOCK][WGT_BLOCK]
        -:  769:
function distrw32_ called 1 returned 100% blocks executed 88%
        1:  770:      subroutine distrw32
        -:  771:
        -:  772:      integer, parameter :: AN1=16,AN2=12,AN3=8,NL=1000,ER=10000
        -:  773:      integer :: erri = ER,i,j,n
        -:  774:
        -:  775:      double precision, dimension(7) :: WB1=(/1.,1.,2.,1.0,2.,2.,3.0/)
        -:  776:      double precision, dimension(8) :: WB2=(/1.,2.,2.,3.,2.,1.,1.,1./)
        -:  777:
        1:  778:      integer, allocatable ::  A3(:,:,:)
        -:  779:      character(10), parameter :: tname='distrw32  '
        -:  780:               
        -:  781:!dvm$ distribute A3(WGT_BLOCK(WB1,7),WGT_BLOCK(WB2,8),*)   
        -:  782:!dvm$ dynamic A3
       1*:  783:      allocate (A3(AN1,AN2,AN3))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  784:
        -:  785:!dvm$ region
        -:  786:!dvm$ parallel (i,j,n) on A3(i,j,n)
       17:  787:      do i=1,AN1
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      209:  788:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
     1744:  789:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     1728:  790:                A3(i,j,n) = i*NL/10 + j*NL/100 + n    
        -:  791:             enddo
        -:  792:          enddo
        -:  793:      enddo
        -:  794:!dvm$ end region
        -:  795:
        -:  796:!dvm$ redistribute A3(*,WGT_BLOCK(WB2,7),WGT_BLOCK(WB1,6))    
        -:  797:
        -:  798:!dvm$ actual (erri)
        -:  799:
        -:  800:!dvm$ region
        -:  801:!dvm$ parallel (i,j,n) on A3(i,j,n), reduction( min(erri) )
       17:  802:      do i=1,AN1
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      209:  803:          do j=1,AN2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
     1744:  804:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     1728:  805:                if (A3(i,j,n) /= (i*NL/10 + j*NL/100 + n)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  806:                    erri = min(erri,i*NL/10 + j*NL/100 + n)
        -:  807:                endif 
        -:  808:            enddo
        -:  809:          enddo
        -:  810:      enddo
        -:  811:!dvm$ end region
        -:  812: 
        -:  813:!dvm$ get_actual (erri)
        -:  814:
        1:  815:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  816:          call ansyes(tname)
call    0 returned 100%
        -:  817:      else
    #####:  818:          call ansno(tname)
call    0 never executed
        -:  819:      endif 
        -:  820:
       1*:  821:      deallocate (A3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  822:
        1:  823:      end subroutine distrw32
        -:  824:
        -:  825:C ----------------------------------------------------distrw33
        -:  826:c 33  DISTRIBUTE  arrA3[WGT_BLOCK][WGT_BLOCK][*]
        -:  827:c                 REDISTRIBUTE arrA3[WGT_BLOCK][*][BLOCK]
        -:  828:
function distrw33_ called 1 returned 100% blocks executed 91%
        1:  829:      subroutine distrw33
        -:  830:
        -:  831:      integer, parameter :: AN1=16,AN2=16,AN3=8,NL=1000,ER=10000
        -:  832:      integer :: erri = ER,i,j,n
        -:  833:
        -:  834:      double precision, dimension(10) ::
        -:  835:     >                  WB=(/1.,2.,2.,3., 2., 4., 2., 1.,1., 1./)
        -:  836:
        1:  837:      integer, allocatable :: A3(:,:,:)
        -:  838:      character(*), parameter :: tname='distrw33  '
        -:  839:               
        -:  840:!dvm$ distribute A3(WGT_BLOCK(WB,6),WGT_BLOCK(WB,8),*)   
        -:  841:!dvm$ dynamic A3
        -:  842:
       1*:  843:      allocate (A3(AN1,AN2,AN3))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  844:      
     2185:  845:      A3 = 5
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 94% (fallthrough)
branch  3 taken 6%
branch  4 taken 94% (fallthrough)
branch  5 taken 6%
        -:  846:
        -:  847:!dvm$ actual (A3)
        -:  848:
        -:  849:!dvm$ region
        -:  850:!dvm$ parallel (i,j,n) on A3(i,j,n)
       17:  851:      do i=1,AN1
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  852:          do j=1,AN2
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     2320:  853:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     2304:  854:                A3(i,j,n) = A3(i,j,n) + i*NL/10 + j*NL/100 + n    
        -:  855:             enddo                   
        -:  856:          enddo
        -:  857:      enddo
        -:  858:!dvm$ end region
        -:  859:
        -:  860:!dvm$ redistribute A3(WGT_BLOCK(WB,10),*,WGT_BLOCK(WB,6))    
        -:  861:
        -:  862:!dvm$ actual (erri)
        -:  863:
        -:  864:!dvm$ region
        -:  865:!dvm$ parallel (i,j,n) on A3(i,j,n), reduction( min( erri ) )
       17:  866:      do i=1,AN1
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  867:          do j=1,AN2
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     2320:  868:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     2304:  869:                if (A3(i,j,n) /= (i*NL/10 + j*NL/100 + n) + 5) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  870:                    erri = min(erri,i*NL/10 + j*NL/100 + n)
        -:  871:                endif 
        -:  872:            enddo
        -:  873:          enddo
        -:  874:      enddo
        -:  875:!dvm$ end region
        -:  876: 
        -:  877:!dvm$ get_actual (erri)
        -:  878:
        1:  879:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  880:          call ansyes(tname)
call    0 returned 100%
        -:  881:      else
    #####:  882:          call ansno(tname)
call    0 never executed
        -:  883:      endif 
        -:  884:
       1*:  885:      deallocate (A3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  886:
        1:  887:      end subroutine distrw33
        -:  888:
        -:  889:C ----------------------------------------------------distrw34
        -:  890:c 34  DISTRIBUTE  arrA3[WGT_BLOCK][*][WGT_BLOCK]
        -:  891:c                 REDISTRIBUTE arrA3[WGT_BLOCK][WGT_BLOCK][*]
        -:  892:
function distrw34_ called 1 returned 100% blocks executed 88%
        1:  893:      subroutine distrw34
        -:  894:
        -:  895:      integer, parameter :: AN1=8,AN2=8,AN3=8,NL=1000,ER=10000
        -:  896:      integer :: erri=ER,i,j,n
        -:  897:
        -:  898:      double precision, dimension(8) ::
        -:  899:     >                   WB=(/1.0,2.,2.,3.,1.,2., 1., 1./)
        -:  900:
        1:  901:      integer, allocatable ::  A3(:,:,:)
        -:  902:      character(10) :: tname='distrw34'
        -:  903:               
        -:  904:!dvm$ distribute A3(WGT_BLOCK(WB,6),*,WGT_BLOCK(WB,8))   
        -:  905:!dvm$ dynamic A3
        -:  906:
       1*:  907:      allocate (A3(AN1,AN2,AN3))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  908:
        -:  909:!dvm$ region
        -:  910:!dvm$ parallel (i,j,n) on A3(i,j,n)
        9:  911:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  912:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  913:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  914:                A3(i,j,n) = (i*NL/10 + j*NL/100 + n) * 7    
        -:  915:             enddo
        -:  916:          enddo
        -:  917:      enddo
        -:  918:!dvm$ end region
        -:  919:
        -:  920:!dvm$ redistribute A3(WGT_BLOCK(WB,6),WGT_BLOCK(WB,8),*)    
        -:  921:
        -:  922:!dvm$ actual (erri)
        -:  923:
        -:  924:!dvm$ region
        -:  925:!dvm$ parallel (i,j,n) on A3(i,j,n), reduction( min( erri ) )
        9:  926:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  927:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  928:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        -:  929:
      576:  930:                if (A3(i,j,n) /= (i*NL/10 + j*NL/100 + n) * 7) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  931:                    erri = min(erri,i*NL/10 + j*NL/100 + n)
        -:  932:                endif 
        -:  933:            enddo
        -:  934:          enddo
        -:  935:      enddo
        -:  936:!dvm$ end region
        -:  937: 
        -:  938:!dvm$ get_actual (erri)
        -:  939:
        1:  940:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  941:          call ansyes(tname)
call    0 returned 100%
        -:  942:      else
    #####:  943:          call ansno(tname)
call    0 never executed
        -:  944:      endif 
        -:  945:
       1*:  946:      deallocate (A3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  947:
        1:  948:      end subroutine distrw34
        -:  949:
        -:  950:C ----------------------------------------------------distrw35
        -:  951:c 35  DISTRIBUTE  arrA3[WGT_BLOCK][WGT_BLOCK][*]
        -:  952:c                         REDISTRIBUTE arrA3[*][*][WGT_BLOCK]
        -:  953:
function distrw35_ called 1 returned 100% blocks executed 88%
        1:  954:      subroutine distrw35
        -:  955:
        -:  956:      integer, parameter :: AN1=8,AN2=8,AN3=8,NL=1000,ER=10000
        -:  957:      integer :: erri=ER,i,j,n
        -:  958:
        -:  959:      double precision, dimension(6) :: WB1=(/1.0,2.,2.,3.0,1.5, 2.5/)     
        -:  960:      double precision, dimension(6) :: WB2=(/1.0,2.,2.,3.0, 1., 1./)     
        -:  961:
        1:  962:      integer, allocatable :: A3(:,:,:)
        -:  963:      character(10), parameter :: tname='distrw35  '
        -:  964:               
        -:  965:!dvm$ distribute A3(WGT_BLOCK(WB1,6),BLOCK,*)   
        -:  966:!dvm$ dynamic A3
        -:  967:
       1*:  968:      allocate (A3(AN1,AN2,AN3))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  969:
        -:  970:!dvm$ region
        -:  971:!dvm$ parallel (i,j,n) on A3(i,j,n)
        9:  972:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  973:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  974:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  975:                A3(i,j,n) = i*NL/10 + j*NL/100 + n    
        -:  976:             enddo
        -:  977:          enddo
        -:  978:      enddo
        -:  979:!dvm$ end region
        -:  980:
        -:  981:!dvm$ redistribute A3(*,*,WGT_BLOCK(WB2,6))    
        -:  982:
        -:  983:!dvm$ actual (erri)
        -:  984:
        -:  985:!dvm$ region
        -:  986:!dvm$ parallel (i,j,n) on A3(i,j,n), reduction( min( erri ) )
        9:  987:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  988:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  989:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  990:                if (A3(i,j,n) /= (i*NL/10 + j*NL/100 + n)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  991:                    erri = min(erri,i*NL/10 + j*NL/100 + n)
        -:  992:                endif 
        -:  993:            enddo
        -:  994:          enddo
        -:  995:      enddo
        -:  996:!dvm$ end region
        -:  997: 
        -:  998:!dvm$ get_actual (erri)
        -:  999:
        1: 1000:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1001:          call ansyes(tname)
call    0 returned 100%
        -: 1002:      else
    #####: 1003:          call ansno(tname)
call    0 never executed
        -: 1004:      endif 
        -: 1005: 
       1*: 1006:      deallocate (A3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1007:
        1: 1008:      end subroutine distrw35
        -: 1009:
        -: 1010:C ----------------------------------------------------distrw36
        -: 1011:c 36  DISTRIBUTE  arrA3[WGT_BLOCK][*][BLOCK]
        -: 1012:c                         REDISTRIBUTE arrA3[BLOCK][*][WGT_BLOCK]
        -: 1013:
function distrw36_ called 1 returned 100% blocks executed 91%
        1: 1014:      subroutine distrw36
        -: 1015:
        -: 1016:      integer, parameter :: AN1=8,AN2=8,AN3=8,NL=1000,ER=10000
        -: 1017:      integer :: erri=ER,i,j,n
        -: 1018:
        -: 1019:      double precision, dimension(6) :: WB=(/1.0,2.,2.,3.0, 1., 1./)     
        -: 1020:
        1: 1021:      integer, allocatable ::  A3(:,:,:)
        -: 1022:      character(10), parameter :: tname='distrw36  '
        -: 1023:               
        -: 1024:!dvm$ distribute A3(WGT_BLOCK(WB,6),*,BLOCK)   
        -: 1025:!dvm$ dynamic A3
        -: 1026:
       1*: 1027:      allocate (A3(AN1,AN2,AN3))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -: 1028:     
      585: 1029:      A3 = 2
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 89% (fallthrough)
branch  5 taken 11%
        -: 1030:
        -: 1031:!dvm$ actual (A3)
        -: 1032:
        -: 1033:!dvm$ region
        -: 1034:!dvm$ parallel (i,j,n) on A3(i,j,n)
        9: 1035:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1036:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1037:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576: 1038:                A3(i,j,n) = (i*NL/10 + j*NL/100 + n) + A3(i,j,n)    
        -: 1039:             enddo
        -: 1040:          enddo
        -: 1041:      enddo
        -: 1042:!dvm$ end region
        -: 1043:
        -: 1044:!dvm$ redistribute A3(BLOCK,*,WGT_BLOCK(WB,6))    
        -: 1045:
        -: 1046:!dvm$ actual (erri)
        -: 1047:
        -: 1048:!dvm$ region
        -: 1049:!dvm$ parallel (i,j,n) on A3(i,j,n), reduction( min( erri ) )
        9: 1050:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1051:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1052:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576: 1053:                if (A3(i,j,n) /= (i*NL/10 + j*NL/100 + n) + 2) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1054:                    erri = min(erri,i*NL/10 + j*NL/100 + n)
        -: 1055:                endif 
        -: 1056:            enddo
        -: 1057:          enddo
        -: 1058:      enddo
        -: 1059:!dvm$ end region
        -: 1060: 
        1: 1061:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1062:          call ansyes(tname)
call    0 returned 100%
        -: 1063:      else
    #####: 1064:          call ansno(tname)
call    0 never executed
        -: 1065:      endif 
        -: 1066:
       1*: 1067:      deallocate (A3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1068:
        1: 1069:      end subroutine distrw36
        -: 1070:
        -: 1071:C ----------------------------------------------------distrw37
        -: 1072:c 37  DISTRIBUTE  arrA3[WGT_BLOCK][BLOCK][*]
        -: 1073:c                         REDISTRIBUTE arrA3[BLOCK][*][WGT_BLOCK]
        -: 1074:
function distrw37_ called 1 returned 100% blocks executed 88%
        1: 1075:      subroutine distrw37
        -: 1076:
        -: 1077:      integer, parameter :: AN1=8,AN2=8,AN3=8,NL=1000,ER=10000
        -: 1078:      integer :: erri=ER,i,j,n
        -: 1079:
        -: 1080:      double precision,dimension(6) :: WB1=(/0.5, 1.,1.,2.,2.,3./)
        -: 1081:      double precision,dimension(8) :: WB2=(/1.,2.,2.,3.,0.5,2.,1.,1./)
        -: 1082:
        1: 1083:      integer, allocatable :: A3(:,:,:)
        -: 1084:      character(*), parameter :: tname='distrw37  '
        -: 1085:               
        -: 1086:!dvm$ distribute A3(WGT_BLOCK(WB1,6),BLOCK,*)   
        -: 1087:!dvm$ dynamic A3
        -: 1088:
       1*: 1089:      allocate (A3(AN1,AN2,AN3))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -: 1090:
        -: 1091:!dvm$ region
        -: 1092:!dvm$ parallel (i,j,n) on A3(i,j,n)
        9: 1093:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1094:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1095:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576: 1096:                A3(i,j,n) = i*NL/10 + j*NL/100 + n    
        -: 1097:             enddo
        -: 1098:          enddo
        -: 1099:      enddo
        -: 1100:!dvm$ end region
        -: 1101:
        -: 1102:!dvm$ redistribute A3(BLOCK,*,WGT_BLOCK(WB2,8))    
        -: 1103:
        -: 1104:!dvm$ actual (erri)
        -: 1105:
        -: 1106:!dvm$ region
        -: 1107:!dvm$ parallel (i,j,n) on A3(i,j,n), reduction( min( erri ) )
        9: 1108:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1109:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1110:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576: 1111:                if (A3(i,j,n) /= (i*NL/10 + j*NL/100 + n)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1112:                    erri = min(erri,i*NL/10 + j*NL/100 + n)
        -: 1113:                endif 
        -: 1114:            enddo
        -: 1115:          enddo
        -: 1116:      enddo
        -: 1117:!dvm$ end region
        -: 1118: 
        -: 1119:!dvm$ get_actual (erri)
        -: 1120:
        1: 1121:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1122:          call ansyes(tname)
call    0 returned 100%
        -: 1123:      else
    #####: 1124:          call ansno(tname)
call    0 never executed
        -: 1125:      endif 
        -: 1126:
       1*: 1127:      deallocate (A3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1128:
        1: 1129:      end subroutine distrw37
        -: 1130:
        -: 1131:C ----------------------------------------------------distrw38
        -: 1132:c 38  DISTRIBUTE  arrA3[BLOCK][*][WGT_BLOCK] REDISTRIBUTE arrA3[*][WGT_BLOCK][WGT_BLOCK]
        -: 1133:
function distrw38_ called 1 returned 100% blocks executed 91%
        1: 1134:      subroutine distrw38
        -: 1135:
        -: 1136:      integer, parameter :: AN1=8,AN2=8,AN3=8,NL=1000,ER=10000
        -: 1137:      integer :: erri=ER,i,j,n
        -: 1138:
        -: 1139:      double precision, dimension(6) :: WB1=(/1.0,2.,2.,3.0, 4.,5./)
        -: 1140:      double precision, dimension(6) :: WB2=(/1.0,2.,2.,3.0, 1., 1./)     
        -: 1141:
        1: 1142:      integer, allocatable :: A3(:,:,:)
        -: 1143:      character(10) :: tname='distrw38'
        -: 1144:               
        -: 1145:!dvm$ distribute A3(BLOCK, *, WGT_BLOCK(WB1,6))   
        -: 1146:!dvm$ dynamic A3
        -: 1147:
       1*: 1148:      allocate (A3(AN1,AN2,AN3))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -: 1149:      
      585: 1150:      A3 = 5
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 89% (fallthrough)
branch  5 taken 11%
        -: 1151:
        -: 1152:!dvm$ actual (A3)
        -: 1153:
        -: 1154:!dvm$ region
        -: 1155:!dvm$ parallel (i,j,n) on A3(i,j,n)
        9: 1156:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1157:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1158:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576: 1159:                A3(i,j,n) = A3(i,j,n) + i*NL/10 + j*NL/100 + n    
        -: 1160:             enddo
        -: 1161:          enddo
        -: 1162:      enddo
        -: 1163:!dvm$ end region
        -: 1164:
        -: 1165:!dvm$ redistribute A3(*,WGT_BLOCK(WB2,6),WGT_BLOCK(WB1,6))    
        -: 1166:
        -: 1167:!dvm$ actual (erri)
        -: 1168:
        -: 1169:!dvm$ region
        -: 1170:!dvm$ parallel (i,j,n) on A3(i,j,n), reduction( min( erri ) )
        9: 1171:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1172:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1173:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576: 1174:                if (A3(i,j,n) /= (i*NL/10 + j*NL/100 + n) + 5) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1175:                    erri = min(erri,i*NL/10 + j*NL/100 + n)
        -: 1176:                endif 
        -: 1177:            enddo
        -: 1178:          enddo
        -: 1179:      enddo
        -: 1180:!dvm$ end region
        -: 1181: 
        -: 1182:!dvm$ get_actual (erri)
        -: 1183:
        1: 1184:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1185:          call ansyes(tname)
call    0 returned 100%
        -: 1186:      else
    #####: 1187:          call ansno(tname)
call    0 never executed
        -: 1188:      endif 
        -: 1189:
       1*: 1190:      deallocate (A3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1191:
        1: 1192:      end subroutine distrw38
        -: 1193:
        -: 1194:C ----------------------------------------------------distrw41
        -: 1195:c 41  DISTRIBUTE arrA4[*][*][WGT_BLOCK][WGT_BLOCK]
        -: 1196:c                REDISTRIBUTE arrA4[*][*][*][*]
        -: 1197:
function distrw41_ called 1 returned 100% blocks executed 90%
        1: 1198:      subroutine distrw41
        -: 1199:
        -: 1200:      integer, parameter :: AN1=8,AN2=8,AN3=8,AN4=8,NL=1000,ER=100000
        -: 1201:      integer :: erri=ER,i,j,n,m
        -: 1202:
        -: 1203:      double precision, dimension(8) :: WB=(/1.,2.,2.,3.,1.,1.,2.,1./)
        -: 1204:
        1: 1205:      integer, allocatable :: A4(:,:,:,:)
        -: 1206:      character(10), parameter :: tname='distrw41  '
        -: 1207:               
        -: 1208:!dvm$ distribute A4(*,*,WGT_BLOCK(WB,6),WGT_BLOCK(WB,8))   
        -: 1209:!dvm$ dynamic A4
        -: 1210:
       1*: 1211:      allocate (A4(AN1,AN2,AN3,AN4))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -: 1212:
        -: 1213:!dvm$ region
        -: 1214:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        9: 1215:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1216:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1217:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1218:                do m=1,AN4
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608: 1219:                     A4(i,j,n,m) = i*NL/10+j*NL/100+n*NL/1000+m
        -: 1220:                enddo
        -: 1221:             enddo
        -: 1222:          enddo
        -: 1223:      enddo
        -: 1224:!dvm$ end region
        -: 1225:
        -: 1226:!dvm$ redistribute A4(*,*,*,*)    
        -: 1227:
        -: 1228:!dvm$ actual (erri)
        -: 1229:
        -: 1230:!dvm$ region
        -: 1231:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), reduction( min( erri ) )
        9: 1232:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1233:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1234:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1235:              do m=1,AN4
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608: 1236:                if (A4(i,j,n,m) /= (i*NL/10+j*NL/100+n*NL/1000+m)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1237:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -: 1238:                endif 
        -: 1239:              enddo
        -: 1240:            enddo
        -: 1241:          enddo
        -: 1242:      enddo
        -: 1243:!dvm$ end region
        -: 1244: 
        -: 1245:!dvm$ get_actual (erri)
        -: 1246:
        1: 1247:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1248:          call ansyes(tname)
call    0 returned 100%
        -: 1249:      else
    #####: 1250:          call ansno(tname)
call    0 never executed
        -: 1251:      endif 
        -: 1252:
       1*: 1253:      deallocate (A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1254:
        1: 1255:      end subroutine distrw41
        -: 1256:
        -: 1257:C ----------------------------------------------------distrw42
        -: 1258:c 42  DISTRIBUTE arrA4[WGT_BLOCK][*][WGT_BLOCK][*] REDISTRIBUTE arrA4[*][WGT_BLOCK][WGT_BLOCK][*]
        -: 1259:
function distrw42_ called 1 returned 100% blocks executed 93%
        1: 1260:      subroutine distrw42
        -: 1261:
        -: 1262:      integer, parameter :: AN1=8,AN2=8,AN3=8,AN4=8,NL=1000,ER=100000
        -: 1263:      integer :: erri=ER,i,j,n,m
        -: 1264:
        -: 1265:      double precision, dimension(6) :: WB1=(/1.0,2.,2.,3.0, 1., 1./)     
        -: 1266:
        1: 1267:      integer, allocatable :: A4(:,:,:,:)
        -: 1268:      character(10) :: tname='distrw42  '
        -: 1269:               
        -: 1270:!dvm$ distribute A4(WGT_BLOCK(wb1,6),*,WGT_BLOCK(wb1,6),*)   
        -: 1271:!dvm$ dynamic A4
        -: 1272:
       1*: 1273:      allocate (A4(AN1,AN2,AN3,AN4))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -: 1274:    
     4681: 1275:      A4 = 3
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 89% (fallthrough)
branch  3 taken 11%
branch  4 taken 89% (fallthrough)
branch  5 taken 11%
branch  6 taken 89% (fallthrough)
branch  7 taken 11%
        -: 1276:
        -: 1277:!dvm$ actual (A4)
        -: 1278:
        -: 1279:!dvm$ region
        -: 1280:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        9: 1281:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1282:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1283:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1284:                do m=1,AN4
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        -: 1285:                  A4(i,j,n,m) = A4(i,j,n,m) +
     4608: 1286:     >                          i*NL/10+j*NL/100+n*NL/1000+m
        -: 1287:                enddo
        -: 1288:             enddo
        -: 1289:          enddo
        -: 1290:      enddo
        -: 1291:!dvm$ end region
        -: 1292:
        -: 1293:!dvm$ redistribute A4(*,WGT_BLOCK(wb1,6),WGT_BLOCK(wb1,6),*)    
        -: 1294:
        -: 1295:!dvm$ actual (erri)
        -: 1296:
        -: 1297:!dvm$ region
        -: 1298:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), reduction( min( erri ) )
        9: 1299:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1300:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1301:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1302:              do m=1,AN4
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4096: 1303:               if (A4(i,j,n,m) /= (i*NL/10+j*NL/100+n*NL/1000+m)+3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      512: 1304:     >         then     
    #####: 1305:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -: 1306:               endif 
        -: 1307:              enddo
        -: 1308:            enddo
        -: 1309:          enddo
        -: 1310:      enddo
        -: 1311:!dvm$ end region
        -: 1312: 
        -: 1313:!dvm$ get_actual (erri)
        -: 1314:
        1: 1315:      if (erri == ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1316:          call ansyes(tname)
call    0 returned 100%
        -: 1317:      else
    #####: 1318:          call ansno(tname)
call    0 never executed
        -: 1319:      endif 
        -: 1320:
       1*: 1321:      deallocate (A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1322:
        1: 1323:      end subroutine distrw42
        -: 1324:
        -: 1325:C -------------------------------------------------
        -: 1326:
function ansyes_ called 20 returned 100% blocks executed 100%
       20: 1327:      subroutine ansyes(name)
        -: 1328:      character(*) name
       20: 1329:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       20: 1330:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####: 1331:      subroutine ansno(name)
        -: 1332:      character(*) name
    #####: 1333:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1334:      end
