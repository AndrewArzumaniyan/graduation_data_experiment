        -:    0:Source:results/2d/cons22/cons22.f
        -:    0:Graph:./results\2d\cons22\cons22.gcno
        -:    0:Data:./results\2d\cons22\cons22.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program CONS22
        -:    2:
        -:    3:c      TESTING OF THE CONSISTENT CLAUSE'.
        -:    4:c      CHECKING ( BLOCK, BLOCK ) DISTRIBUTION.
        -:    5:
        1:    6:      print *,'===START OF CONS22========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    7:C --------------------------------------------------
        -:    8:C consistent arrays with 1 dimensions
        -:    9:C one consistent array and one distributed array
        1:   10:      call cons2201
call    0 returned 100%
        -:   11:C --------------------------------------------------
        -:   12:C consistent arrays with 1 dimensions
        -:   13:C two consistent arrays and one distributed array
        1:   14:      call cons2202
call    0 returned 100%
        -:   15:C --------------------------------------------------
        -:   16:C consistent arrays with 1 dimensions
        -:   17:C two consistent arrays and two distributed arrays
        1:   18:      call cons2203
call    0 returned 100%
        -:   19:C --------------------------------------------------
        -:   20:C consistent arrays with 1 dimensions
        -:   21:C one consistent array and one distributed array
        -:   22:C big data
        1:   23:      call cons2204
call    0 returned 100%
        -:   24:C --------------------------------------------------
        -:   25:C consistent arrays with 2 dimensions
        -:   26:C one consistent array and one distributed array
        1:   27:      call cons2205
call    0 returned 100%
        -:   28:C --------------------------------------------------
        -:   29:C consistent arrays with 2 dimensions
        -:   30:C two consistent arrays and one distributed array
        1:   31:      call cons2206
call    0 returned 100%
        -:   32:C --------------------------------------------------
        -:   33:C consistent arrays with 2 dimensions
        -:   34:C two consistent arrays and two distributed arrays
        1:   35:      call cons2207
call    0 returned 100%
        -:   36:C --------------------------------------------------
        -:   37:C consistent arrays with 2 dimensions
        -:   38:C one consistent array and one distributed array
        -:   39:C big data
        1:   40:      call cons2208
call    0 returned 100%
        -:   41:C --------------------------------------------------
        -:   42:C consistent arrays with 3 dimensions
        -:   43:C one consistent array and one distributed array
        1:   44:      call cons2209
call    0 returned 100%
        -:   45:C --------------------------------------------------
        -:   46:C consistent arrays with 3 dimensions
        -:   47:C two consistent arrays and one distributed array
        1:   48:      call cons2210
call    0 returned 100%
        -:   49:C --------------------------------------------------
        -:   50:C consistent arrays with 3 dimensions
        -:   51:C two consistent arrays and two distributed arrays
        1:   52:      call cons2211
call    0 returned 100%
        -:   53:C --------------------------------------------------
        -:   54:C consistent arrays with 3 dimensions
        -:   55:C one consistent array and one distributed array
        -:   56:C big data
        1:   57:      call cons2212
call    0 returned 100%
        -:   58:C --------------------------------------------------
        -:   59:C consistent arrays with 4 dimensions
        -:   60:C one consistent array and one distributed array
        1:   61:      call cons2213
call    0 returned 100%
        -:   62:C --------------------------------------------------
        -:   63:C consistent arrays with 4 dimensions
        -:   64:C two consistent arrays and one distributed array
        1:   65:      call cons2214
call    0 returned 100%
        -:   66:C --------------------------------------------------
        -:   67:C consistent arrays with 4 dimensions
        -:   68:C two consistent arrays and two distributed arrays
        1:   69:      call cons2215
call    0 returned 100%
        -:   70:C --------------------------------------------------
        -:   71:C consistent arrays with 4 dimensions
        -:   72:C one consistent array and one distributed array
        -:   73:C big data
        1:   74:      call cons2216
call    0 returned 100%
        -:   75:C --------------------------------------------------
        -:   76:
        -:   77:C
        1:   78:      print *,'=== END OF CONS22 ========================= '
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   79:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   80:C ---------------------------------------------cons2201
        -:   81:C consistent arrays with 1 dimensions
        -:   82:C one consistent array and one distributed array
function cons2201_ called 1 returned 100% blocks executed 84%
        1:   83:      subroutine CONS2201
        -:   84:      INTEGER,PARAMETER:: N=8, ER=10000
        1:   85:      integer,allocatable:: B(:,:),V(:),C(:)
        -:   86:      character*8 tname
        -:   87:      INTEGER ERROR,IERR
        -:   88:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:   89:!DVM$   CONSISTENT V
       1*:   90:      allocate (B(N,N),V(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:   91:      tname='CONS2201'
        9:   92:      DO I = 1, N
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:   93:            C(I)  = I + (N - 1)
        -:   94:      ENDDO
        -:   95:!dvm$ region
        -:   96:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:   97:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:   98:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:   99:            B(I,J) = I+(N-1)*J
        -:  100:      ENDDO
        -:  101:      ENDDO
        -:  102:!DVM$   PARALLEL (I) ON B(I,1), CONSISTENT(V(I))
        9:  103:      DO I = 1, N
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  104:            V(I) = B(I,1)
        -:  105:      ENDDO
        -:  106:!dvm$ end region
        -:  107:!dvm$ get_actual (V)
        9:  108:      IERR = ER
        9:  109:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        9:  110:            IF(V(I) .NE. C(I)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  111:                  IERR = C(I)
        -:  112:                  EXIT
        -:  113:            ENDIF
        -:  114:      ENDDO
        1:  115:      ERROR = ER
        -:  116:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  117:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  118:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  119:            ERROR = MIN(ERROR,IERR)
        -:  120:      ENDDO
        -:  121:      ENDDO
        1:  122:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  123:            call ansyes(tname)
call    0 returned 100%
        -:  124:      ELSE
    #####:  125:            call ansno(tname)
call    0 never executed
        -:  126:      ENDIF
       1*:  127:      deallocate (B, V, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  128:      END
        -:  129:C ---------------------------------------------cons2202
        -:  130:C consistent arrays with 1 dimensions
        -:  131:C two consistent arrays and one distributed array
function cons2202_ called 1 returned 100% blocks executed 84%
        1:  132:      subroutine CONS2202
        -:  133:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  134:      integer,allocatable:: B(:,:),V(:),W(:),C(:)
        -:  135:      character*8 tname
        -:  136:      INTEGER ERROR,IERR
        -:  137:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  138:!DVM$   CONSISTENT V
        -:  139:!DVM$   CONSISTENT W
       1*:  140:      allocate (B(N,N),V(N),W(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        1:  141:      tname='CONS2202'
        9:  142:      DO I = 1, N
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  143:            C(I)  = I + (N - 1)
        -:  144:      ENDDO
        -:  145:!dvm$ region
        -:  146:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  147:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  148:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  149:            B(I,J) = I+(N-1)*J
        -:  150:      ENDDO
        -:  151:      ENDDO
        -:  152:!DVM$   PARALLEL (I) ON B(I,1), CONSISTENT(V(I))
        9:  153:      DO I = 1, N
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  154:            V(I) = B(I,1)
        -:  155:      ENDDO
        -:  156:!DVM$   PARALLEL (I) ON B(I,1), CONSISTENT(W(I))
        9:  157:      DO I = 1, N
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  158:            W(I) = B(I,1)
        -:  159:      ENDDO
        -:  160:!dvm$ end region
        -:  161:!dvm$ get_actual (V, W)
        9:  162:      IERR = ER
        9:  163:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        9:  164:            IF(V(I) .NE. C(I)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  165:                  IERR = C(I)
        -:  166:                  EXIT
        -:  167:            ENDIF
        -:  168:      ENDDO
        9:  169:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        9:  170:            IF(W(I) .NE. C(I)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  171:                  IERR = C(I)
        -:  172:                  EXIT
        -:  173:            ENDIF
        -:  174:      ENDDO
        1:  175:      ERROR = ER
        -:  176:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  177:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  178:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  179:            ERROR = MIN(ERROR,IERR)
        -:  180:      ENDDO
        -:  181:      ENDDO
        1:  182:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  183:            call ansyes(tname)
call    0 returned 100%
        -:  184:      ELSE
    #####:  185:            call ansno(tname)
call    0 never executed
        -:  186:      ENDIF
       1*:  187:      deallocate (B, V, W, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        1:  188:      END
        -:  189:C ---------------------------------------------cons2203
        -:  190:C consistent arrays with 1 dimensions
function cons2203_ called 1 returned 100% blocks executed 84%
        1:  191:      subroutine CONS2203
        -:  192:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  193:      integer,allocatable::B(:,:),A(:,:),V(:),W(:)
        1:  194:     *,C(:)
        -:  195:      character*8 tname
        -:  196:      INTEGER ERROR,IERR
        -:  197:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  198:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   A
        -:  199:!DVM$   CONSISTENT V
        -:  200:!DVM$   CONSISTENT W
       1*:  201:      allocate (B(N,N),A(N,N),V(N),W(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        1:  202:      tname='CONS2203'
        9:  203:      DO I = 1, N
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  204:            C(I)  = I + (N - 1)
        -:  205:      ENDDO
        -:  206:!dvm$ region
        -:  207:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  208:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  209:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  210:            B(I,J) = I+(N-1)*J
        -:  211:      ENDDO
        -:  212:      ENDDO
        -:  213:!DVM$   PARALLEL    (J,I)   ON   A(I,J)
        9:  214:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  215:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  216:            A(I,J) = I+(N-1)*J
        -:  217:      ENDDO
        -:  218:      ENDDO
        -:  219:!DVM$   PARALLEL (I) ON B(I,1), CONSISTENT(V(I))
        9:  220:      DO I = 1, N
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  221:            V(I) = B(I,1)
        -:  222:      ENDDO
        -:  223:!DVM$ PARALLEL (I) ON A(I,1), CONSISTENT(W(I))
        9:  224:      DO I = 1, N
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  225:            W(I) = A(I,1)
        -:  226:      ENDDO
        -:  227:!dvm$ end region
        -:  228:!dvm$ get_actual (V, W)
        9:  229:      IERR = ER
        9:  230:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        9:  231:            IF(V(I) .NE. C(I)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  232:                  IERR = C(I)
        -:  233:                  EXIT
        -:  234:            ENDIF
        -:  235:      ENDDO
        9:  236:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        9:  237:            IF(W(I) .NE. C(I)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  238:                  IERR = C(I)
        -:  239:                  EXIT
        -:  240:            ENDIF
        -:  241:      ENDDO
        1:  242:      ERROR = ER
        -:  243:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  244:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  245:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  246:            ERROR = MIN(ERROR,IERR)
        -:  247:      ENDDO
        -:  248:      ENDDO
        1:  249:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  250:            call ansyes(tname)
call    0 returned 100%
        -:  251:      ELSE
    #####:  252:            call ansno(tname)
call    0 never executed
        -:  253:      ENDIF
       1*:  254:      deallocate (B, A, V, W, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        1:  255:      END
        -:  256:C ---------------------------------------------cons2204
        -:  257:C consistent arrays with 1 dimensions
        -:  258:C one consistent array and one distributed array
        -:  259:C big data
function cons2204_ called 1 returned 100% blocks executed 84%
        1:  260:      subroutine CONS2204
        -:  261:      INTEGER,PARAMETER:: N=16, ER=10000
        1:  262:      integer,allocatable:: B(:,:),V(:),C(:)
        -:  263:      character*8 tname
        -:  264:      INTEGER ERROR,IERR
        -:  265:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  266:!DVM$   CONSISTENT V
       1*:  267:      allocate (B(N,N),V(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  268:      tname='CONS2204'
       17:  269:      DO I = 1, N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  270:            C(I)  = I + (N - 1)
        -:  271:      ENDDO
        -:  272:!dvm$ region
        -:  273:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
       17:  274:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  275:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  276:            B(I,J) = I+(N-1)*J
        -:  277:      ENDDO
        -:  278:      ENDDO
        -:  279:!DVM$   PARALLEL (I) ON B(I,1), CONSISTENT(V(I))
       17:  280:      DO I = 1, N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  281:            V(I) = B(I,1)
        -:  282:      ENDDO
        -:  283:!dvm$ end region
        -:  284:!dvm$ get_actual (V)
       17:  285:      IERR = ER
       17:  286:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
       17:  287:            IF(V(I) .NE. C(I)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  288:                  IERR = C(I)
        -:  289:                  EXIT
        -:  290:            ENDIF
        -:  291:      ENDDO
        1:  292:      ERROR = ER
        -:  293:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
       17:  294:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  295:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  296:            ERROR = MIN(ERROR,IERR)
        -:  297:      ENDDO
        -:  298:      ENDDO
        1:  299:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  300:            call ansyes(tname)
call    0 returned 100%
        -:  301:      ELSE
    #####:  302:            call ansno(tname)
call    0 never executed
        -:  303:      ENDIF
       1*:  304:      deallocate (B, V, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  305:      END
        -:  306:C ---------------------------------------------cons2205
        -:  307:C consistent arrays with 2 dimensions
        -:  308:C one consistent array and one distributed array
function cons2205_ called 1 returned 100% blocks executed 88%
        1:  309:      subroutine CONS2205
        -:  310:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  311:      integer,allocatable:: B(:,:),V(:,:),C(:,:)
        -:  312:      character*8 tname
        -:  313:      INTEGER ERROR,IERR
        -:  314:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  315:!DVM$   CONSISTENT V
       1*:  316:      allocate (B(N,N),V(N,N),C(N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  317:      tname='CONS2205'
        9:  318:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  319:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  320:            C(I,J)  = I + (N - 1) * J
        -:  321:      ENDDO
        -:  322:      ENDDO
        -:  323:!dvm$ region
        -:  324:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  325:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  326:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  327:            B(I,J) = I+(N-1)*J
        -:  328:      ENDDO
        -:  329:      ENDDO
        -:  330:!DVM$   PARALLEL (J,I) ON B(I,J), CONSISTENT(V(I,J))
        9:  331:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  332:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  333:            V(I,J) = B(I,J)
        -:  334:      ENDDO
        -:  335:      ENDDO
        -:  336:!dvm$ end region
        -:  337:!dvm$ get_actual (V)
        -:  338:      IERR = ER
        9:  339:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  340:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  341:            IF(V(I,J) .NE. C(I,J)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  342:                  IERR = C(I,J)
        -:  343:                  EXIT
        -:  344:            ENDIF
        -:  345:      ENDDO
        -:  346:      ENDDO
        -:  347:      ERROR = ER
        -:  348:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  349:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  350:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  351:            ERROR = MIN(ERROR,IERR)
        -:  352:      ENDDO
        -:  353:      ENDDO
        1:  354:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  355:            call ansyes(tname)
call    0 returned 100%
        -:  356:      ELSE
    #####:  357:            call ansno(tname)
call    0 never executed
        -:  358:      ENDIF
       1*:  359:      deallocate (B, V, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  360:      END
        -:  361:C ---------------------------------------------cons2206
        -:  362:C consistent arrays with 2 dimensions
        -:  363:C two consistent arrays and one distributed array
function cons2206_ called 1 returned 100% blocks executed 88%
        1:  364:      subroutine CONS2206
        -:  365:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  366:      integer,allocatable:: B(:,:),V(:,:),W(:,:),C(:,:)
        -:  367:      character*8 tname
        -:  368:      INTEGER ERROR,IERR
        -:  369:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  370:!DVM$   CONSISTENT V
        -:  371:!DVM$   CONSISTENT W
       1*:  372:      allocate (B(N,N),V(N,N),W(N,N),C(N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        1:  373:      tname='CONS2206'
        9:  374:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  375:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  376:            C(I,J)  = I + (N - 1) * J
        -:  377:      ENDDO
        -:  378:      ENDDO
        -:  379:!dvm$ region
        -:  380:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  381:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  382:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  383:            B(I,J) = I+(N-1)*J
        -:  384:      ENDDO
        -:  385:      ENDDO
        -:  386:!DVM$   PARALLEL (J,I) ON B(I,J), CONSISTENT(V(I,J))
        9:  387:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  388:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  389:            V(I,J) = B(I,J)
        -:  390:      ENDDO
        -:  391:      ENDDO
        -:  392:!DVM$   PARALLEL (J,I) ON B(I,J), CONSISTENT(W(I,J))
        9:  393:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  394:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  395:            W(I,J) = B(I,J)
        -:  396:      ENDDO
        -:  397:      ENDDO
        -:  398:!dvm$ end region
        -:  399:!dvm$ get_actual (V, W)
        -:  400:      IERR = ER
        9:  401:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  402:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  403:            IF(V(I,J) .NE. C(I,J)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  404:                  IERR = C(I,J)
        -:  405:                  EXIT
        -:  406:            ENDIF
        -:  407:      ENDDO
        -:  408:      ENDDO
        9:  409:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  410:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  411:            IF(W(I,J) .NE. C(I,J)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  412:                  IERR = C(I,J)
        -:  413:                  EXIT
        -:  414:            ENDIF
        -:  415:      ENDDO
        -:  416:      ENDDO
        -:  417:      ERROR = ER
        -:  418:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  419:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  420:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  421:            ERROR = MIN(ERROR,IERR)
        -:  422:      ENDDO
        -:  423:      ENDDO
        1:  424:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  425:            call ansyes(tname)
call    0 returned 100%
        -:  426:      ELSE
    #####:  427:            call ansno(tname)
call    0 never executed
        -:  428:      ENDIF
       1*:  429:      deallocate (B, V, W, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        1:  430:      END
        -:  431:C ---------------------------------------------cons2207
        -:  432:C consistent arrays with 2 dimensions
function cons2207_ called 1 returned 100% blocks executed 88%
        1:  433:      subroutine CONS2207
        -:  434:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  435:      integer,allocatable::B(:,:),A(:,:),V(:,:),W(:,:)
        1:  436:     *,C(:,:)
        -:  437:      character*8 tname
        -:  438:      INTEGER ERROR,IERR
        -:  439:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  440:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   A
        -:  441:!DVM$   CONSISTENT V
        -:  442:!DVM$   CONSISTENT W
       1*:  443:      allocate (B(N,N),A(N,N),V(N,N),W(N,N),C(N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        1:  444:      tname='CONS2207'
        9:  445:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  446:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  447:            C(I,J)  = I + (N - 1) * J
        -:  448:      ENDDO
        -:  449:      ENDDO
        -:  450:!dvm$ region
        -:  451:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  452:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  453:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  454:            B(I,J) = I+(N-1)*J
        -:  455:      ENDDO
        -:  456:      ENDDO
        -:  457:!DVM$   PARALLEL    (J,I)   ON   A(I,J)
        9:  458:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  459:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  460:            A(I,J) = I+(N-1)*J
        -:  461:      ENDDO
        -:  462:      ENDDO
        -:  463:!DVM$   PARALLEL (J,I) ON B(I,J), CONSISTENT(V(I,J))
        9:  464:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  465:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  466:            V(I,J) = B(I,J)
        -:  467:      ENDDO
        -:  468:      ENDDO
        -:  469:!DVM$ PARALLEL (J,I) ON A(I,J), CONSISTENT(W(I,J))
        9:  470:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  471:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  472:            W(I,J) = A(I,J)
        -:  473:      ENDDO
        -:  474:      ENDDO
        -:  475:!dvm$ end region
        -:  476:!dvm$ get_actual (V, W)
        -:  477:      IERR = ER
        9:  478:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  479:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  480:            IF(V(I,J) .NE. C(I,J)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  481:                  IERR = C(I,J)
        -:  482:                  EXIT
        -:  483:            ENDIF
        -:  484:      ENDDO
        -:  485:      ENDDO
        9:  486:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  487:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  488:            IF(W(I,J) .NE. C(I,J)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  489:                  IERR = C(I,J)
        -:  490:                  EXIT
        -:  491:            ENDIF
        -:  492:      ENDDO
        -:  493:      ENDDO
        -:  494:      ERROR = ER
        -:  495:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  496:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  497:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  498:            ERROR = MIN(ERROR,IERR)
        -:  499:      ENDDO
        -:  500:      ENDDO
        1:  501:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  502:            call ansyes(tname)
call    0 returned 100%
        -:  503:      ELSE
    #####:  504:            call ansno(tname)
call    0 never executed
        -:  505:      ENDIF
       1*:  506:      deallocate (B, A, V, W, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        1:  507:      END
        -:  508:C ---------------------------------------------cons2208
        -:  509:C consistent arrays with 2 dimensions
        -:  510:C one consistent array and one distributed array
        -:  511:C big data
function cons2208_ called 1 returned 100% blocks executed 88%
        1:  512:      subroutine CONS2208
        -:  513:      INTEGER,PARAMETER:: N=16, ER=10000
        1:  514:      integer,allocatable:: B(:,:),V(:,:),C(:,:)
        -:  515:      character*8 tname
        -:  516:      INTEGER ERROR,IERR
        -:  517:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  518:!DVM$   CONSISTENT V
       1*:  519:      allocate (B(N,N),V(N,N),C(N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  520:      tname='CONS2208'
       17:  521:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  522:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  523:            C(I,J)  = I + (N - 1) * J
        -:  524:      ENDDO
        -:  525:      ENDDO
        -:  526:!dvm$ region
        -:  527:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
       17:  528:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  529:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  530:            B(I,J) = I+(N-1)*J
        -:  531:      ENDDO
        -:  532:      ENDDO
        -:  533:!DVM$   PARALLEL (J,I) ON B(I,J), CONSISTENT(V(I,J))
       17:  534:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  535:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  536:            V(I,J) = B(I,J)
        -:  537:      ENDDO
        -:  538:      ENDDO
        -:  539:!dvm$ end region
        -:  540:!dvm$ get_actual (V)
        -:  541:      IERR = ER
       17:  542:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  543:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  544:            IF(V(I,J) .NE. C(I,J)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  545:                  IERR = C(I,J)
        -:  546:                  EXIT
        -:  547:            ENDIF
        -:  548:      ENDDO
        -:  549:      ENDDO
        -:  550:      ERROR = ER
        -:  551:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
       17:  552:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  553:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  554:            ERROR = MIN(ERROR,IERR)
        -:  555:      ENDDO
        -:  556:      ENDDO
        1:  557:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  558:            call ansyes(tname)
call    0 returned 100%
        -:  559:      ELSE
    #####:  560:            call ansno(tname)
call    0 never executed
        -:  561:      ENDIF
       1*:  562:      deallocate (B, V, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  563:      END
        -:  564:C ---------------------------------------------cons2209
        -:  565:C consistent arrays with 3 dimensions
        -:  566:C one consistent array and one distributed array
function cons2209_ called 1 returned 100% blocks executed 90%
        1:  567:      subroutine CONS2209
        -:  568:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  569:      integer,allocatable:: B(:,:),V(:,:,:),C(:,:,:)
        -:  570:      character*8 tname
        -:  571:      INTEGER ERROR,IERR
        -:  572:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  573:!DVM$   CONSISTENT V
       1*:  574:      allocate (B(N,N),V(N,N,N),C(N,N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  575:      tname='CONS2209'
        9:  576:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  577:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  578:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  579:            C(I,J,K)  = I + (N - 1) * J + (N - 1) * (N - 1) * K
        -:  580:      ENDDO
        -:  581:      ENDDO
        -:  582:      ENDDO
        -:  583:!dvm$ region
        -:  584:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  585:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  586:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  587:            B(I,J) = I+(N-1)*J
        -:  588:      ENDDO
        -:  589:      ENDDO
        -:  590:!DVM$   PARALLEL (J,I) ON B(I,J), private(K), CONSISTENT(V(I,J,:))
        9:  591:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  592:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  593:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  594:            V(I,J,K) = B(I,J) + (N - 1) * (N - 1) * K
        -:  595:      ENDDO
        -:  596:      ENDDO
        -:  597:      ENDDO
        -:  598:!dvm$ end region
        -:  599:!dvm$ get_actual (V)
        -:  600:      IERR = ER
        9:  601:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  602:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  603:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  604:            IF(V(I,J,K) .NE. C(I,J,K)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  605:                  IERR = C(I,J,K)
        -:  606:                  EXIT
        -:  607:            ENDIF
        -:  608:      ENDDO
        -:  609:      ENDDO
        -:  610:      ENDDO
        -:  611:      ERROR = ER
        -:  612:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  613:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  614:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  615:            ERROR = MIN(ERROR,IERR)
        -:  616:      ENDDO
        -:  617:      ENDDO
        1:  618:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  619:            call ansyes(tname)
call    0 returned 100%
        -:  620:      ELSE
    #####:  621:            call ansno(tname)
call    0 never executed
        -:  622:      ENDIF
       1*:  623:      deallocate (B, V, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  624:      END
        -:  625:C ---------------------------------------------cons2210
        -:  626:C consistent arrays with 3 dimensions
        -:  627:C two consistent arrays and one distributed array
function cons2210_ called 1 returned 100% blocks executed 91%
        1:  628:      subroutine CONS2210
        -:  629:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  630:      integer,allocatable:: B(:,:),V(:,:,:),W(:,:,:),C(:,:,:)
        -:  631:      character*8 tname
        -:  632:      INTEGER ERROR,IERR
        -:  633:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  634:!DVM$   CONSISTENT V
        -:  635:!DVM$   CONSISTENT W
       1*:  636:      allocate (B(N,N),V(N,N,N),W(N,N,N),C(N,N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        1:  637:      tname='CONS2210'
        9:  638:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  639:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  640:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  641:            C(I,J,K)  = I + (N - 1) * J + (N - 1) * (N - 1) * K
        -:  642:      ENDDO
        -:  643:      ENDDO
        -:  644:      ENDDO
        -:  645:!dvm$ region
        -:  646:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  647:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  648:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  649:            B(I,J) = I+(N-1)*J
        -:  650:      ENDDO
        -:  651:      ENDDO
        -:  652:!DVM$   PARALLEL (J,I) ON B(I,J), private(K), CONSISTENT(V(I,J,:))
        9:  653:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  654:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  655:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  656:            V(I,J,K) = B(I,J) + (N - 1) * (N - 1) * K
        -:  657:      ENDDO
        -:  658:      ENDDO
        -:  659:      ENDDO
        -:  660:!DVM$   PARALLEL (J,I) ON B(I,J), private(K), CONSISTENT(W(I,J,:))
        9:  661:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  662:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  663:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  664:            W(I,J,K) = B(I,J) + (N - 1) * (N - 1) * K
        -:  665:      ENDDO
        -:  666:      ENDDO
        -:  667:      ENDDO
        -:  668:!dvm$ end region
        -:  669:!dvm$ get_actual (V, W)
        -:  670:      IERR = ER
        9:  671:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  672:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  673:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  674:            IF(V(I,J,K) .NE. C(I,J,K)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  675:                  IERR = C(I,J,K)
        -:  676:                  EXIT
        -:  677:            ENDIF
        -:  678:      ENDDO
        -:  679:      ENDDO
        -:  680:      ENDDO
        9:  681:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  682:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  683:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  684:            IF(W(I,J,K) .NE. C(I,J,K)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  685:                  IERR = C(I,J,K)
        -:  686:                  EXIT
        -:  687:            ENDIF
        -:  688:      ENDDO
        -:  689:      ENDDO
        -:  690:      ENDDO
        -:  691:      ERROR = ER
        -:  692:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  693:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  694:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  695:            ERROR = MIN(ERROR,IERR)
        -:  696:      ENDDO
        -:  697:      ENDDO
        1:  698:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  699:            call ansyes(tname)
call    0 returned 100%
        -:  700:      ELSE
    #####:  701:            call ansno(tname)
call    0 never executed
        -:  702:      ENDIF
       1*:  703:      deallocate (B, V, W, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        1:  704:      END
        -:  705:C ---------------------------------------------cons2211
        -:  706:C consistent arrays with 3 dimensions
function cons2211_ called 1 returned 100% blocks executed 90%
        1:  707:      subroutine CONS2211
        -:  708:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  709:      integer,allocatable::B(:,:),A(:,:),V(:,:,:),W(:,:,:)
        1:  710:     *,C(:,:,:)
        -:  711:      character*8 tname
        -:  712:      INTEGER ERROR,IERR
        -:  713:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  714:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   A
        -:  715:!DVM$   CONSISTENT V
        -:  716:!DVM$   CONSISTENT W
       1*:  717:      allocate (B(N,N),A(N,N),V(N,N,N),W(N,N,N),C(N,N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        1:  718:      tname='CONS2211'
        9:  719:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  720:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  721:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  722:            C(I,J,K)  = I + (N - 1) * J + (N - 1) * (N - 1) * K
        -:  723:      ENDDO
        -:  724:      ENDDO
        -:  725:      ENDDO
        -:  726:!dvm$ region
        -:  727:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  728:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  729:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  730:            B(I,J) = I+(N-1)*J
        -:  731:      ENDDO
        -:  732:      ENDDO
        -:  733:!DVM$   PARALLEL    (J,I)   ON   A(I,J)
        9:  734:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  735:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  736:            A(I,J) = I+(N-1)*J
        -:  737:      ENDDO
        -:  738:      ENDDO
        -:  739:!DVM$   PARALLEL (J,I) ON B(I,J), private(K), CONSISTENT(V(I,J,:))
        9:  740:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  741:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  742:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  743:            V(I,J,K) = B(I,J) + (N - 1) * (N - 1) * K
        -:  744:      ENDDO
        -:  745:      ENDDO
        -:  746:      ENDDO
        -:  747:!DVM$ PARALLEL (J,I) ON A(I,J), private(K), CONSISTENT(W(I,J,:))
        9:  748:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  749:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  750:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  751:            W(I,J,K) = A(I,J) + (N - 1) * (N - 1) * K
        -:  752:      ENDDO
        -:  753:      ENDDO
        -:  754:      ENDDO
        -:  755:!dvm$ end region
        -:  756:!dvm$ get_actual (V, W)
        -:  757:      IERR = ER
        9:  758:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  759:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  760:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  761:            IF(V(I,J,K) .NE. C(I,J,K)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  762:                  IERR = C(I,J,K)
        -:  763:                  EXIT
        -:  764:            ENDIF
        -:  765:      ENDDO
        -:  766:      ENDDO
        -:  767:      ENDDO
        9:  768:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  769:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  770:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      576:  771:            IF(W(I,J,K) .NE. C(I,J,K)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  772:                  IERR = C(I,J,K)
        -:  773:                  EXIT
        -:  774:            ENDIF
        -:  775:      ENDDO
        -:  776:      ENDDO
        -:  777:      ENDDO
        -:  778:      ERROR = ER
        -:  779:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  780:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  781:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  782:            ERROR = MIN(ERROR,IERR)
        -:  783:      ENDDO
        -:  784:      ENDDO
        1:  785:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  786:            call ansyes(tname)
call    0 returned 100%
        -:  787:      ELSE
    #####:  788:            call ansno(tname)
call    0 never executed
        -:  789:      ENDIF
       1*:  790:      deallocate (B, A, V, W, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        1:  791:      END
        -:  792:C ---------------------------------------------cons2212
        -:  793:C consistent arrays with 3 dimensions
        -:  794:C one consistent array and one distributed array
        -:  795:C big data
function cons2212_ called 1 returned 100% blocks executed 90%
        1:  796:      subroutine CONS2212
        -:  797:      INTEGER,PARAMETER:: N=16, ER=100000
        1:  798:      integer,allocatable:: B(:,:),V(:,:,:),C(:,:,:)
        -:  799:      character*8 tname
        -:  800:      INTEGER ERROR,IERR
        -:  801:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  802:!DVM$   CONSISTENT V
       1*:  803:      allocate (B(N,N),V(N,N,N),C(N,N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  804:      tname='CONS2212'
       17:  805:      DO K = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  806:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4368:  807:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4352:  808:            C(I,J,K)  = I + (N - 1) * J + (N - 1) * (N - 1) * K
        -:  809:      ENDDO
        -:  810:      ENDDO
        -:  811:      ENDDO
        -:  812:!dvm$ region
        -:  813:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
       17:  814:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  815:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  816:            B(I,J) = I+(N-1)*J
        -:  817:      ENDDO
        -:  818:      ENDDO
        -:  819:!DVM$   PARALLEL (J,I) ON B(I,J), private(K), CONSISTENT(V(I,J,:))
       17:  820:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  821:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4368:  822:      DO K = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4352:  823:            V(I,J,K) = B(I,J) + (N - 1) * (N - 1) * K
        -:  824:      ENDDO
        -:  825:      ENDDO
        -:  826:      ENDDO
        -:  827:!dvm$ end region
        -:  828:!dvm$ get_actual (V)
        -:  829:      IERR = ER
       17:  830:      DO K = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  831:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4368:  832:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4352:  833:            IF(V(I,J,K) .NE. C(I,J,K)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  834:                  IERR = C(I,J,K)
        -:  835:                  EXIT
        -:  836:            ENDIF
        -:  837:      ENDDO
        -:  838:      ENDDO
        -:  839:      ENDDO
        -:  840:      ERROR = ER
        -:  841:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
       17:  842:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:  843:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272:  844:            ERROR = MIN(ERROR,IERR)
        -:  845:      ENDDO
        -:  846:      ENDDO
        1:  847:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  848:            call ansyes(tname)
call    0 returned 100%
        -:  849:      ELSE
    #####:  850:            call ansno(tname)
call    0 never executed
        -:  851:      ENDIF
       1*:  852:      deallocate (B, V, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  853:      END
        -:  854:C ---------------------------------------------cons2213
        -:  855:C consistent arrays with 4 dimensions
        -:  856:C one consistent array and one distributed array
function cons2213_ called 1 returned 100% blocks executed 91%
        1:  857:      subroutine CONS2213
        -:  858:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  859:      integer,allocatable:: B(:,:),V(:,:,:,:),C(:,:,:,:)
        -:  860:      character*8 tname
        -:  861:      INTEGER ERROR,IERR
        -:  862:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  863:!DVM$   CONSISTENT V
       1*:  864:      allocate (B(N,N),V(N,N,N,N),C(N,N,N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  865:      tname='CONS2213'
        9:  866:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  867:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  868:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  869:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  870:            C(I,J,K,L)=I+(N-1)*J+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -:  871:      ENDDO
        -:  872:      ENDDO
        -:  873:      ENDDO
        -:  874:      ENDDO
        -:  875:!dvm$ region
        -:  876:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  877:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  878:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  879:            B(I,J) = I+(N-1)*J
        -:  880:      ENDDO
        -:  881:      ENDDO
        -:  882:!DVM$   PARALLEL (J,I) ON B(I,J), private(K,L), CONSISTENT(V(I,J,:,:))
        9:  883:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  884:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  885:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  886:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  887:            V(I,J,K,L)=B(I,J)+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -:  888:      ENDDO
        -:  889:      ENDDO
        -:  890:      ENDDO
        -:  891:      ENDDO
        -:  892:!dvm$ end region
        -:  893:!dvm$ get_actual (V)
        -:  894:      IERR = ER
        9:  895:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  896:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  897:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  898:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  899:            IF(V(I,J,K,L) .NE. C(I,J,K,L)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  900:                  IERR = C(I,J,K,L)
        -:  901:                  EXIT
        -:  902:            ENDIF
        -:  903:      ENDDO
        -:  904:      ENDDO
        -:  905:      ENDDO
        -:  906:      ENDDO
        -:  907:      ERROR = ER
        -:  908:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  909:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  910:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  911:            ERROR = MIN(ERROR,IERR)
        -:  912:      ENDDO
        -:  913:      ENDDO
        1:  914:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  915:            call ansyes(tname)
call    0 returned 100%
        -:  916:      ELSE
    #####:  917:            call ansno(tname)
call    0 never executed
        -:  918:      ENDIF
       1*:  919:      deallocate (B, V, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1:  920:      END
        -:  921:C ---------------------------------------------cons2214
        -:  922:C consistent arrays with 4 dimensions
        -:  923:C two consistent arrays and one distributed array
function cons2214_ called 1 returned 100% blocks executed 92%
        1:  924:      subroutine CONS2214
        -:  925:      INTEGER,PARAMETER:: N=8, ER=10000
        1:  926:      integer,allocatable:: B(:,:),V(:,:,:,:),W(:,:,:,:),C(:,:,:,:)
        -:  927:      character*8 tname
        -:  928:      INTEGER ERROR,IERR
        -:  929:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -:  930:!DVM$   CONSISTENT V
        -:  931:!DVM$   CONSISTENT W
       1*:  932:      allocate (B(N,N),V(N,N,N,N),W(N,N,N,N),C(N,N,N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        1:  933:      tname='CONS2214'
        9:  934:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  935:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  936:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  937:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  938:            C(I,J,K,L)=I+(N-1)*J+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -:  939:      ENDDO
        -:  940:      ENDDO
        -:  941:      ENDDO
        -:  942:      ENDDO
        -:  943:!dvm$ region
        -:  944:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9:  945:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  946:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  947:            B(I,J) = I+(N-1)*J
        -:  948:      ENDDO
        -:  949:      ENDDO
        -:  950:!DVM$   PARALLEL (J,I) ON B(I,J), private(K,L), CONSISTENT(V(I,J,:,:))
        9:  951:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  952:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  953:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  954:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  955:            V(I,J,K,L)=B(I,J)+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -:  956:      ENDDO
        -:  957:      ENDDO
        -:  958:      ENDDO
        -:  959:      ENDDO
        -:  960:!DVM$   PARALLEL (J,I) ON B(I,J), private(K,L), CONSISTENT(W(I,J,:,:))
        9:  961:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  962:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  963:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  964:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  965:            W(I,J,K,L)=B(I,J)+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -:  966:      ENDDO
        -:  967:      ENDDO
        -:  968:      ENDDO
        -:  969:      ENDDO
        -:  970:!dvm$ end region
        -:  971:!dvm$ get_actual (V, W)
        -:  972:      IERR = ER
        9:  973:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  974:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  975:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  976:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  977:            IF(V(I,J,K,L) .NE. C(I,J,K,L)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  978:                  IERR = C(I,J,K,L)
        -:  979:                  EXIT
        -:  980:            ENDIF
        -:  981:      ENDDO
        -:  982:      ENDDO
        -:  983:      ENDDO
        -:  984:      ENDDO
        9:  985:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  986:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  987:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  988:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  989:            IF(W(I,J,K,L) .NE. C(I,J,K,L)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  990:                  IERR = C(I,J,K,L)
        -:  991:                  EXIT
        -:  992:            ENDIF
        -:  993:      ENDDO
        -:  994:      ENDDO
        -:  995:      ENDDO
        -:  996:      ENDDO
        -:  997:      ERROR = ER
        -:  998:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9:  999:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1000:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72: 1001:            ERROR = MIN(ERROR,IERR)
        -: 1002:      ENDDO
        -: 1003:      ENDDO
        1: 1004:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1005:            call ansyes(tname)
call    0 returned 100%
        -: 1006:      ELSE
    #####: 1007:            call ansno(tname)
call    0 never executed
        -: 1008:      ENDIF
       1*: 1009:      deallocate (B, V, W, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        1: 1010:      END
        -: 1011:C ---------------------------------------------cons2215
        -: 1012:C consistent arrays with 4 dimensions
function cons2215_ called 1 returned 100% blocks executed 92%
        1: 1013:      subroutine CONS2215
        -: 1014:      INTEGER,PARAMETER:: N=8, ER=10000
        1: 1015:      integer,allocatable::B(:,:),A(:,:),V(:,:,:,:),W(:,:,:,:)
        1: 1016:     *,C(:,:,:,:)
        -: 1017:      character*8 tname
        -: 1018:      INTEGER ERROR,IERR
        -: 1019:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -: 1020:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   A
        -: 1021:!DVM$   CONSISTENT V
        -: 1022:!DVM$   CONSISTENT W
       1*: 1023:      allocate (B(N,N),A(N,N),V(N,N,N,N),W(N,N,N,N),C(N,N,N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        1: 1024:      tname='CONS2215'
        9: 1025:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1026:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1027:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1028:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608: 1029:            C(I,J,K,L)=I+(N-1)*J+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -: 1030:      ENDDO
        -: 1031:      ENDDO
        -: 1032:      ENDDO
        -: 1033:      ENDDO
        -: 1034:!dvm$ region
        -: 1035:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
        9: 1036:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1037:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72: 1038:            B(I,J) = I+(N-1)*J
        -: 1039:      ENDDO
        -: 1040:      ENDDO
        -: 1041:!DVM$   PARALLEL    (J,I)   ON   A(I,J)
        9: 1042:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1043:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72: 1044:            A(I,J) = I+(N-1)*J
        -: 1045:      ENDDO
        -: 1046:      ENDDO
        -: 1047:!DVM$   PARALLEL (J,I) ON B(I,J), private(K,L), CONSISTENT(V(I,J,:,:))
        9: 1048:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1049:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1050:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1051:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608: 1052:            V(I,J,K,L)=B(I,J)+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -: 1053:      ENDDO
        -: 1054:      ENDDO
        -: 1055:      ENDDO
        -: 1056:      ENDDO
        -: 1057:!DVM$ PARALLEL (J,I) ON A(I,J), private(K,L), CONSISTENT(W(I,J,:,:))
        9: 1058:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1059:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1060:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1061:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608: 1062:            W(I,J,K,L)=A(I,J)+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -: 1063:      ENDDO
        -: 1064:      ENDDO
        -: 1065:      ENDDO
        -: 1066:      ENDDO
        -: 1067:!dvm$ end region
        -: 1068:!dvm$ get_actual (V, W)
        -: 1069:      IERR = ER
        9: 1070:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1071:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1072:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1073:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608: 1074:            IF(V(I,J,K,L) .NE. C(I,J,K,L)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1075:                  IERR = C(I,J,K,L)
        -: 1076:                  EXIT
        -: 1077:            ENDIF
        -: 1078:      ENDDO
        -: 1079:      ENDDO
        -: 1080:      ENDDO
        -: 1081:      ENDDO
        9: 1082:      DO L = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1083:      DO K = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584: 1084:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672: 1085:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608: 1086:            IF(W(I,J,K,L) .NE. C(I,J,K,L)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1087:                  IERR = C(I,J,K,L)
        -: 1088:                  EXIT
        -: 1089:            ENDIF
        -: 1090:      ENDDO
        -: 1091:      ENDDO
        -: 1092:      ENDDO
        -: 1093:      ENDDO
        -: 1094:      ERROR = ER
        -: 1095:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
        9: 1096:      DO J = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73: 1097:      DO I = 1, N
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72: 1098:            ERROR = MIN(ERROR,IERR)
        -: 1099:      ENDDO
        -: 1100:      ENDDO
        1: 1101:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1102:            call ansyes(tname)
call    0 returned 100%
        -: 1103:      ELSE
    #####: 1104:            call ansno(tname)
call    0 never executed
        -: 1105:      ENDIF
       1*: 1106:      deallocate (B, A, V, W, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
        1: 1107:      END
        -: 1108:C ---------------------------------------------cons2216
        -: 1109:C consistent arrays with 4 dimensions
        -: 1110:C one consistent array and one distributed array
        -: 1111:C big data
function cons2216_ called 1 returned 100% blocks executed 91%
        1: 1112:      subroutine CONS2216
        -: 1113:      INTEGER,PARAMETER:: N=16, ER=1000000
        1: 1114:      integer,allocatable:: B(:,:),V(:,:,:,:),C(:,:,:,:)
        -: 1115:      character*8 tname
        -: 1116:      INTEGER ERROR,IERR
        -: 1117:!DVM$   DISTRIBUTE     ( BLOCK, BLOCK )   ::   B
        -: 1118:!DVM$   CONSISTENT V
       1*: 1119:      allocate (B(N,N),V(N,N,N,N),C(N,N,N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1: 1120:      tname='CONS2216'
       17: 1121:      DO L = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273: 1122:      DO K = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4368: 1123:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    69888: 1124:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    69632: 1125:            C(I,J,K,L)=I+(N-1)*J+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -: 1126:      ENDDO
        -: 1127:      ENDDO
        -: 1128:      ENDDO
        -: 1129:      ENDDO
        -: 1130:!dvm$ region
        -: 1131:!DVM$   PARALLEL    (J,I)   ON   B(I,J)
       17: 1132:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273: 1133:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272: 1134:            B(I,J) = I+(N-1)*J
        -: 1135:      ENDDO
        -: 1136:      ENDDO
        -: 1137:!DVM$   PARALLEL (J,I) ON B(I,J), private(K,L), CONSISTENT(V(I,J,:,:))
       17: 1138:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273: 1139:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4368: 1140:      DO L = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    69888: 1141:      DO K = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    69632: 1142:            V(I,J,K,L)=B(I,J)+(N-1)*(N-1)*K+(N-1)*(N-1)*(N-1)*L
        -: 1143:      ENDDO
        -: 1144:      ENDDO
        -: 1145:      ENDDO
        -: 1146:      ENDDO
        -: 1147:!dvm$ end region
        -: 1148:!dvm$ get_actual (V)
        -: 1149:      IERR = ER
       17: 1150:      DO L = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273: 1151:      DO K = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     4368: 1152:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    69888: 1153:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    69632: 1154:            IF(V(I,J,K,L) .NE. C(I,J,K,L)) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1155:                  IERR = C(I,J,K,L)
        -: 1156:                  EXIT
        -: 1157:            ENDIF
        -: 1158:      ENDDO
        -: 1159:      ENDDO
        -: 1160:      ENDDO
        -: 1161:      ENDDO
        -: 1162:      ERROR = ER
        -: 1163:!DVM$  PARALLEL  (J,I)   ON  B(I,J), REDUCTION(MIN(ERROR))
       17: 1164:      DO J = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273: 1165:      DO I = 1, N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      272: 1166:            ERROR = MIN(ERROR,IERR)
        -: 1167:      ENDDO
        -: 1168:      ENDDO
        1: 1169:      IF(ERROR .EQ. ER) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1170:            call ansyes(tname)
call    0 returned 100%
        -: 1171:      ELSE
    #####: 1172:            call ansno(tname)
call    0 never executed
        -: 1173:      ENDIF
       1*: 1174:      deallocate (B, V, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        1: 1175:      END
        -: 1176:
        -: 1177:C --------------------------------------------------
function ansyes_ called 16 returned 100% blocks executed 100%
       16: 1178:      subroutine ansyes(name)
        -: 1179:      character*8 name
       16: 1180:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       16: 1181:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####: 1182:      subroutine ansno(name)
        -: 1183:      character*8 name
    #####: 1184:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1185:      end
