        -:    0:Source:results/2d/sha22/sha22.f
        -:    0:Graph:./results\2d\sha22\sha22.gcno
        -:    0:Data:./results\2d\sha22\sha22.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program SHA22
        -:    2:     
        -:    3:c    TESTING OF THE SHADOW_GROUP DIRECTIVE ,SHADOW_START DIRECRIVE AND
        -:    4:c    SHADOW_WAIT DIRECTIVE.       
        -:    5:c    DISTRIBUTED ARRAYES A(N,M),D(N,M),F(N,M) IS TO HAVE DIFFERENT 
        -:    6:c    SHADOW WIDTH ON BOTH SIDES 
        -:    7:
        1:    8:      print *,'===START OF SHA22========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    9:C --------------------------------------------------
        1:   10:      call sha2201
call    0 returned 100%
        -:   11:C --------------------------------------------------
        1:   12:      call sha2202
call    0 returned 100%
        -:   13:C --------------------------------------------------
        1:   14:      call sha2203
call    0 returned 100%
        -:   15:C -------------------------------------------------
        1:   16:      call sha2204
call    0 returned 100%
        -:   17:C -------------------------------------------------
        -:   18: 
        -:   19:C
        -:   20:C
        1:   21:      print *,'=== END OF SHA22 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   22:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   23:C ---------------------------------------------SHA2201
function sha2201_ called 1 returned 100% blocks executed 75%
        1:   24:      subroutine SHA2201
        -:   25:      integer,parameter :: N = 16,M=16, PN = 16,NL=1000
        -:   26:      character*7 tname 
        1:   27:      integer, allocatable :: A(:,:),BA(:,:),BD(:,:)
        1:   28:      integer, allocatable :: BF(:,:),C(:,:),D(:,:),F(:,:)
        -:   29:      integer nloop 
        -:   30:                      
        -:   31:cdvm$ distribute BA(BLOCK,*)     
        -:   32:cdvm$ shadow D(2:2,2:2)
        -:   33:cdvm$ shadow F(3:3,3:3)
        -:   34:cdvm$ align (I,J) with BA(I,J) ::A,D,F,BD,BF
        -:   35:
        1:   36:      tname='SHA2201'
       1*:   37:      allocate (BA(N,M),A(N,M),BD(N,M))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
       1*:   38:      allocate (BF(N,M),C(N,M),D(N,M),F(N,M))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:   39:cdvm$ shadow_group ADF(A(CORNER),D(CORNER),F(CORNER))
        -:   40:
        -:   41:      NNL=NL    
       17:   42:      call serial2(C,N,M,NNL)
       17:   43:      nloopa=NL
       17:   44:      nloopd=NL
       17:   45:      nloopf=NL
        -:   46:
        -:   47:*dvm$ parallel (i,j) on A(i,j)
       17:   48:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      273:   49:        do j=1,M
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      256:   50:          A(i,j) = NL+i+j
      256:   51:          D(i,j) =NL+i+j
      272:   52:          F(i,j) =NL+i+j
        -:   53:        enddo
        -:   54:      enddo
        -:   55:
        -:   56:cdvm$ shadow_start ADF
        -:   57:cdvm$ shadow_wait ADF               
        -:   58:
        -:   59:c      print *,'C'
        -:   60:c      print *,C  
        -:   61:c      print *,'A'
        -:   62:c      print *,A
        -:   63:*dvm$ parallel (i,j) on BA(i,j),NEW(K)
       11:   64:      do i=4,N-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      111:   65:        do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      100:   66:          BA(i,j) = A(i-1,j-1)+A(i+1,j+1)
      100:   67:          BD(i,j)=  D(i-2,j-2)+D(i+2,j+2)
      110:   68:          BF(i,j)=  F(i-3,j-3)+F(i+3,j+3)         
        -:   69:        enddo
        -:   70:      enddo
        -:   71:  
        -:   72:c      print *,'BA'
        -:   73:c      print *,BA
        -:   74:*dvm$ parallel (i,j) on BA(i,j),NEW(K),reduction( min( nloopa),
        -:   75:*dvm$* min(nloopd),min(nloopf) )
       11:   76:      do i=4,N-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      111:   77:        do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     100*:   78:          if (BA(i,j).ne.(C(i-1,j-1)+c(i+1,j+1))) nloopa=min(nloopa,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     100*:   79:          if (BD(i,j).ne.(C(i-2,j-2)+c(i+2,j+2))) nloopd=min(nloopd,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     110*:   80:          if (BF(i,j).ne.(C(i-3,j-3)+c(i+3,j+3))) nloopf=min(nloopf,i)        
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:   81:        enddo
        -:   82:      enddo
        -:   83:      
        1:   84:      if ((nloopa .eq.NL).and.(nloopd.eq.NL).and.(nloopf.eq.NL)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   85:          call ansyes(tname)
call    0 returned 100%
        -:   86:      else
    #####:   87:          call ansno(tname)
call    0 never executed
        -:   88:      endif 
       1*:   89:      deallocate (A,BA,BD,BF,C,D,F)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
        -:   90:      
        1:   91:      end
        -:   92:
        -:   93:C ---------------------------------------------SHA2202
function sha2202_ called 1 returned 100% blocks executed 75%
        1:   94:      subroutine SHA2202
        -:   95:      integer,parameter :: N = 32,M=32,NL=1000
        -:   96:      character*7 tname 
        1:   97:      integer, allocatable :: A(:,:),BA(:,:),BD(:,:)
        1:   98:      integer, allocatable :: BF(:,:),C(:,:),D(:,:),F(:,:)
        -:   99:      integer nloop 
        -:  100:                      
        -:  101:cdvm$ distribute BA(*,BLOCK)     
        -:  102:cdvm$ shadow D(2:2,2:2)
        -:  103:cdvm$ shadow F(3:3,3:3)
        -:  104:cdvm$ align (I,J) with BA(I,J) ::A,D,F,BD,BF
        -:  105:
        1:  106:      tname='SHA2202'
       1*:  107:      allocate (BA(N,M),A(N,M),BD(N,M))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
       1*:  108:      allocate (BF(N,M),C(N,M),D(N,M),F(N,M))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:  109:cdvm$ shadow_group ADF(A(CORNER),D(CORNER),F(CORNER))
        -:  110:
        -:  111:      NNL=NL    
       33:  112:      call serial2(C,N,M,NNL)
       33:  113:      nloopa=NL
       33:  114:      nloopd=NL
       33:  115:      nloopf=NL
        -:  116:
        -:  117:*dvm$ parallel (i,j) on A(i,j)
       33:  118:      do i=1,N
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     1057:  119:        do j=1,M
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     1024:  120:          A(i,j) = NL+i+j
     1024:  121:          D(i,j) =NL+i+j
     1056:  122:          F(i,j) =NL+i+j
        -:  123:        enddo
        -:  124:      enddo                
        -:  125:
        -:  126:cdvm$ shadow_start ADF
        -:  127:
        -:  128:*dvm$ parallel (i,j) on BA(i,j),shadow_wait ADF
       27:  129:      do i=4,N-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      703:  130:        do j=4,M-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      676:  131:          BA(i,j) = A(i-1,j-1)+A(i+1,j+1)
      676:  132:          BD(i,j)=  D(i-2,j-2)+D(i+2,j+2)
      702:  133:          BF(i,j)=  F(i-3,j-3)+F(i+3,j+3)         
        -:  134:        enddo
        -:  135:      enddo
        -:  136:  
        -:  137:*dvm$ parallel (i,j) on BA(i,j), reduction( min( nloopa),
        -:  138:*dvm$* min(nloopd),min(nloopf) )
       27:  139:      do i=4,N-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      703:  140:        do j=4,M-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
     676*:  141:          if (BA(i,j).ne.(C(i-1,j-1)+c(i+1,j+1))) nloopa=min(nloopa,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     676*:  142:          if (BD(i,j).ne.(C(i-2,j-2)+c(i+2,j+2))) nloopd=min(nloopd,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     702*:  143:          if (BF(i,j).ne.(C(i-3,j-3)+c(i+3,j+3))) nloopf=min(nloopf,i)          
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  144:        enddo
        -:  145:      enddo
        -:  146:      
        1:  147:      if ((nloopa .eq.NL).and.(nloopd.eq.NL).and.(nloopf.eq.NL)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  148:          call ansyes(tname)
call    0 returned 100%
        -:  149:      else
    #####:  150:          call ansno(tname)
call    0 never executed
        -:  151:      endif 
       1*:  152:      deallocate (A,BA,BD,BF,C,D,F)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
        -:  153:      
        1:  154:      end
        -:  155:
        -:  156:C ---------------------------------------------SHA2203
        -:  157:   
        -:  158:
function sha2203_ called 1 returned 100% blocks executed 75%
        1:  159:      subroutine SHA2203
        -:  160:      integer,parameter :: N = 32,M=32,NL=1000
        -:  161:      character*7 tname 
        1:  162:      integer, allocatable :: A(:,:),BA(:,:),BD(:,:)
        1:  163:      integer, allocatable :: BF(:,:),C(:,:),D(:,:),F(:,:)
        -:  164:      integer nloop 
        -:  165:                      
        -:  166:cdvm$ distribute BA(*,BLOCK)     
        -:  167:cdvm$ shadow D(2:2,2:2)
        -:  168:cdvm$ shadow F(3:3,3:3)
        -:  169:cdvm$ align (I,J) with BA(I,J) ::A,D,F,BD,BF
        -:  170:
        1:  171:      tname='SHA2203'
       1*:  172:      allocate (BA(N,M),A(N,M),BD(N,M))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
       1*:  173:      allocate (BF(N,M),C(N,M),D(N,M),F(N,M))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:  174:cdvm$ shadow_group ADF(A(CORNER),D(CORNER),F(CORNER))
        -:  175:
        -:  176:      NNL=NL    
       33:  177:      call serial2(C,N,M,NNL)
       33:  178:      nloopa=NL
       33:  179:      nloopd=NL
       33:  180:      nloopf=NL
        -:  181:
        -:  182:*dvm$ parallel (i,j) on A(i,j),shadow_start ADF
       33:  183:      do i=1,N
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     1057:  184:        do j=1,M
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     1024:  185:          A(i,j) = NL+i+j
     1024:  186:          D(i,j) =NL+i+j
     1056:  187:          F(i,j) =NL+i+j
        -:  188:        enddo
        -:  189:      enddo                
        -:  190:    
        -:  191:cdvm$ shadow_wait ADF 
        -:  192:
        -:  193:*dvm$ parallel (i,j) on BA(i,j)
       27:  194:      do i=4,N-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      703:  195:        do j=4,M-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      676:  196:          BA(i,j) = A(i-1,j-1)+A(i+1,j+1)
      676:  197:          BD(i,j)=  D(i-2,j-2)+D(i+2,j+2)
      702:  198:          BF(i,j)=  F(i-3,j-3)+F(i+3,j+3)         
        -:  199:         enddo
        -:  200:      enddo
        -:  201:  
        -:  202:*dvm$ parallel (i,j) on BA(i,j), reduction( min( nloopa),
        -:  203:*dvm$* min(nloopd),min(nloopf) )
       27:  204:      do i=4,N-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      703:  205:        do j=4,M-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
     676*:  206:          if (BA(i,j).ne.(C(i-1,j-1)+c(i+1,j+1))) nloopa=min(nloopa,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     676*:  207:          if (BD(i,j).ne.(C(i-2,j-2)+c(i+2,j+2))) nloopd=min(nloopd,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     702*:  208:          if (BF(i,j).ne.(C(i-3,j-3)+c(i+3,j+3))) nloopf=min(nloopf,i)          
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  209:        enddo
        -:  210:      enddo     
        -:  211:      
        1:  212:      if ((nloopa .eq.NL).and.(nloopd.eq.NL).and.(nloopf.eq.NL)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  213:          call ansyes(tname)
call    0 returned 100%
        -:  214:      else
    #####:  215:          call ansno(tname)
call    0 never executed
        -:  216:      endif 
       1*:  217:      deallocate (A,BA,BD,BF,C,D,F)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
        -:  218:      
        1:  219:      end
        -:  220:C ---------------------------------------------SHA2204
function sha2204_ called 1 returned 100% blocks executed 75%
        1:  221:      subroutine SHA2204
        -:  222:      integer,parameter :: N = 32,M=32,NL=1000
        -:  223:      character*7 tname 
        1:  224:      integer, allocatable :: A(:,:),BA(:,:),BD(:,:)
        1:  225:      integer, allocatable :: BF(:,:),C(:,:),D(:,:),F(:,:)
        -:  226:      integer nloop 
        -:  227:                      
        -:  228:cdvm$ distribute BA(*,BLOCK)     
        -:  229:cdvm$ shadow D(2:2,2:2)
        -:  230:cdvm$ shadow F(3:3,3:3)
        -:  231:cdvm$ align (I,J) with BA(I,J) ::A,D,F,BD,BF
        -:  232:
        1:  233:      tname='SHA2204'
       1*:  234:      allocate (BA(N,M),A(N,M),BD(N,M))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
       1*:  235:      allocate (BF(N,M),C(N,M),D(N,M),F(N,M))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:  236:cdvm$ shadow_group ADF(A(CORNER),D(CORNER),F(CORNER))
        -:  237:
        -:  238:      NNL=NL    
       33:  239:      call serial2(C,N,M,NNL)
       33:  240:      nloopa=NL
       33:  241:      nloopd=NL
       33:  242:      nloopf=NL
        -:  243:*dvm$ parallel (i,j) on A(i,j),shadow_start ADF
       33:  244:      do i=1,N
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     1057:  245:        do j=1,M
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     1024:  246:          A(i,j) = NL+i+j
     1024:  247:          D(i,j) =NL+i+j
     1056:  248:          F(i,j) =NL+i+j
        -:  249:        enddo
        -:  250:      enddo                
        -:  251:
        -:  252:*dvm$ parallel (i,j) on BA(i,j),shadow_wait ADF
       27:  253:      do i=4,N-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      703:  254:        do j=4,M-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      676:  255:          BA(i,j) = A(i-1,j-1)+A(i+1,j+1)
      676:  256:          BD(i,j)=  D(i-2,j-2)+D(i+2,j+2)
      702:  257:          BF(i,j)=  F(i-3,j-3)+F(i+3,j+3)         
        -:  258:        enddo
        -:  259:      enddo
        -:  260:  
        -:  261:*dvm$ parallel (i,j) on BA(i,j), reduction( min( nloopa),
        -:  262:*dvm$* min(nloopd),min(nloopf) )
       27:  263:      do i=4,N-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      703:  264:        do j=4,M-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
     676*:  265:          if (BA(i,j).ne.(C(i-1,j-1)+c(i+1,j+1))) nloopa=min(nloopa,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     676*:  266:          if (BD(i,j).ne.(C(i-2,j-2)+c(i+2,j+2))) nloopd=min(nloopd,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
     702*:  267:          if (BF(i,j).ne.(C(i-3,j-3)+c(i+3,j+3))) nloopf=min(nloopf,i)          
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  268:        enddo
        -:  269:      enddo
        -:  270:      
        1:  271:      if ((nloopa .eq.NL).and.(nloopd.eq.NL).and.(nloopf.eq.NL)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  272:          call ansyes(tname)
call    0 returned 100%
        -:  273:      else
    #####:  274:          call ansno(tname)
call    0 never executed
        -:  275:      endif 
       1*:  276:      deallocate (A,BA,BD,BF,C,D,F)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
        -:  277:      
        1:  278:      end
        -:  279:C -----------------------------------------------         
function serial2_ called 0 returned 0% blocks executed 0%
    #####:  280:      subroutine serial2(AR,N,M,NL)
        -:  281:      integer AR(N,M)
        -:  282:      integer NL 
     116*:  283:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
branch  6 never executed (fallthrough)
branch  7 never executed
branch  8 taken 97% (fallthrough)
branch  9 taken 3%
    3444*:  284:        do j=1,M
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 97% (fallthrough)
branch  5 taken 3%
branch  6 never executed (fallthrough)
branch  7 never executed
branch  8 taken 97% (fallthrough)
branch  9 taken 3%
    3440*:  285:          AR(i,j) = NL+i+j
        -:  286:        enddo
        -:  287:      enddo
    #####:  288:      end 
        -:  289:
function ansyes_ called 4 returned 100% blocks executed 100%
        4:  290:      subroutine ansyes(name)
        -:  291:      character*7 name
        4:  292:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4:  293:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  294:      subroutine ansno(name)
        -:  295:      character*7 name
    #####:  296:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  297:      end
