        -:    0:Source:results/3d/jac3d/jac3d.f
        -:    0:Graph:./results\3d\jac3d\jac3d.gcno
        -:    0:Data:./results\3d\jac3d\jac3d.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 95%
        1:    1:        PROGRAM JAC3D
        -:    2:        PARAMETER (L=384, ITMAX=100)
        -:    3:        REAL A(L, L, L), EPS, MAXEPS, B(L, L, L)
        -:    4:        DOUBLE PRECISION STARTT, ENDT, dvtime
        -:    5:!DVM$   DISTRIBUTE(BLOCK, BLOCK, BLOCK) :: A
        -:    6:!DVM$   ALIGN B(I, J, K) WITH A(I, J, K)
        -:    7:!        arrays A and B  with block distribution 
        -:    8:
        1:    9:        MAXEPS = 0.5
        -:   10:!DVM$   REGION
        -:   11:!DVM$   PARALLEL(K, J, I) ON A(I, J, K), CUDA_BLOCK(32, 8)
        -:   12:!        nest of two parallel loops, iteration (i, j) will be executed on
        -:   13:!        processor, which is owner of element A(i, j)
      385:   14:        DO K = 1, L
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   147841:   15:          DO J = 1, L
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
 56770944:   16:            DO I = 1, L
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
 56623104:   17:              A(I, J, K) = 0.
        -:   18:              IF (I.EQ.1 .OR. J.EQ.1 .OR. K.EQ.1
 56770560:   19:     >.OR. I.EQ.L .OR. J.EQ.L .OR. K.EQ.L) THEN
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
   880136:   20:                B(I, J, K) = 0.
        -:   21:              ELSE
 55742968:   22:                B(I, J, K) = (1. + I + J + K)
        -:   23:              ENDIF
        -:   24:            ENDDO
        -:   25:          ENDDO
        -:   26:        ENDDO
        -:   27:!DVM$   END REGION
        -:   28:!DVM$   BARRIER
        1:   29:        STARTT = 0
      101:   30:        DO IT = 1, ITMAX
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      100:   31:          EPS = 0.
        -:   32:!DVM$     ACTUAL(EPS)
        -:   33:!DVM$     REGION
        -:   34:!DVM$     PARALLEL(K, J, I) ON A(I, J, K), REDUCTION(MAX(EPS))
        -:   35:!DVM$>, CUDA_BLOCK(32, 8)
        -:   36:!          variable EPS is used for calculation of maximum value
    38300:   37:          DO K = 2, L - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
 14630700:   38:            DO J = 2, L - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5588927400:   39:              DO I = 2, L - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5574296800:   40:                EPS = MAX(EPS, ABS(B(I, J, K) - A(I, J, K)))
5588889200:   41:                A(I, J, K) = B(I, J, K)
        -:   42:              ENDDO
        -:   43:            ENDDO
        -:   44:          ENDDO
        -:   45:!DVM$     PARALLEL(K, J, I) ON B(I, J, K), SHADOW_RENEW(A)
        -:   46:!DVM$>, CUDA_BLOCK(32, 8)
        -:   47:!          Copying shadow elements of array A from
        -:   48:!          neighbouring processors before loop execution
    38300:   49:          DO K = 2, L - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
 14630700:   50:            DO J = 2, L - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5588927400:   51:              DO I = 2, L - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:   52:                B(I, J, K) = (A(I, J, K-1) + A(I, J-1, K) + A(I-1, J, K)
5588889200:   53:     >+ A(I+1, J, K) + A(I, J+1, K) + A(I, J, K+1)) / 6.
        -:   54:              ENDDO
        -:   55:            ENDDO
        -:   56:          ENDDO
        -:   57:!DVM$     END REGION
        -:   58:!DVM$     GET_ACTUAL(EPS)
      100:   59:          PRINT 200, IT, EPS
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   60:200       FORMAT (' IT = ', I4, '   EPS = ', E14.7)
      101:   61:          IF (EPS .LT. MAXEPS) EXIT
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   62:        ENDDO
        -:   63:!DVM$   BARRIER
        1:   64:        ENDT = 0
        -:   65:
        1:   66:        PRINT *, 'Jacobi3D Benchmark Completed.'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1:   67:        PRINT 201, L, L, L
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   68:201     FORMAT (' Size            = ', I4, ' x ', I4, ' x ', I4)
        1:   69:        PRINT 202, ITMAX
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   70:202     FORMAT (' Iterations      =       ', I12)
        1:   71:        PRINT 203, ENDT - STARTT
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   72:203     FORMAT (' Time in seconds =       ', F12.2)
        1:   73:        PRINT *, 'Operation type  =     floating point'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1:   74:        IF (ABS(EPS - 5.058044) .LT. 1.0E-4) THEN
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   75:          PRINT *, 'Verification    =         SUCCESSFUL'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   76:        ELSE
    #####:   77:          PRINT *, 'Verification    =       UNSUCCESSFUL'
call    0 never executed
call    1 never executed
call    2 never executed
        -:   78:        ENDIF
        -:   79:
        1:   80:        PRINT *, 'END OF Jacobi3D Benchmark'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   81:        END
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
