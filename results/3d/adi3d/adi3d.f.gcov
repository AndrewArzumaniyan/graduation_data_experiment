        -:    0:Source:results/3d/adi3d/adi3d.f
        -:    0:Graph:./results\3d\adi3d\adi3d.gcno
        -:    0:Data:./results\3d\adi3d\adi3d.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 95%
        1:    1:       program adi
        -:    2:       integer nx, ny, nz, itmax
        -:    3:       double precision eps, relax, maxeps
        -:    4:       double precision startt, endt, dvtime
        -:    5:       parameter(nx=384, ny=384, nz=384, maxeps=0.01, itmax=100)
        -:    6:       double precision a(nx, ny, nz)
        -:    7:!DVM$  DISTRIBUTE(BLOCK, BLOCK, BLOCK) :: a
        1:    8:       call init(a, nx, ny, nz)
call    0 returned 100%
        -:    9:!DVM$  BARRIER
        1:   10:       startt = 0
      101:   11:       do it = 1, itmax
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      100:   12:         eps=0.D0
        -:   13:!DVM$    ACTUAL(eps)
        -:   14:!DVM$    REGION
        -:   15:!DVM$    PARALLEL(k, j, i) ON a(i, j, k), ACROSS(a(1:1, 0:0, 0:0))
    38300:   16:         do k = 2, nz - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
 14630700:   17:           do j = 2, ny - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5588927400:   18:             do i = 2, nx - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5588889200:   19:               a(i, j, k) = (a(i-1, j, k) + a(i+1, j, k)) / 2
        -:   20:             enddo
        -:   21:           enddo
        -:   22:         enddo
        -:   23:!DVM$    PARALLEL(k, j, i) ON a(i, j, k), ACROSS(a(0:0, 1:1, 0:0))
    38300:   24:         do k = 2, nz - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
 14630700:   25:           do j = 2, ny - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5588927400:   26:             do i = 2, nx - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5588889200:   27:               a(i, j, k) = (a(i, j-1, k) + a(i, j+1, k)) / 2
        -:   28:             enddo
        -:   29:           enddo
        -:   30:         enddo
        -:   31:!DVM$    PARALLEL(k, j, i) ON a(i, j, k), ACROSS(a(0:0, 0:0, 1:1))
        -:   32:!DVM$>, REDUCTION(MAX(eps))
    38300:   33:         do k = 2, nz - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
 14630700:   34:           do j = 2, ny - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
5588927400:   35:             do i = 2, nx - 1
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:   36:               eps = max(eps, abs(a(i, j, k) -
5574296800:   37:     >                  (a(i,j,k-1) + a(i,j,k+1)) / 2))
5588889200:   38:               a(i, j, k) = (a(i, j, k-1) + a(i, j, k+1)) / 2
        -:   39:             enddo
        -:   40:           enddo
        -:   41:         enddo
        -:   42:!DVM$    END REGION
        -:   43:!DVM$    GET_ACTUAL(eps)
      100:   44:         print 200, it, eps
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        -:   45:200      format (' IT = ', i4, '   EPS = ', e14.7)
      101:   46:         if (eps .lt. maxeps) exit
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   47:       enddo
        -:   48:!DVM$  BARRIER
        1:   49:       endt = 0
        -:   50:
        1:   51:       print *, 'ADI Benchmark Completed.'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1:   52:       print 201, nx, ny, nz
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
        -:   53:201    format (' Size            = ', i4, ' x ', i4, ' x ', i4)
        1:   54:       print 202, itmax
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   55:202    format (' Iterations      =       ', i12)
        1:   56:       print 203, endt - startt
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   57:203    format (' Time in seconds =       ', f12.2)
        1:   58:       print *, 'Operation type  =   double precision'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1:   59:       if (abs(eps - 0.07249074) .lt. 1.0e-6) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   60:         print *, 'Verification    =         SUCCESSFUL'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   61:       else
    #####:   62:         print *, 'Verification    =       UNSUCCESSFUL'
call    0 never executed
call    1 never executed
call    2 never executed
        -:   63:       endif
        -:   64:
        1:   65:       print *, 'END OF ADI Benchmark'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   66:       end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   67:
function init_ called 1 returned 100% blocks executed 100%
        1:   68:       subroutine init(a, nx, ny, nz)
        -:   69:       double precision a(nx, ny, nz)
        -:   70:!DVM$  INHERIT a
        -:   71:       integer nx, ny, nz
        -:   72:!DVM$  REGION OUT(a)
        -:   73:!DVM$  PARALLEL(k, j, i) ON a(i, j, k)
      385:   74:       do k = 1, nz
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
   147841:   75:         do j = 1, ny
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
 56770944:   76:           do i = 1, nx
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
        -:   77:             if(k.eq.1 .or. k.eq.nz .or. j.eq.1 .or. j.eq.ny .or.
 56770560:   78:     >          i.eq.1 .or. i.eq.nx) then
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 1%
branch  4 taken 100% (fallthrough)
branch  5 taken 1%
branch  6 taken 100% (fallthrough)
branch  7 taken 1%
branch  8 taken 100% (fallthrough)
branch  9 taken 1%
branch 10 taken 1% (fallthrough)
branch 11 taken 100%
        -:   79:               a(i, j, k) = 10.*(i-1)/(nx-1) + 10.*(j-1)/(ny-1)
   880136:   80:     >                      + 10.*(k-1)/(nz-1)
        -:   81:             else
 55742968:   82:               a(i, j, k) = 0.D0
        -:   83:             endif
        -:   84:           enddo
        -:   85:         enddo
        -:   86:       enddo
        -:   87:!DVM$  END REGION
        1:   88:       end
