        -:    0:Source:results/3d/acr32/acr32.f
        -:    0:Graph:./results\3d\acr32\acr32.gcno
        -:    0:Data:./results\3d\acr32\acr32.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program ACR32
        -:    2:
        -:    3:c    TESTING OF THE ACROSS CLAUSE'.       
        -:    4:c    DISTRIBUTED ARRAY A(N,M,K) IS TO HAVE DIFFERENT 
        -:    5:c    FLOW-DEP-LENGTH ON BOTH SIDES      
        -:    6:
        1:    7:      print *,'===START OF ACR32========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    8:C --------------------------------------------------
        1:    9:      call acr3201
call    0 returned 100%
        -:   10:C --------------------------------------------------
        1:   11:      call acr3202
call    0 returned 100%
        -:   12:C --------------------------------------------------
        1:   13:      call acr3203
call    0 returned 100%
        -:   14:C -------------------------------------------------
        1:   15:      call acr3204
call    0 returned 100%
        -:   16:C -------------------------------------------------
        1:   17:      call acr3205
call    0 returned 100%
        -:   18:C -------------------------------------------------
        1:   19:      call acr3206
call    0 returned 100%
        -:   20:C --------------------------------------------------
        1:   21:      call acr3207
call    0 returned 100%
        -:   22:C --------------------------------------------------
        1:   23:      call acr3208
call    0 returned 100%
        -:   24:C----------------------------------------------------
        1:   25:      call acr3209
call    0 returned 100%
        -:   26:C----------------------------------------------------
        -:   27:
        -:   28:C
        -:   29:C
        1:   30:      print *,'=== END OF ACR32 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   31:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   32:C ---------------------------------------------ACR3201
function acr3201_ called 1 returned 100% blocks executed 91%
        1:   33:      subroutine acr3201    
        -:   34:      integer, parameter :: N = 16,M=8,K=8, NL=1000
        1:   35:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:   36:      integer nloopi,nloopj,nloopii
        -:   37:      character*7 tname 
        -:   38:!dvm$ distribute A(*,BLOCK,BLOCK)     
        1:   39:      tname='ACR3201'
       1*:   40:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:   41:	        
        4:   42:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:   43:      NNL=NL    
        3:   44:      call serial3(C,N,M,K,NNL)
       45:   45:      do i=2,N-1
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
      297:   46:       do j=2,M-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1806:   47:         do ii=2,K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   48:          C(i,j,ii) = C(i+1,j,ii)+C(i,j+1,ii)+C(i,j,ii+1)+C(i-1,j,ii)+
     1764:   49:     *C(i,j-1,ii)+ C(i,j,ii-1)
        -:   50:         enddo 
        -:   51:       enddo
        -:   52:      enddo
        -:   53:
       27:   54:      nloopi=NL
        -:   55:      nloopj=NL
        -:   56:      nloopii=NL
        -:   57:
        -:   58:!dvm$ actual (nloopi,nloopj,nloopii,C)
        -:   59:!dvm$ region inout (C) 
        -:   60:
        -:   61:
        -:   62:!dvm$ parallel (ii,j,i) on A(i,j,ii)
       27:   63:      do ii=1,K
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      219:   64:        do j=1,M
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     3288:   65:         do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     3264:   66:          A(i,j,ii) = NL+i+j+ii
        -:   67:         enddo
        -:   68:        enddo
        -:   69:      enddo
        -:   70: 
        -:   71:!dvm$ parallel (ii,j,i) on A(i,j,ii),across(A(1:1,1:1,1:1)),
        -:   72:!dvm$*stage(iloop)
       21:   73:      do ii=2,K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:   74:       do j=2,M-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1638:   75:         do i=2,N-1
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   76:          A(i,j,ii)=A(i+1,j,ii)+A(i,j+1,ii)+A(i,j,ii+1)+A(i-1,j,ii)+
     1620:   77:     *A(i,j-1,ii)+ A(i,j,ii-1)
        -:   78:         enddo 
        -:   79:       enddo
        -:   80:      enddo
        -:   81:  
        -:   82:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:   83:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
       22:   84:      do ii=2,K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:   85:       do j=2,M-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1638:   86:         do i=2,N-1       
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     1620:   87:          if (A(i,j,ii).ne.C(i,j,ii)) then         
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:           nloopi=min(nloopi,i)
        -:   89:           nloopj=min(nloopj,j)
        -:   90:           nloopii=min(nloopii,ii)
        -:   91:          endif
        -:   92:         enddo
        -:   93:        enddo
        -:   94:      enddo
        -:   95:
        -:   96:!dvm$ end region
        -:   97:!dvm$ get_actual (nloopi)
        -:   98:      enddo
        1:   99:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  100:       call ansyes(tname)
call    0 returned 100%
        -:  101:      else
    #####:  102:       call ansno(tname)
call    0 never executed
        -:  103:      endif
       1*:  104:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  105:      end
        -:  106:C ---------------------------------------------ACR3202     
function acr3202_ called 1 returned 100% blocks executed 91%
        1:  107:      subroutine acr3202
        -:  108:      integer, parameter :: N = 16,M=10,K=10, NL=1000
        1:  109:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:  110:      integer nloopi,nloopj,nloopii
        -:  111:      character*7 tname 
        -:  112:!dvm$ distribute A(BLOCK,*,BLOCK)   
        -:  113:!dvm$ shadow(2:2,2:2,2:2) :: A     
        1:  114:      tname='ACR3202'
       1*:  115:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  116:	        
        4:  117:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  118:      NNL=NL    
        3:  119:      call serial3(C,N,M,K,NNL)
       39:  120:      do i=3,N-2
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
      255:  121:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:  122:        do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:  123:         C(i,j,ii)=C(i+2,j,ii)+C(i,j-2,ii)  +
        -:  124:     *            C(i,j,ii-1)+C(i-1,j,ii) +
        -:  125:     *            C(i+1,j,ii)+C(i,j-1,ii) +
     1512:  126:     *            C(i,j+2,ii)+C(i,j,ii+2)  
        -:  127:
        -:  128:        enddo
        -:  129:       enddo
        -:  130:      enddo
       33:  131:      nloopi=NL
        -:  132:      nloopj=NL
        -:  133:      nloopii=NL
        -:  134:
        -:  135:!dvm$ actual (nloopi,nloopj,nloopii,C)
        -:  136:!dvm$ region inout (C),out (A) 
        -:  137:
        -:  138:
        -:  139:!dvm$ parallel (ii,j,i) on A(i,j,ii)
       33:  140:      do ii=1,K
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  141:        do j=1,M
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     5130:  142:         do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     5100:  143:          A(i,j,ii) = NL+i+j+ii
        -:  144:         enddo
        -:  145:        enddo
        -:  146:      enddo
        -:  147: 
        -:  148:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  149:!dvm$*across(A(1:2,2:2,1:2)),
        -:  150:!dvm$*stage(iloop)
       21:  151:      do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:  152:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1422:  153:         do i=3,N-2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -:  154:          A(i,j,ii)=A(i+2,j,ii)+A(i,j-2,ii)  +
        -:  155:     *            A(i,j,ii-1)+A(i-1,j,ii) +
        -:  156:     *            A(i+1,j,ii)+A(i,j-1,ii) +
     1404:  157:     *            A(i,j+2,ii)+A(i,j,ii+2)  
        -:  158:         enddo 
        -:  159:       enddo
        -:  160:      enddo
        -:  161:  
        -:  162:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  163:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
       22:  164:      do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:  165:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1422:  166:        do i=3,N-2       
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
     1404:  167:          if (A(i,j,ii).ne.C(i,j,ii)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  168:           nloopi=min(nloopi,i)
        -:  169:           nloopj=min(nloopj,j)
        -:  170:           nloopii=min(nloopii,ii)         
        -:  171:          endif
        -:  172:        enddo
        -:  173:       enddo
        -:  174:      enddo
        -:  175:!dvm$ end region
        -:  176:!dvm$ get_actual (nloopi)
        -:  177:      enddo
        -:  178:
        1:  179:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  180:       call ansyes(tname)
call    0 returned 100%
        -:  181:      else
    #####:  182:       call ansno(tname)
call    0 never executed
        -:  183:      endif
       1*:  184:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  185:      end
        -:  186:C ---------------------------------------------ACR3203     
function acr3203_ called 1 returned 100% blocks executed 91%
        1:  187:      subroutine acr3203     
        -:  188:      integer, parameter :: N = 16,M=10,K=10, NL=1000
        1:  189:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:  190:      integer nloopi,nloopj,nloopii
        -:  191:      character*7 tname 
        -:  192:!dvm$ distribute A(BLOCK,BLOCK,*)   
        -:  193:!dvm$ shadow(2:2,2:2,2:2) :: A     
        1:  194:      tname='ACR3203'
       1*:  195:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  196:	        
        4:  197:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  198:      NNL=NL    
        3:  199:      call serial3(C,N,M,K,NNL)
       39:  200:      do i=3,N-2
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
      255:  201:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:  202:        do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:  203:         C(i,j,ii) =C(i+2,j,ii)+C(i,j+2,ii)+C(i,j,ii+2)+
        -:  204:     *              C(i,j-2,ii)+ C(i,j-1,ii)+C(i+1,j,ii)+
     1512:  205:     *              C(i,j+1,ii)+C(i,j,ii+1)
        -:  206:        enddo
        -:  207:       enddo
        -:  208:      enddo
       33:  209:      nloopi=NL
        -:  210:      nloopj=NL
        -:  211:      nloopii=NL
        -:  212:
        -:  213:!dvm$ actual (nloopi,nloopj,nloopii)
        -:  214:!dvm$ region in (C) 
        -:  215:
        -:  216:
        -:  217:!dvm$ parallel (ii,j,i) on A(i,j,ii)
       33:  218:      do ii=1,K
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  219:        do j=1,M
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     5130:  220:         do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     5100:  221:          A(i,j,ii) = NL+i+j+ii
        -:  222:         enddo
        -:  223:        enddo
        -:  224:      enddo 
        -:  225:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  226:!dvm$*across(A(0:2,2:2,0:2)),
        -:  227:!dvm$*stage(iloop)
       21:  228:      do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:  229:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1422:  230:         do i=3,N-2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -:  231:          A(i,j,ii) =A(i+2,j,ii)+A(i,j+2,ii)+A(i,j,ii+2)+
        -:  232:     *              A(i,j-2,ii)+ A(i,j-1,ii)+A(i+1,j,ii)+
     1404:  233:     *              A(i,j+1,ii)+A(i,j,ii+1)
        -:  234:         enddo 
        -:  235:       enddo
        -:  236:      enddo
        -:  237:  
        -:  238:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  239:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
       22:  240:      do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:  241:        do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1422:  242:         do i=3,N-2       
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
     1404:  243:          if (A(i,j,ii).ne.C(i,j,ii)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  244:           nloopi=min(nloopi,i)
        -:  245:           nloopj=min(nloopj,j)
        -:  246:           nloopii=min(nloopii,ii)        
        -:  247:          endif
        -:  248:         enddo
        -:  249:        enddo
        -:  250:      enddo
        -:  251:
        -:  252:!dvm$ end region
        -:  253:!dvm$ get_actual (nloopi)
        -:  254:      enddo
        -:  255:
        1:  256:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  257:       call ansyes(tname)
call    0 returned 100%
        -:  258:      else
    #####:  259:       call ansno(tname)
call    0 never executed
        -:  260:      endif
       1*:  261:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  262:      end
        -:  263:C ---------------------------------------------ACR3204     
function acr3204_ called 1 returned 100% blocks executed 91%
        1:  264:      subroutine acr3204     
        -:  265:      integer, parameter :: N = 16,M=10,K=10, NL=1000
        1:  266:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:  267:      integer nloopi,nloopj,nloopii
        -:  268:      character*7 tname 
        -:  269:!dvm$ distribute A(*,BLOCK,BLOCK)   
        -:  270:!dvm$ shadow(2:2,2:2,2:2) :: A     
        1:  271:      tname='ACR3204'     
       1*:  272:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  273:	        
        4:  274:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  275:      NNL=NL    
        3:  276:      call serial3(C,N,M,K,NNL)
       39:  277:      do i=3,N-2
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
      255:  278:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:  279:        do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:  280:         C(i,j,ii) =C(i+2,j,ii)+C(i,j,ii-2)+
        -:  281:     *C(i-2,j,ii)+ C(i,j-2,ii)+C(i-1,j,ii)+C(i,j-1,ii)+
     1512:  282:     *C(i,j,ii-1)+C(i+1,j,ii)
        -:  283:        enddo
        -:  284:       enddo
        -:  285:      enddo
       33:  286:      nloopi=NL
        -:  287:      nloopj=NL
        -:  288:      nloopii=NL
        -:  289:
        -:  290:!dvm$ actual (nloopi,nloopj,nloopii,C)
        -:  291:!dvm$ region 
        -:  292:
        -:  293:
        -:  294:!dvm$ parallel (ii,j,i) on A(i,j,ii)
       33:  295:      do ii=1,K
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  296:        do j=1,M
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     5130:  297:         do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     5100:  298:          A(i,j,ii) = NL+i+j+ii
        -:  299:         enddo
        -:  300:        enddo
        -:  301:      enddo
        -:  302: 
        -:  303:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  304:!dvm$*across(A(2:2,2:0,2:0)),
        -:  305:!dvm$*stage(iloop)
       21:  306:      do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:  307:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1422:  308:         do i=3,N-2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -:  309:         A(i,j,ii) =A(i+2,j,ii)+A(i,j,ii-2)+
        -:  310:     *A(i-2,j,ii)+ A(i,j-2,ii)+A(i-1,j,ii)+A(i,j-1,ii)+
     1404:  311:     *A(i,j,ii-1)+A(i+1,j,ii)
        -:  312:         enddo 
        -:  313:       enddo
        -:  314:      enddo
        -:  315:  
        -:  316:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  317:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
       22:  318:      do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:  319:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1422:  320:        do i=3,N-2       
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
     1404:  321:          if (A(i,j,ii).ne.C(i,j,ii)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  322:           nloopi=min(nloopi,i)
        -:  323:           nloopj=min(nloopj,j)
        -:  324:           nloopii=min(nloopii,ii)
        -:  325:          endif
        -:  326:        enddo
        -:  327:       enddo
        -:  328:      enddo
        -:  329:
        -:  330:!dvm$ end region
        -:  331:!dvm$ get_actual (nloopi)
        -:  332:      enddo
        -:  333:
        1:  334:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  335:       call ansyes(tname)
call    0 returned 100%
        -:  336:      else
    #####:  337:       call ansno(tname)
call    0 never executed
        -:  338:      endif
       1*:  339:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  340:      end
        -:  341:C ---------------------------------------------ACR3205     
function acr3205_ called 1 returned 100% blocks executed 91%
        1:  342:      subroutine acr3205
        -:  343:      integer, parameter :: N = 16,M=10,K=10, NL=1000
        1:  344:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:  345:      integer nloopi,nloopj,nloopii
        -:  346:      character*7 tname 
        -:  347:!dvm$ distribute A(BLOCK,*,BLOCK)   
        -:  348:!dvm$ shadow(0:2,2:2,0:2) :: A     
        1:  349:      tname='ACR3205'     
       1*:  350:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  351:	        
        4:  352:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  353:      NNL=NL    
        3:  354:      call serial3(C,N,M,K,NNL)
       39:  355:      do i=3,N-2
call    0 returned 100%
branch  1 taken 92% (fallthrough)
branch  2 taken 8%
      255:  356:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:  357:        do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:  358:         C(i,j,ii) =C(i+2,j,ii)+C(i,j+2,ii)+C(i,j,ii+2)+
        -:  359:     *   C(i,j-2,ii)+C(i,j-1,ii)+C(i+1,j,ii)+C(i,j+1,ii)+
     1512:  360:     *   C(i,j,ii+1)
        -:  361:        enddo
        -:  362:       enddo
        -:  363:      enddo
       33:  364:      nloopi=NL
        -:  365:      nloopj=NL
        -:  366:      nloopii=NL
        -:  367:
        -:  368:!dvm$ actual (nloopi,nloopj,nloopii,C)
        -:  369:!dvm$ region inout (C) 
        -:  370:
        -:  371:
        -:  372:!dvm$ parallel (ii,j,i) on A(i,j,ii)
       33:  373:      do ii=1,K
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  374:        do j=1,M
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     5130:  375:         do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     5100:  376:          A(i,j,ii) = NL+i+j+ii
        -:  377:         enddo
        -:  378:        enddo
        -:  379:      enddo
        -:  380: 
        -:  381:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  382:!dvm$*across(A(0:2,2:2,0:2)),
        -:  383:!dvm$*stage(iloop)
       21:  384:      do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:  385:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1422:  386:         do i=3,N-2
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -:  387:          A(i,j,ii) =A(i+2,j,ii)+A(i,j+2,ii)+A(i,j,ii+2)+
        -:  388:     *   A(i,j-2,ii)+A(i,j-1,ii)+A(i+1,j,ii)+A(i,j+1,ii)+
     1404:  389:     *   A(i,j,ii+1)
        -:  390:         enddo 
        -:  391:       enddo
        -:  392:      enddo
        -:  393:  
        -:  394:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  395:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
       22:  396:      do ii=3,K-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      129:  397:       do j=3,M-2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1422:  398:        do i=3,N-2       
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
     1404:  399:          if (A(i,j,ii).ne.C(i,j,ii)) then         
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  400:           nloopi=min(nloopi,i)
        -:  401:           nloopj=min(nloopj,j)
        -:  402:           nloopii=min(nloopii,ii)
        -:  403:          endif
        -:  404:        enddo
        -:  405:       enddo
        -:  406:      enddo
        -:  407:!dvm$ end region
        -:  408:!dvm$ get_actual (nloopi)
        -:  409:      enddo
        1:  410:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  411:       call ansyes(tname)
call    0 returned 100%
        -:  412:      else
    #####:  413:       call ansno(tname)
call    0 never executed
        -:  414:      endif
       1*:  415:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  416:      end
        -:  417:
        -:  418:C --------------------------------------------ACR3206  
function acr3206_ called 1 returned 100% blocks executed 91%
        1:  419:      subroutine acr3206   
        -:  420:      integer, parameter :: N = 16,M=16,K=16, NL=1000
        1:  421:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:  422:      integer nloopi,nloopj,nloopii
        -:  423:      character*7 tname 
        -:  424:!dvm$ distribute A(BLOCK,BLOCK,*)   
        -:  425:!dvm$ shadow(3:3,3:3,3:3) :: A     
        1:  426:      tname='ACR3206'     
       1*:  427:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  428:	        
        4:  429:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  430:      NNL=NL    
        3:  431:      call serial3(C,N,M,K,NNL)
       33:  432:      do i=4,N-3
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
      333:  433:       do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3330:  434:         do ii=4,K-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:  435:          C(i,j,ii) = C(i+3,j,ii)+C(i,j+3,ii)+C(i,j,ii+3)+
        -:  436:     *               C(i-3,j,ii)+C(i,j-3,ii)+C(i,j,ii-3)+
        -:  437:     *               C(i+2,j,ii)+C(i,j+2,ii)+C(i,j,ii+2)+
        -:  438:     *               C(i-2,j,ii)+C(i,j-2,ii)+C(i,j,ii-2)+
        -:  439:     *               C(i+1,j,ii)+C(i,j+1,ii)+C(i,j,ii+1)+
     3300:  440:     *               C(i-1,j,ii)+C(i,j-1,ii)+C(i,j,ii-1)
        -:  441:         enddo 
        -:  442:       enddo
        -:  443:      enddo
        -:  444:
       51:  445:      nloopi=NL
        -:  446:      nloopj=NL
        -:  447:      nloopii=NL
        -:  448:
        -:  449:!dvm$ actual (nloopi,nloopj,nloopii,C)
        -:  450:!dvm$ region inout (C) 
        -:  451:
        -:  452:!dvm$ parallel (ii,j,i) on A(i,j,ii)
       51:  453:      do ii=1,K
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      819:  454:        do j=1,M
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    13104:  455:         do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    13056:  456:          A(i,j,ii) = NL+i+j+ii
        -:  457:         enddo
        -:  458:        enddo
        -:  459:      enddo
        -:  460: 
        -:  461:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  462:!dvm$*across(A(3:3,3:3,3:3)),
        -:  463:!dvm$*stage(iloop)
       33:  464:      do ii=4,K-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  465:       do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3330:  466:         do i=4,N-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:  467:          A(i,j,ii) = A(i+3,j,ii)+A(i,j+3,ii)+A(i,j,ii+3)+
        -:  468:     *               A(i-3,j,ii)+A(i,j-3,ii)+A(i,j,ii-3)+
        -:  469:     *               A(i+2,j,ii)+A(i,j+2,ii)+A(i,j,ii+2)+
        -:  470:     *               A(i-2,j,ii)+A(i,j-2,ii)+A(i,j,ii-2)+
        -:  471:     *               A(i+1,j,ii)+A(i,j+1,ii)+A(i,j,ii+1)+
     3300:  472:     *               A(i-1,j,ii)+A(i,j-1,ii)+A(i,j,ii-1)
        -:  473:         enddo 
        -:  474:       enddo
        -:  475:      enddo
        -:  476:
        -:  477:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  478:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
       34:  479:      do ii=4,K-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  480:       do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3330:  481:        do i=4,N-3    
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3300:  482:          if (A(i,j,ii).ne.C(i,j,ii)) then         
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  483:           nloopi=min(nloopi,i)
        -:  484:           nloopj=min(nloopj,j)
        -:  485:           nloopii=min(nloopii,ii)
        -:  486:          endif
        -:  487:        enddo
        -:  488:       enddo
        -:  489:      enddo
        -:  490:
        -:  491:!dvm$ end region
        -:  492:!dvm$ get_actual (nloopi)
        -:  493:      enddo
        -:  494:
        1:  495:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  496:       call ansyes(tname)
call    0 returned 100%
        -:  497:      else
    #####:  498:       call ansno(tname)
call    0 never executed
        -:  499:      endif
       1*:  500:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  501:      end
        -:  502:           
        -:  503:         
        -:  504:C --------------------------------------------ACR3207  
function acr3207_ called 1 returned 100% blocks executed 91%
        1:  505:      subroutine acr3207   
        -:  506:      integer, parameter :: N = 16,M=16,K=16, NL=1000
        1:  507:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:  508:      integer nloopi,nloopj,nloopii
        -:  509:      character*7 tname 
        -:  510:!dvm$ distribute A(*,BLOCK,BLOCK)   
        -:  511:!dvm$ shadow(3:3,0:3,3:0) :: A     
        1:  512:      tname='ACR3207'     
       1*:  513:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  514:	        
        4:  515:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  516:      NNL=NL    
        3:  517:      call serial3(C,N,M,K,NNL)
       33:  518:      do i=4,N-3
call    0 returned 100%
branch  1 taken 91% (fallthrough)
branch  2 taken 9%
      333:  519:       do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3330:  520:         do ii=4,K-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:  521:          C(i,j,ii) = C(i+3,j,ii)+C(i,j+3,ii)+C(i-3,j,ii)+
        -:  522:     *               C(i,j,ii-3)+C(i+2,j,ii)+C(i,j+2,ii)+
        -:  523:     *               C(i-2,j,ii)+C(i,j,ii-2)+
        -:  524:     *               C(i+1,j,ii)+C(i,j+1,ii)+C(i+1,j,ii)+
     3300:  525:     *               C(i,j+1,ii)+C(i-1,j,ii)+C(i,j,ii-1) 
        -:  526:         enddo 
        -:  527:       enddo
        -:  528:      enddo
        -:  529:
       51:  530:      nloopi=NL
        -:  531:      nloopj=NL
        -:  532:      nloopii=NL
        -:  533:
        -:  534:!dvm$ actual (nloopi,nloopj,nloopii,C)
        -:  535:!dvm$ region inout (C),out (A) 
        -:  536:
        -:  537:
        -:  538:!dvm$ parallel (ii,j,i) on A(i,j,ii)
       51:  539:      do ii=1,K
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      819:  540:        do j=1,M
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    13104:  541:         do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    13056:  542:          A(i,j,ii) = NL+i+j+ii
        -:  543:         enddo
        -:  544:        enddo
        -:  545:      enddo
        -:  546: 
        -:  547:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  548:!dvm$*across(A(3:3,0:3,3:0)),
        -:  549:!dvm$*stage(iloop)
       33:  550:      do ii=4,K-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  551:       do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3330:  552:         do i=4,N-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:  553:          A(i,j,ii) = A(i+3,j,ii)+A(i,j+3,ii)+A(i-3,j,ii)+
        -:  554:     *               A(i,j,ii-3)+A(i+2,j,ii)+A(i,j+2,ii)+
        -:  555:     *               a(i-2,j,ii)+A(i,j,ii-2)+
        -:  556:     *               A(i+1,j,ii)+A(i,j+1,ii)+A(i+1,j,ii)+
     3300:  557:     *               A(i,j+1,ii)+A(i-1,j,ii)+A(i,j,ii-1)   
        -:  558:         enddo
        -:  559:       enddo
        -:  560:      enddo
        -:  561:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  562:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
       34:  563:      do ii=4,K-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  564:       do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3330:  565:        do i=4,N-3    
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3300:  566:          if (A(i,j,ii).ne.C(i,j,ii)) then         
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  567:           nloopi=min(nloopi,i)
        -:  568:           nloopj=min(nloopj,j)
        -:  569:           nloopii=min(nloopii,ii)
        -:  570:          endif
        -:  571:        enddo
        -:  572:       enddo
        -:  573:      enddo
        -:  574:
        -:  575:!dvm$ end region
        -:  576:!dvm$ get_actual (nloopi)
        -:  577:      enddo
        -:  578:	  
        1:  579:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  580:       call ansyes(tname)
call    0 returned 100%
        -:  581:      else
    #####:  582:       call ansno(tname)
call    0 never executed
        -:  583:      endif
       1*:  584:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  585:      end
        -:  586:           
        -:  587:         
        -:  588:C --------------------------------------------ACR3208  
function acr3208_ called 1 returned 100% blocks executed 91%
        1:  589:      subroutine acr3208   
        -:  590:      integer, parameter :: N = 16,M=16,K=16, NL=1000
        1:  591:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:  592:      integer nloopi,nloopj,nloopii
        -:  593:      character*7 tname 
        -:  594:!dvm$ distribute A(BLOCK,*,BLOCK)   
        -:  595:!dvm$ shadow(0:3,0:3,0:3) :: A     
        1:  596:      tname='ACR3208'     
       1*:  597:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  598:	        
        4:  599:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  600:      NNL=NL    
        3:  601:      call serial3(C,N,M,K,NNL)
       42:  602:      do i=1,N-3
call    0 returned 100%
branch  1 taken 93% (fallthrough)
branch  2 taken 7%
      549:  603:       do j=1,M-3
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     7137:  604:         do ii=1,K-3
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:  605:          C(i,j,ii) = C(i+3,j,ii)+C(i,j+3,ii)+C(i,j,ii+3)+
        -:  606:     *               C(i+2,j,ii)+C(i,j+2,ii)+C(i,j,ii+2)+
     7098:  607:     *               C(i+1,j,ii)+C(i,j+1,ii)+C(i,j,ii+1) 
        -:  608:         enddo 
        -:  609:       enddo
        -:  610:      enddo
        -:  611:
       51:  612:      nloopi=NL
        -:  613:      nloopj=NL
        -:  614:      nloopii=NL
        -:  615:
        -:  616:!dvm$ actual (nloopi,nloopj,nloopii,C)
        -:  617:!dvm$ region  
        -:  618:
        -:  619:!dvm$ parallel (ii,j,i) on A(i,j,ii)
       51:  620:      do ii=1,K
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      819:  621:        do j=1,M
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    13104:  622:         do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    13056:  623:          A(i,j,ii) = NL+i+j+ii
        -:  624:         enddo
        -:  625:        enddo
        -:  626:      enddo
        -:  627: 
        -:  628:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  629:!dvm$*across(A(0:3,0:3,0:3)),
        -:  630:!dvm$*stage(iloop)
       42:  631:      do ii=1,K-3
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      549:  632:       do j=1,M-3
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
     7137:  633:        do i=1,N-3
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:  634:         A(i,j,ii) = A(i+3,j,ii)+A(i,j+3,ii)+A(i,j,ii+3)+
        -:  635:     *               A(i+2,j,ii)+A(i,j+2,ii)+A(i,j,ii+2)+
     7098:  636:     *               A(i+1,j,ii)+A(i,j+1,ii)+A(i,j,ii+1)    
        -:  637:         enddo 
        -:  638:       enddo
        -:  639:      enddo
        -:  640:  
        -:  641:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  642:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
       34:  643:      do ii=4,K-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      333:  644:       do j=4,M-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3330:  645:        do i=4,N-3    
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
     3300:  646:          if (A(i,j,ii).ne.C(i,j,ii)) then         
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  647:           nloopi=min(nloopi,i)
        -:  648:           nloopj=min(nloopj,j)
        -:  649:           nloopii=min(nloopii,ii)
        -:  650:          endif
        -:  651:        enddo
        -:  652:       enddo
        -:  653:      enddo
        -:  654:
        -:  655:!dvm$ end region
        -:  656:!dvm$ get_actual (nloopi)
        -:  657:      enddo
        -:  658:
        1:  659:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  660:       call ansyes(tname)
call    0 returned 100%
        -:  661:      else
    #####:  662:       call ansno(tname)
call    0 never executed
        -:  663:      endif
       1*:  664:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  665:      end                   
        -:  666:
        -:  667:C --------------------------------------------ACR3209  
function acr3209_ called 1 returned 100% blocks executed 91%
        1:  668:      subroutine acr3209   
        -:  669:      integer, parameter :: N = 58,M=58,K=58, NL=1000    
        1:  670:      integer,allocatable :: A(:,:,:), C(:,:,:)
        -:  671:      integer nloopi,nloopj,nloopii
        -:  672:      character*7 tname 
        -:  673:!dvm$ distribute A(BLOCK,BLOCK,*)   
        -:  674:!dvm$ shadow(11:11,11:11,11:11) :: A     
        1:  675:      tname='ACR3209'     
       1*:  676:      allocate (A(N,M,K), C(N,M,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  677:	        
        4:  678:      do iloop=0,2	 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  679:      NNL=NL    
        3:  680:      call serial3(C,N,M,K,NNL)
      111:  681:      do i=12,N-11
call    0 returned 100%
branch  1 taken 97% (fallthrough)
branch  2 taken 3%
     3999:  682:       do j=12,M-11
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
   143964:  683:         do ii=12,K-11
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:  684:          C(i,j,ii) = C(i+11,j,ii)+C(i,j+11,ii)+C(i,j,ii+11)+
        -:  685:     *               C(i-11,j,ii)+C(i,j-11,ii)+C(i,j,ii-11)+
        -:  686:     *               C(i+10,j,ii)+C(i,j+10,ii)+C(i,j,ii+10)+
        -:  687:     *               C(i-10,j,ii)+C(i,j-10,ii)+C(i,j,ii-10)+
        -:  688:     *               C(i-9,j,ii) +C(i,j-9,ii) +C(i,j,ii-9)+
   143856:  689:     *               C(i+9,j,ii) +C(i,j+9,ii) +C(i,j,ii+9)  
        -:  690:         enddo 
        -:  691:       enddo
        -:  692:      enddo
        -:  693:
      177:  694:      nloopi=NL
        -:  695:      nloopj=NL
        -:  696:      nloopii=NL
        -:  697:
        -:  698:!dvm$ actual (nloopi,nloopj,nloopii,C)
        -:  699:!dvm$ region inout (C),out (A) 
        -:  700:
        -:  701:
        -:  702:!dvm$ parallel (ii,j,i) on A(i,j,ii)
      177:  703:      do ii=1,K
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
    10269:  704:       do j=1,M
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
   595602:  705:         do i=1,N
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
   595428:  706:          A(i,j,ii) = NL+i+j+ii
        -:  707:         enddo
        -:  708:       enddo
        -:  709:      enddo
        -:  710: 
        -:  711:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  712:!dvm$*across(A(11:11,11:11,11:11)),
        -:  713:!dvm$*stage(iloop)
      111:  714:      do ii=12,K-11
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
     3999:  715:       do j=12,M-11
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
   143964:  716:        do i=12,N-11
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
        -:  717:         A(i,j,ii) = A(i+11,j,ii)+A(i,j+11,ii)+A(i,j,ii+11)+
        -:  718:     *               A(i-11,j,ii)+A(i,j-11,ii)+A(i,j,ii-11)+
        -:  719:     *               A(i+10,j,ii)+A(i,j+10,ii)+A(i,j,ii+10)+
        -:  720:     *               A(i-10,j,ii)+A(i,j-10,ii)+A(i,j,ii-10)+
        -:  721:     *               A(i-9,j,ii)+A(i,j-9,ii)+A(i,j,ii-9)+
   143856:  722:     *               A(i+9,j,ii)+A(i,j+9,ii)+A(i,j,ii+9)  
        -:  723:         enddo 
        -:  724:        enddo
        -:  725:      enddo
        -:  726:  
        -:  727:!dvm$ parallel (ii,j,i) on A(i,j,ii),
        -:  728:!dvm$*reduction( min( nloopi),min(nloopj),min(nloopii))
      160:  729:      do ii=4,K-3
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
     8271:  730:       do j=4,M-3
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
   430092:  731:        do i=4,N-3    
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
   429936:  732:          if (A(i,j,ii).ne.C(i,j,ii)) then         
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  733:           nloopi=min(nloopi,i)
        -:  734:           nloopj=min(nloopj,j)
        -:  735:           nloopii=min(nloopii,ii)
        -:  736:          endif
        -:  737:        enddo
        -:  738:       enddo
        -:  739:      enddo
        -:  740:
        -:  741:!dvm$ end region
        -:  742:!dvm$ get_actual (nloopi)
        -:  743:      enddo
        1:  744:      if (nloopi .eq.NL) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  745:       call ansyes(tname)
call    0 returned 100%
        -:  746:      else
    #####:  747:       call ansno(tname)
call    0 never executed
        -:  748:      endif
       1*:  749:      deallocate (A, C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:  750:      end
        -:  751:
        -:  752:C -----------------------------------------------         
function serial3_ called 27 returned 100% blocks executed 100%
       27:  753:      subroutine serial3(AR,N,M,K,NL)
        -:  754:      integer AR(N,M,K)
        -:  755:      integer NL 
      585:  756:      do i=1,N
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
    15285:  757:       do j=1,M
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
   659730:  758:        do ii=1,K
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
   659172:  759:         AR(i,j,ii) = NL+i+j+ii
        -:  760:        enddo
        -:  761:       enddo
        -:  762:      enddo
       27:  763:      end 
        -:  764:    
function ansyes_ called 9 returned 100% blocks executed 100%
        9:  765:      subroutine ansyes(name)
        -:  766:      character*7 name
        9:  767:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        9:  768:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  769:      subroutine ansno(name)
        -:  770:      character*7 name
    #####:  771:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  772:      end
