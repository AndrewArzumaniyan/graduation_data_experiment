        -:    0:Source:results/3d/paralplus34/paralplus34.f
        -:    0:Graph:./results\3d\paralplus34\paralplus34.gcno
        -:    0:Data:./results\3d\paralplus34\paralplus34.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program PARALLELPLUS34
        -:    2:
        -:    3:c    TESTING parallel CLAUSE .       
        -:    4:c    arrA4[BLOCK][*][ BLOCK][BLOCK] or arrA4[*][BLOCK][ BLOCK][BLOCK]  etc.
        -:    5:
        1:    6:      print *, '====START OF paralplus34====================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    7:C -------------------------------------------------
        -:    8:c 41     PARALLEL ON  arrA[i][2* j][k][3*l] stretching
        1:    9:       call paral41
call    0 returned 100%
        -:   10:C -------------------------------------------------
        -:   11:c 42     PARALLEL ON  arrA[i+2][ j][k][ l+3]  shift
        1:   12:       call paral42
call    0 returned 100%
        -:   13:C -------------------------------------------------
        -:   14:c 43     PARALLEL ON  arrA[i][ j][-k+8][- l+8]  reverse
        -:   15:c      call paral43
        -:   16:C -------------------------------------------------
        -:   17:c 44     PARALLEL ON  arrA[i][ j][2][ l]  
        -:   18:c                                               compression            !!
        1:   19:      call paral44
call    0 returned 100%
        -:   20:C -------------------------------------------------
        -:   21:c 45     PARALLEL ON  arrA[i][ j][ ][ k] 
        -:   22:c                                               replication            
        1:   23:      call paral45
call    0 returned 100%
        -:   24:C -------------------------------------------------
        -:   25:c 46     PARALLEL ON  arrA[i][ j][ ][3] 
        -:   26:c                                               compression and replication            
        1:   27:      call paral46
call    0 returned 100%
        -:   28:C -------------------------------------------------
        1:   29:      print *, '==== END OF paralplus34====================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   30:C
function main called 1 returned 100% blocks executed 100%
        1:   31:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   32:
        -:   33:C ----------------------------------------------------paral41
        -:   34:c 41 arrA4[BLOCK][*] [BLOCK] [BLOCK] 
        -:   35:c       PARALLEL ON  arrA[i][2* j][k][3*l] stretching      
        -:   36:
function paral41_ called 1 returned 100% blocks executed 83%
        1:   37:      subroutine paral41
        -:   38:      integer, parameter :: AN1=6,AN2=6,AN3=6,AN4=6
        -:   39:      integer, parameter :: NL=10000,ER=100000
        -:   40:c     parameters for PARALLEL ON  arrA[k1i*i+li][k2j*j+lj][k3n*n+ln][k4m*m+lm]                                               
        -:   41:      integer, parameter :: k1i=1,k2i=0,k3i=0,k4i=0,li=0
        -:   42:      integer, parameter :: k1j=0,k2j=2,k3j=0,k4j=0,lj=0
        -:   43:      integer, parameter :: k1n=0,k2n=0,k3n=1,k4n=0,ln=0
        -:   44:      integer, parameter :: k1m=0,k2m=0,k3m=0,k4m=3,lm=0
        -:   45:      character*11 tname
        1:   46:      integer, allocatable :: A4(:,:,:,:)
        -:   47:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,Avalue,Bvalue
        -:   48:               
        -:   49:!dvm$ distribute A4(BLOCK,*,BLOCK,BLOCK)    
        -:   50:
        1:   51:      tname='paral+3441'
       1*:   52:      allocate (A4(AN1,AN2,AN3,AN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   53:      erri= ER
        1:   54:      NNL=NL 
        -:   55:
        -:   56:!dvm$ actual(erri)
        -:   57:!dvm$ region local(A4)
        -:   58:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        7:   59:      do i=1,AN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       43:   60:          do j=1,AN2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      258:   61:             do n=1,AN3
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:   62:                do m=1,AN4
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1512:   63:                    A4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:   64:                enddo 
        -:   65:             enddo
        -:   66:          enddo
        -:   67:      enddo
        -:   68:
        -:   69:!dvm$ parallel (i,j,n,m) on A4(k1i*i+li,k2j*j+lj,k3n*n+ln,k4m*m+lm),
        -:   70:!dvm$*                                          reduction (min (erri))
        -:   71:!dvm$* , private(ia,ja,na,ma)
        7:   72:      do i=1,((AN1-li)/k1i)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       25:   73:          do j=1,((AN2-lj)/k2j)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      132:   74:            do n=1,((AN3-ln)/k3n)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      342:   75:              do m=1,((AN4-lm)/k4m)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      216:   76:                ia=k1i * i + li
      216:   77:                ja=k2j * j + lj
      216:   78:                na=k3n * n + ln
      216:   79:                ma=k4m * m + lm
      216:   80:                if (A4(ia,ja,na,ma).eq.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   81:     *             (ia*NL/10+ja*NL/100+na*NL/1000+ma)) 
      108:   82:     *          then     
        -:   83:                else
    #####:   84:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:   85:                endif 
        -:   86:              enddo
        -:   87:            enddo
        -:   88:          enddo
        -:   89:      enddo
        -:   90:!dvm$ end region   
        -:   91:!dvm$ get_actual(erri) 
        -:   92:     
        1:   93:      s=0
        1:   94:      cs=0		
        1:   95:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   96:     *     (s .eq. cs)) then     
        1:   97:          call ansyes(tname)
call    0 returned 100%
        -:   98:      else
    #####:   99:          call ansno(tname)
call    0 never executed
    #####:  100:           write (*,*) erri
call    0 never executed
call    1 never executed
call    2 never executed
        -:  101:c          print *,A4  
        -:  102:      endif 
       1*:  103:      deallocate (A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  104:
        1:  105:      end
        -:  106:
        -:  107:C ----------------------------------------------------paral42
        -:  108:c 42     PARALLEL ON  arrA[i+2][ j][k][ l+3]  shift
        -:  109:
function paral42_ called 1 returned 100% blocks executed 83%
        1:  110:      subroutine paral42
        -:  111:      integer, parameter :: AN1=6,AN2=6,AN3=6,AN4=6
        -:  112:      integer, parameter :: NL=10000,ER=100000
        -:  113:c     parameters for PARALLEL ON  arrA[k1i*i+li][k2j*j+lj][k3n*n+ln][k4m*m+lm]                                               
        -:  114:      integer, parameter :: k1i=1,k2i=0,k3i=0,k4i=0,li=2
        -:  115:      integer, parameter :: k1j=0,k2j=1,k3j=0,k4j=0,lj=0
        -:  116:      integer, parameter :: k1n=0,k2n=0,k3n=1,k4n=0,ln=0
        -:  117:      integer, parameter :: k1m=0,k2m=0,k3m=0,k4m=1,lm=3
        -:  118:      character*11 tname
        1:  119:      integer, allocatable :: A4(:,:,:,:)
        -:  120:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,Avalue,Bvalue
        -:  121:               
        -:  122:!dvm$ distribute A4(*,BLOCK,BLOCK,BLOCK)    
        -:  123:
        1:  124:      tname='paral+3442'
       1*:  125:      allocate (A4(AN1,AN2,AN3,AN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  126:      erri= ER
        1:  127:      NNL=NL 
        -:  128:
        -:  129:!dvm$ actual(erri)
        -:  130:!dvm$ region local(A4)
        -:  131:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        7:  132:      do i=1,AN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       43:  133:          do j=1,AN2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      258:  134:             do n=1,AN3
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:  135:                do m=1,AN4
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1512:  136:                    A4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:  137:                enddo 
        -:  138:             enddo
        -:  139:          enddo
        -:  140:      enddo
        -:  141:
        -:  142:!dvm$ parallel (i,j,n,m) on A4(k1i*i+li,k2j*j+lj,k3n*n+ln,k4m*m+lm),
        -:  143:!dvm$*                                          reduction (min (erri))
        -:  144:!dvm$* , private(ia,ja,na,ma)
        5:  145:      do i=1,((AN1-li)/k1i)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       29:  146:          do j=1,((AN2-lj)/k2j)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      172:  147:            do n=1,((AN3-ln)/k3n)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      600:  148:              do m=1,((AN4-lm)/k4m)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      432:  149:                ia=k1i * i + li
      432:  150:                ja=k2j * j + lj
      432:  151:                na=k3n * n + ln
      432:  152:                ma=k4m * m + lm
      432:  153:                if (A4(ia,ja,na,ma).eq.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  154:     *             (ia*NL/10+ja*NL/100+na*NL/1000+ma)) 
      144:  155:     *          then     
        -:  156:                else
    #####:  157:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  158:                endif 
        -:  159:              enddo
        -:  160:            enddo
        -:  161:          enddo
        -:  162:      enddo
        -:  163:!dvm$ end region   
        -:  164:!dvm$ get_actual(erri) 
        -:  165:     
        1:  166:      s=0
        1:  167:      cs=0		
        1:  168:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  169:     *     (s .eq. cs)) then     
        1:  170:          call ansyes(tname)
call    0 returned 100%
        -:  171:      else
    #####:  172:          call ansno(tname)
call    0 never executed
    #####:  173:           write (*,*) erri
call    0 never executed
call    1 never executed
call    2 never executed
        -:  174:c          print *,A4  
        -:  175:      endif 
       1*:  176:      deallocate (A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  177:
        1:  178:      end
        -:  179:
        -:  180:C ----------------------------------------------------paral43
        -:  181:c 43     PARALLEL ON  arrA[i][ j][-k+8][- l+8]  reverse
        -:  182:
function paral43_ called 0 returned 0% blocks executed 0%
    #####:  183:      subroutine paral43
        -:  184:      integer, parameter :: AN1=6,AN2=6,AN3=7,AN4=7
        -:  185:      integer, parameter :: NL=10000,ER=100000
        -:  186:c     parameters for PARALLEL ON  arrA[k1i*i+li][k2j*j+lj][k3n*n+ln][k4m*m+lm]                                               
        -:  187:      integer, parameter :: k1i=1,k2i=0,k3i=0,k4i=0,li=0
        -:  188:      integer, parameter :: k1j=0,k2j=1,k3j=0,k4j=0,lj=0
        -:  189:      integer, parameter :: k1n=0,k2n=0,k3n=-1,k4n=0,ln=8
        -:  190:      integer, parameter :: k1m=0,k2m=0,k3m=0,k4m=-1,lm=8
        -:  191:      character*11 tname
    #####:  192:      integer, allocatable :: A4(:,:,:,:)
        -:  193:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,Avalue,Bvalue
        -:  194:               
        -:  195:!dvm$ distribute A4(BLOCK,BLOCK,*,BLOCK)    
        -:  196:
    #####:  197:      tname='paral+3442'
    #####:  198:      allocate (A4(AN1,AN2,AN3,AN4))
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
    #####:  199:      erri= ER
    #####:  200:      NNL=NL 
        -:  201:
        -:  202:!dvm$ actual(erri)
        -:  203:!dvm$ region local(A4)
        -:  204:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
    #####:  205:      do i=1,AN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  206:          do j=1,AN2
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  207:             do n=1,AN3
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  208:                do m=1,AN4
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  209:                    A4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:  210:                enddo 
        -:  211:             enddo
        -:  212:          enddo
        -:  213:      enddo
        -:  214:
        -:  215:!dvm$ parallel (i,j,n,m) on A4(k1i*i+li,k2j*j+lj,k3n*n+ln,k4m*m+lm),
        -:  216:!dvm$*                                          reduction (min (erri))
        -:  217:!dvm$* , private(ia,ja,na,ma)
    #####:  218:      do i=1,((AN1-li)/k1i)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  219:          do j=1,((AN2-lj)/k2j)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  220:            do n=1,((AN3-ln)/k3n)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  221:              do m=1,((AN4-lm)/k4m)
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  222:                ia=k1i * i + li
    #####:  223:                ja=k2j * j + lj
    #####:  224:                na=k3n * n + ln
    #####:  225:                ma=k4m * m + lm
    #####:  226:                if (A4(ia,ja,na,ma).eq.
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  227:     *             (ia*NL/10+ja*NL/100+na*NL/1000+ma)) 
    #####:  228:     *          then     
        -:  229:                else
    #####:  230:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  231:                endif 
        -:  232:              enddo
        -:  233:            enddo
        -:  234:          enddo
        -:  235:      enddo
        -:  236:!dvm$ end region   
        -:  237:!dvm$ get_actual(erri) 
        -:  238:     
    #####:  239:      s=0
    #####:  240:      cs=0		
    #####:  241:      if ((erri .eq.ER) .and.
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  242:     *     (s .eq. cs)) then     
    #####:  243:          call ansyes(tname)
call    0 never executed
        -:  244:      else
    #####:  245:          call ansno(tname)
call    0 never executed
    #####:  246:           write (*,*) erri
call    0 never executed
call    1 never executed
call    2 never executed
        -:  247:c          print *,A4  
        -:  248:      endif 
    #####:  249:      deallocate (A4)
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
        -:  250:
    #####:  251:      end
        -:  252:
        -:  253:C ----------------------------------------------------paral44
        -:  254:c 44     PARALLEL ON  arrA[i][ j][2][ l]  
        -:  255:
function paral44_ called 1 returned 100% blocks executed 90%
        1:  256:      subroutine paral44
        -:  257:      integer, parameter :: AN1=6,AN2=6,AN3=6,AN4=6
        -:  258:      integer, parameter :: BN1=3,BN2=3,BN3=3,BN4=3
        -:  259:      integer, parameter :: NL=10000,ER=100000
        -:  260:c     parameters for PARALLEL ON  arrA[k1i*i+li][k2j*j+lj][ln][k4m*m+lm]                                               
        -:  261:      integer, parameter :: k1i=1,k2i=0,k3i=0,k4i=0,li=0
        -:  262:      integer, parameter :: k1j=0,k2j=1,k3j=0,k4j=0,lj=0
        -:  263:      integer, parameter :: k1n=0,k2n=0,k3n=0,k4n=0,ln=2
        -:  264:      integer, parameter :: k1m=0,k2m=0,k3m=0,k4m=1,lm=0
        -:  265:      character*11 tname
        1:  266:      integer, allocatable :: A4(:,:,:,:),B4(:,:,:,:)
        -:  267:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,Avalue,Bvalue
        -:  268:               
        -:  269:!dvm$ distribute A4(BLOCK,BLOCK,*,BLOCK)    
        -:  270:!dvm$ ALIGN B4(i,j,n,m) WITH A4(k1i*i+li,k2j*j+lj,ln,k4m*m+lm)
        -:  271:
        1:  272:      tname='paral+3444'
       1*:  273:      allocate (A4(AN1,AN2,AN3,AN4),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        4:  274:      erri= ER
        -:  275:      NNL=NL 
        -:  276:
        -:  277:!dvm$ actual(erri)
        -:  278:!dvm$ region local(A4,B4)
        -:  279:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m)
        4:  280:      do i=1,BN1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       13:  281:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       39:  282:             do n=1,BN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      117:  283:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      108:  284:                    B4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:  285:                enddo
        -:  286:             enddo
        -:  287:          enddo
        -:  288:      enddo
        -:  289:
        -:  290:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        7:  291:      do i=1,AN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       43:  292:          do j=1,AN2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      258:  293:             do n=1,AN3
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:  294:                do m=1,AN4
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1512:  295:                    A4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:  296:                enddo 
        -:  297:             enddo
        -:  298:          enddo
        -:  299:      enddo
        -:  300:
        -:  301:!dvm$ parallel (i,j,n,m) on A4(k1i*i+li,k2j*j+lj,ln,k4m*m+lm),
        -:  302:!dvm$*                                          reduction (min (erri))
        4:  303:      do i=1,BN1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       13:  304:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       39:  305:            do n=1,BN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      117:  306:              do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       81:  307:                if (B4(i,j,n,m).eq.(i*NL/10+j*NL/100+n*NL/1000+m)) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       27:  308:     *          then     
        -:  309:                else
    #####:  310:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  311:                endif 
        -:  312:              enddo
        -:  313:            enddo
        -:  314:          enddo
        -:  315:      enddo
        -:  316:!dvm$ end region   
        -:  317:!dvm$ get_actual(erri) 
        -:  318:     
        1:  319:      s=0
        1:  320:      cs=0		
        1:  321:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  322:     *     (s .eq. cs)) then     
        1:  323:          call ansyes(tname)
call    0 returned 100%
        -:  324:      else
    #####:  325:          call ansno(tname)
call    0 never executed
        -:  326:c           write (*,*) erri
        -:  327:c          print *,A4  
        -:  328:      endif 
       1*:  329:      deallocate (B4,A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  330:
        1:  331:      end
        -:  332:
        -:  333:C ----------------------------------------------------paral45
        -:  334:c 45     PARALLEL ON  arrA[i][ j][ ][ k] 
        -:  335:
function paral45_ called 1 returned 100% blocks executed 90%
        1:  336:      subroutine paral45
        -:  337:      integer, parameter :: AN1=6,AN2=6,AN3=6,AN4=6
        -:  338:      integer, parameter :: BN1=3,BN2=3,BN3=3,BN4=3
        -:  339:      integer, parameter :: NL=10000,ER=100000
        -:  340:c     parameters for PARALLEL ON  arrA[k1i*i+li][k2j*j+lj][][k4m*m+lm]                                               
        -:  341:      integer, parameter :: k1i=1,k2i=0,k3i=0,k4i=0,li=0
        -:  342:      integer, parameter :: k1j=0,k2j=1,k3j=0,k4j=0,lj=0
        -:  343:      integer, parameter :: k1n=0,k2n=0,k3n=0,k4n=0,ln=0
        -:  344:      integer, parameter :: k1m=0,k2m=0,k3m=0,k4m=1,lm=0
        -:  345:      character*11 tname
        1:  346:      integer, allocatable :: A4(:,:,:,:),B4(:,:,:,:)
        -:  347:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,Avalue,Bvalue
        -:  348:               
        -:  349:!dvm$ distribute A4(BLOCK,BLOCK,BLOCK,*)    
        -:  350:!dvm$ ALIGN B4(i,j,n,m) WITH A4(k1i*i+li,k2j*j+lj,*,k4m*m+lm)
        -:  351:
        1:  352:      tname='paral+3445'
       1*:  353:      allocate (A4(AN1,AN2,AN3,AN4),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        4:  354:      erri= ER
        -:  355:      NNL=NL 
        -:  356:
        -:  357:!dvm$ actual(erri)
        -:  358:!dvm$ region local(A4,B4)
        -:  359:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m)
        4:  360:      do i=1,BN1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       13:  361:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       39:  362:             do n=1,BN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      117:  363:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      108:  364:                    B4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:  365:                enddo
        -:  366:             enddo
        -:  367:          enddo
        -:  368:      enddo
        -:  369:
        -:  370:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        7:  371:      do i=1,AN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       43:  372:          do j=1,AN2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      258:  373:             do n=1,AN3
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:  374:                do m=1,AN4
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1512:  375:                    A4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:  376:                enddo 
        -:  377:             enddo
        -:  378:          enddo
        -:  379:      enddo
        -:  380:
        -:  381:!dvm$ parallel (i,j,n,m) on A4(k1i*i+li,k2j*j+lj,*,k4m*m+lm),
        -:  382:!dvm$*                                          reduction (min (erri))
        4:  383:      do i=1,BN1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       13:  384:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       39:  385:            do n=1,BN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      117:  386:              do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       81:  387:                if (B4(i,j,n,m).eq.(i*NL/10+j*NL/100+n*NL/1000+m)) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       27:  388:     *          then     
        -:  389:                else
    #####:  390:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  391:                endif 
        -:  392:              enddo
        -:  393:            enddo
        -:  394:          enddo
        -:  395:      enddo
        -:  396:!dvm$ end region   
        -:  397:!dvm$ get_actual(erri) 
        -:  398:     
        1:  399:      s=0
        1:  400:      cs=0		
        1:  401:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  402:     *     (s .eq. cs)) then     
        1:  403:          call ansyes(tname)
call    0 returned 100%
        -:  404:      else
    #####:  405:          call ansno(tname)
call    0 never executed
        -:  406:c           write (*,*) erri
        -:  407:c          print *,A4  
        -:  408:      endif 
       1*:  409:      deallocate (B4,A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  410:
        1:  411:      end
        -:  412:
        -:  413:C ----------------------------------------------------paral46
        -:  414:c 46     PARALLEL ON  arrA[i][ j][ ][3] 
        -:  415:
function paral46_ called 1 returned 100% blocks executed 90%
        1:  416:      subroutine paral46
        -:  417:      integer, parameter :: AN1=6,AN2=6,AN3=6,AN4=6
        -:  418:      integer, parameter :: BN1=3,BN2=3,BN3=3,BN4=3
        -:  419:      integer, parameter :: NL=10000,ER=100000
        -:  420:c     parameters for PARALLEL ON  arrA[k1i*i+li][k2j*j+lj][*][lm]                                               
        -:  421:      integer, parameter :: k1i=1,k2i=0,k3i=0,k4i=0,li=0
        -:  422:      integer, parameter :: k1j=0,k2j=1,k3j=0,k4j=0,lj=0
        -:  423:      integer, parameter :: k1n=0,k2n=0,k3n=0,k4n=0,ln=0
        -:  424:      integer, parameter :: k1m=0,k2m=0,k3m=0,k4m=0,lm=3
        -:  425:      character*11 tname
        1:  426:      integer, allocatable :: A4(:,:,:,:),B4(:,:,:,:)
        -:  427:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,Avalue,Bvalue
        -:  428:               
        -:  429:!dvm$ distribute A4(*,BLOCK,BLOCK,BLOCK)    
        -:  430:!dvm$ ALIGN B4(i,j,n,m) WITH A4(k1i*i+li,k2j*j+lj,*,lm)
        -:  431:
        1:  432:      tname='paral+3446'
       1*:  433:      allocate (A4(AN1,AN2,AN3,AN4),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        4:  434:      erri= ER
        -:  435:      NNL=NL 
        -:  436:
        -:  437:!dvm$ actual(erri)
        -:  438:!dvm$ region local(A4,B4)
        -:  439:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m)
        4:  440:      do i=1,BN1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       13:  441:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       39:  442:             do n=1,BN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      117:  443:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      108:  444:                    B4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:  445:                enddo
        -:  446:             enddo
        -:  447:          enddo
        -:  448:      enddo
        -:  449:
        -:  450:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        7:  451:      do i=1,AN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       43:  452:          do j=1,AN2
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      258:  453:             do n=1,AN3
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1548:  454:                do m=1,AN4
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
     1512:  455:                    A4(i,j,n,m) =i*NL/10+j*NL/100+n*NL/1000+m     
        -:  456:                enddo 
        -:  457:             enddo
        -:  458:          enddo
        -:  459:      enddo
        -:  460:
        -:  461:!dvm$ parallel (i,j,n,m) on A4(k1i*i+li,k2j*j+lj,*,lm),
        -:  462:!dvm$*                                          reduction (min (erri))
        4:  463:      do i=1,BN1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       13:  464:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       39:  465:            do n=1,BN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      117:  466:              do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       81:  467:                if (B4(i,j,n,m).eq.(i*NL/10+j*NL/100+n*NL/1000+m)) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       27:  468:     *          then     
        -:  469:                else
    #####:  470:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  471:                endif 
        -:  472:              enddo
        -:  473:            enddo
        -:  474:          enddo
        -:  475:      enddo
        -:  476:!dvm$ end region   
        -:  477:!dvm$ get_actual(erri) 
        -:  478:     
        1:  479:      s=0
        1:  480:      cs=0		
        1:  481:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  482:     *     (s .eq. cs)) then     
        1:  483:          call ansyes(tname)
call    0 returned 100%
        -:  484:      else
    #####:  485:          call ansno(tname)
call    0 never executed
        -:  486:c           write (*,*) erri
        -:  487:c          print *,A4  
        -:  488:      endif 
       1*:  489:      deallocate (B4,A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  490:
        1:  491:      end
        -:  492:
        -:  493:C -------------------------------------------------
function ansyes_ called 5 returned 100% blocks executed 100%
        5:  494:      subroutine ansyes(name)
        -:  495:      character*11 name
        5:  496:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        5:  497:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  498:      subroutine ansno(name)
        -:  499:      character*11 name
    #####:  500:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  501:      end
