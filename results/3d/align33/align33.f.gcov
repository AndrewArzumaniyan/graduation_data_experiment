        -:    0:Source:results/3d/align33/align33.f
        -:    0:Graph:./results\3d\align33\align33.gcno
        -:    0:Data:./results\3d\align33\align33.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program ALIGN33
        -:    2:
        -:    3:c    TESTING align CLAUSE .       
        -:    4:
        1:    5:      print *,'===START OF align33========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C --------------------------------------------------
        -:    7:c 331 arrA3[BLOCK][BLOCK] [BLOCK]  arrB3[][][]
        -:    8:c       ALIGN arrB[i][j][k] WITH arrA[i][ j][k] normal      
        1:    9:        call align331
call    0 returned 100%
        -:   10:C -------------------------------------------------
        -:   11:C
        1:   12:      print *,'=== END OF align33 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   13:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   14:
        -:   15:C ----------------------------------------------------align331
        -:   16:c 331 arrA3[BLOCK][BLOCK] [BLOCK]  arrB3[][][] 
        -:   17:c       ALIGN arrB[i][j][n] WITH arrA[i][ j][n] normal      
        -:   18:
function align331_ called 1 returned 100% blocks executed 91%
        1:   19:      subroutine align331
        -:   20:      integer, parameter :: AN1=5,AN2=5,AN3=5,BN1=2,BN2=2,BN3=2
        -:   21:      integer, parameter :: NL=10000,ER=100000
        -:   22:c     parameters for ALIGN arrB[i][j][n] WITH arrA[k1i*i+li][k2j*j+lj][k3n*n+ln]                                               
        -:   23:      integer, parameter :: k1i=1,k2i=0,k3i=0,li=0
        -:   24:      integer, parameter :: k1j=0,k2j=1,k3j=0,lj=0
        -:   25:      integer, parameter :: k1n=0,k2n=0,k3n=1,ln=0
        -:   26:      character*9 tname
        1:   27:      integer, allocatable :: A3(:,:,:),B3(:,:,:)
        -:   28:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,Avalue,Bvalue
        -:   29:               
        -:   30:!dvm$ distribute A3(BLOCK,BLOCK,BLOCK)    
        -:   31:!dvm$ ALIGN B3(i,j,n) WITH A3(k1i*i+li,k2j*j+lj,k3n*n+ln)
        -:   32:
        1:   33:      tname='align331'
       1*:   34:      allocate (A3(AN1,AN2,AN3),B3(BN1,BN2,BN3))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        3:   35:      erri= ER
        -:   36:      NNL=NL 
        3:   37:      s=0
        -:   38:      m=-1
        -:   39:
        -:   40:!dvm$ actual(erri,s)
        -:   41:!dvm$ region local(A3,B3)
        -:   42:!dvm$ parallel (i,j,n) on B3(i,j,n)
        3:   43:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        7:   44:          do  j=1,BN2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:   45:             do n=1,BN3
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       12:   46:                    B3(i,j,n) =0     
        -:   47:             enddo 
        -:   48:          enddo 
        -:   49:      enddo 
        -:   50:
        -:   51:!dvm$ parallel (i,j,n) on A3(i,j,n), private(ib,jb,nb)
        6:   52:      do i=1,AN1
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       31:   53:          do j=1,AN2
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      155:   54:            do n=1,AN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      125:   55:                A3(i,j,n) = i*NL/10+j*NL/100+n*NL/1000+m
        -:   56:                      if ( 
        -:   57:     *                  ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        -:   58:     *                  ((j-lj) .eq.(((j-lj)/k2j) *k2j)) .and.
        -:   59:     *                  ((n-ln) .eq.(((n-ln)/k3n) * k3n)) .and.
        -:   60:     *                  (((i-li)/k1i) .gt. 0)  .and.
        -:   61:     *                  (((j-lj)/k2j) .gt. 0)  .and.
        -:   62:     *                  (((n-ln)/k3n) .gt. 0)  .and.
        -:   63:     *                  (((i-li)/k1i) .le. BN1)  .and.
      125:   64:     *                  (((j-lj)/k2j) .le. BN2)  .and.
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
        -:   65:     *                  (((n-ln)/k3n) .le. BN3)  
       25:   66:     *                  )  then 
        8:   67:                        ib = (i-li)/k1i
        8:   68:                        jb = (j-lj)/k2j
        8:   69:                        nb = (n-ln)/k3n
        8:   70:                        B3(ib,jb,nb)=ib*NL/10+jb*NL/100+nb*NL/1000 
        -:   71:                      endif 
        -:   72:            enddo 
        -:   73:          enddo 
        -:   74:      enddo 
        -:   75:
        -:   76:!dvm$ parallel (i,j,n) on B3(i,j,n), reduction( min( erri ),sum(s) )
        3:   77:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        7:   78:          do j=1,BN2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:   79:            do n=1,BN3
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        8:   80:                  s = s + B3(i,j,n)
       12:   81:                  if (B3(i,j,n).eq.(i*NL/10+j*NL/100+n*NL/1000))then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   82:                  else
    #####:   83:                      erri = min(erri, i*NL/10 + j*NL/100+ n*NL/1000)
        -:   84:                  endif
        -:   85:            enddo 
        -:   86:          enddo 
        -:   87:      enddo 
        -:   88:!dvm$ end region
        -:   89:!dvm$ get_actual(erri,s)
        -:   90:  
        -:   91:      cs = 0              
        3:   92:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        7:   93:          do j=1,BN2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:   94:            do n=1,BN3
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       12:   95:                    cs = cs + i*NL/10 + j*NL/100+ n*NL/1000
        -:   96:            enddo 
        -:   97:          enddo 
        -:   98:      enddo 
        -:   99:     
        1:  100:      if ((erri .eq.ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  101:     *     (s .eq. cs)) then     
        1:  102:          call ansyes(tname)
call    0 returned 100%
        -:  103:      else
    #####:  104:          call ansno(tname)
call    0 never executed
        -:  105:c           write (*,*) erri,s,cs
        -:  106:c          print *,B3  
        -:  107:      endif 
       1*:  108:      deallocate (B3,A3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  109:
        1:  110:      end
        -:  111:
        -:  112:C -------------------------------------------------
function ansyes_ called 1 returned 100% blocks executed 100%
        1:  113:      subroutine ansyes(name)
        -:  114:      character*9 name
        1:  115:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:  116:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  117:      subroutine ansno(name)
        -:  118:      character*9 name
    #####:  119:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  120:      end
