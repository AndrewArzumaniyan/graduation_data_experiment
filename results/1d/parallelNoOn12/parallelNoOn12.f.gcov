        -:    0:Source:results/1d/parallelNoOn12/parallelNoOn12.f
        -:    0:Graph:./results\1d\parallelNoOn12\parallelNoOn12.gcno
        -:    0:Data:./results\1d\parallelNoOn12\parallelNoOn12.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program PARALLELNoOn2
        -:    2:
        -:    3:c    TESTING parallel CLAUSE .       
        -:    4:
        1:    5:      print *,'===START OF parallelNoOn2========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C --------------------------------------------------
        -:    7:c 11  PARALLEL , REDUCTION
        1:    8:      call parallelNoOn21
call    0 returned 100%
        -:    9:C --------------------------------------------------
        -:   10:c 12  PARALLEL, PRIVATE, REDUCTION
        1:   11:      call parallelNoOn22
call    0 returned 100%
        -:   12:C --------------------------------------------------
        -:   13:c 13  PARALLEL, ACROSS , TIE, REDUCTION
        1:   14:      call parallelNoOn23
call    0 returned 100%
        -:   15:C --------------------------------------------------
        -:   16:c 14  PARALLEL, ACROSS, TIE, REDUCTION
        1:   17:      call parallelNoOn24
call    0 returned 100%
        -:   18:C --------------------------------------------------
        1:   19:      print *,'=== END OF parallelNoOn2 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   20:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   21:
        -:   22:C ---------------------------------------------parallelNoOn21
function parallelnoon21_ called 1 returned 100% blocks executed 86%
        1:   23:      subroutine parallelNoOn21
        -:   24:      integer, parameter :: N = 100,  ER=10000
        -:   25:      character*14:: tname='parallelNoOn21' 
        1:   26:      integer, allocatable :: A(:,:),B(:,:),AS(:,:),BS(:,:)
        -:   27:      integer:: erri=ER
        -:   28:                      
       1*:   29:      allocate (B(N,N),A(N,N),BS(N,N),AS(N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:   30:
      101:   31:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:   32:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10100:   33:        if(i == N .or. i==1 .or. j==N .or. j==1) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      396:   34:           AS(i,j) = 0
        -:   35:        else
     9604:   36:           AS(i,j) = i+j
        -:   37:        endif
        -:   38:      enddo
        -:   39:      enddo
        -:   40:
       99:   41:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9703:   42:      do i=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9702:   43:         BS(i,j) = AS(i-1,j)+AS(i+1,j)+AS(i,j+1)+AS(i,j-1)
        -:   44:      enddo
        -:   45:      enddo
        -:   46:
        -:   47:!dvm$ actual(erri)
        -:   48:!dvm$ region local(A,B)
        -:   49:!dvm$ parallel (j,i)
      101:   50:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:   51:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10100:   52:        if(i == N .or. i==1 .or. j==N .or. j==1) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      396:   53:           A(i,j) = 0
        -:   54:        else
     9604:   55:           A(i,j) = i+j
        -:   56:        endif
        -:   57:      enddo
        -:   58:      enddo
        -:   59:
        -:   60:!dvm$ parallel (j,i)
       99:   61:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9703:   62:      do i=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9702:   63:        B(i,j) = A(i-1,j)+A(i+1,j)+A(i,j+1)+A(i,j-1)
        -:   64:      enddo
        -:   65:      enddo
        -:   66:  
        -:   67:!dvm$ parallel (j,i), reduction( min( erri ) )
       99:   68:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9703:   69:      do i=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    9702*:   70:        if(B(i,j) .ne. BS(i,j)) erri =  min(erri, ABS(B(i,j)-BS(i,j)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   71:      enddo
        -:   72:      enddo
        -:   73:
        -:   74:!dvm$ end region
        -:   75:   
        -:   76:!dvm$ get_actual(erri) 
        -:   77:      
        1:   78:      if (erri .eq. ER) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   79:          call ansyes(tname)
call    0 returned 100%
        -:   80:      else
    #####:   81:          call ansno(tname)
call    0 never executed
        -:   82:      endif 
       1*:   83:      deallocate (A,B,AS,BS)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:   84:      
        1:   85:      end
        -:   86:
        -:   87:C ---------------------------------------------parallelNoOn22
function parallelnoon22_ called 1 returned 100% blocks executed 86%
        1:   88:      subroutine parallelNoOn22
        -:   89:      integer, parameter :: N = 100,  ER=10000
        -:   90:      character*14:: tname='parallelNoOn22' 
        1:   91:      integer, allocatable :: A(:,:),B(:,:),AS(:,:),BS(:,:)
        -:   92:      integer:: erri=ER
        -:   93:                      
       1*:   94:      allocate (B(N,N),A(N,N),BS(N,N),AS(N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:   95:
      101:   96:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:   97:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10100:   98:        if(i == N .or. i==1 .or. j==N .or. j==1) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      396:   99:           AS(i,j) = 0
        -:  100:        else
     9604:  101:           AS(i,j) = i+j
        -:  102:        endif
        -:  103:      enddo
        -:  104:      enddo
        -:  105:
       99:  106:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9703:  107:      do i=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9702:  108:         BS(i,j) = AS(i-1,j)+AS(i+1,j)+AS(i,j+1)+AS(i,j-1)
        -:  109:      enddo
        -:  110:      enddo
        -:  111:
        -:  112:!dvm$ actual(erri)
        -:  113:!dvm$ region local(A,B)
        -:  114:!dvm$ parallel (j,i), private(ij)
      101:  115:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:  116:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10000:  117:        ij = i+j
    10100:  118:        if(i == N .or. i==1 .or. j==N .or. j==1) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      396:  119:           A(i,j) = 0
        -:  120:        else
     9604:  121:           A(i,j) = ij
        -:  122:        endif
        -:  123:
        -:  124:      enddo
        -:  125:      enddo
        -:  126:
        -:  127:!dvm$ parallel (j,i), private(iai,iaj)
       99:  128:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9703:  129:      do i=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9604:  130:        iai = A(i-1,j)+A(i+1,j)
     9604:  131:        iaj = A(i,j+1)+A(i,j-1)
     9702:  132:        B(i,j) = iai+iaj
        -:  133:      enddo
        -:  134:      enddo
        -:  135:  
        -:  136:!dvm$ parallel (j,i), reduction( min( erri ) )
       99:  137:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9703:  138:      do i=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    9702*:  139:        if(B(i,j) .ne. BS(i,j)) erri =  min(erri, ABS(B(i,j)-BS(i,j)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  140:      enddo
        -:  141:      enddo
        -:  142:!dvm$ end region   
        -:  143:!dvm$ get_actual(erri) 
        -:  144:      
        1:  145:      if (erri .eq. ER) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  146:          call ansyes(tname)
call    0 returned 100%
        -:  147:      else
    #####:  148:          call ansno(tname)
call    0 never executed
        -:  149:      endif 
       1*:  150:      deallocate (A,B,AS,BS)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  151:      
        1:  152:      end
        -:  153:
        -:  154:C ---------------------------------------------parallelNoOn23
function parallelnoon23_ called 1 returned 100% blocks executed 85%
        1:  155:      subroutine parallelNoOn23
        -:  156:      integer, parameter :: N = 100,  ER=10000
        -:  157:      character*14:: tname='parallelNoOn23' 
        1:  158:      integer, allocatable :: A(:,:),B(:,:),AS(:,:),BS(:,:)
        -:  159:      integer:: erri=ER
        -:  160:                      
       1*:  161:      allocate (B(N,N),A(N,N),BS(N,N),AS(N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:  162:
      101:  163:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:  164:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10100:  165:        if(i == N .or. i==1 .or. j==N .or. j==1) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      396:  166:           AS(i,j) = 0
      396:  167:           BS(i,j) = 0
        -:  168:        else
     9604:  169:           AS(i,j) = i+j
     9604:  170:           BS(i,j) = i+j+2
        -:  171:        endif
        -:  172:      enddo
        -:  173:      enddo
        -:  174:
       99:  175:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9605:  176:      do i=2,N-2
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9506:  177:         AS(i,j) = AS(i-1,j)+AS(i+1,j)+AS(i,j+1)+AS(i,j-1)
     9604:  178:         BS(i,j) = BS(i-1,j)+BS(i+2,j)+AS(i,j)
        -:  179:      enddo
        -:  180:      enddo
        -:  181:
        -:  182:!dvm$ actual(erri)
        -:  183:!dvm$ region local(A,B)
        -:  184:!dvm$ parallel (j,i)
      101:  185:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:  186:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10100:  187:        if(i == N .or. i==1 .or. j==N .or. j==1) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      396:  188:           A(i,j) = 0
      396:  189:           B(i,j) = 0
        -:  190:        else
     9604:  191:           A(i,j) = i+j
     9604:  192:           B(i,j) = i+j+2
        -:  193:        endif
        -:  194:
        -:  195:      enddo
        -:  196:      enddo
        -:  197:
        -:  198:!dvm$ parallel (j,i), across(A(1:1,1:1),B(1:2,0:0)),tie(A(i,j),B(i,j))
       99:  199:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9605:  200:      do i=2,N-2
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9506:  201:        A(i,j) = A(i-1,j)+A(i+1,j)+A(i,j+1)+A(i,j-1)
     9604:  202:        B(i,j) = B(i-1,j)+B(i+2,j)+A(i,j)
        -:  203:      enddo
        -:  204:      enddo
        -:  205:  
        -:  206:!dvm$ parallel (j,i), reduction( min( erri ) )
      101:  207:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:  208:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   10000*:  209:        if(A(i,j) .ne. AS(i,j)) erri =  min(erri, ABS(A(i,j)-AS(i,j)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   10100*:  210:        if(B(i,j) .ne. BS(i,j)) erri =  min(erri, ABS(B(i,j)-BS(i,j)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  211:      enddo
        -:  212:      enddo
        -:  213:!dvm$ end region   
        -:  214:!dvm$ get_actual(erri) 
        -:  215:      
        1:  216:      if (erri .eq. ER) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  217:          call ansyes(tname)
call    0 returned 100%
        -:  218:      else
    #####:  219:          call ansno(tname)
call    0 never executed
        -:  220:      endif 
       1*:  221:      deallocate (A,B,AS,BS)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  222:      
        1:  223:      end
        -:  224:
        -:  225:C ---------------------------------------------parallelNoOn24
function parallelnoon24_ called 1 returned 100% blocks executed 85%
        1:  226:      subroutine parallelNoOn24
        -:  227:      integer, parameter :: N = 100,  ER=10000
        -:  228:      character*14:: tname='parallelNoOn24' 
        1:  229:      integer, allocatable :: A(:,:),B(:,:),AS(:,:),BS(:,:)
        -:  230:      integer:: erri=ER
        -:  231:                      
       1*:  232:      allocate (B(N,N),A(N,N),BS(N,N),AS(N,N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:  233:
      101:  234:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:  235:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10100:  236:        if(i == N .or. i==1 .or. j==N .or. j==1) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      396:  237:           AS(i,j) = 0
      396:  238:           BS(i,j) = 0
        -:  239:        else
     9604:  240:           AS(i,j) = i+j
     9604:  241:           BS(i,j) = i+j+2
        -:  242:        endif
        -:  243:      enddo
        -:  244:      enddo
        -:  245:
       99:  246:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9703:  247:      do i=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9604:  248:         AS(i,j) = AS(i-1,j)+AS(i+1,j)+AS(i,j+1)+AS(i,j-1)
     9702:  249:         BS(i+1,j) = BS(i-1,j)+BS(i+1,j)+AS(i,j)
        -:  250:      enddo
        -:  251:      enddo
        -:  252:
        -:  253:!dvm$ actual(erri)
        -:  254:!dvm$ region local(A,B)
        -:  255:!dvm$ parallel (j,i)
      101:  256:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:  257:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10100:  258:        if(i == N .or. i==1 .or. j==N .or. j==1) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
      396:  259:           A(i,j) = 0
      396:  260:           B(i,j) = 0
        -:  261:        else
     9604:  262:           A(i,j) = i+j
     9604:  263:           B(i,j) = i+j+2
        -:  264:        endif
        -:  265:
        -:  266:      enddo
        -:  267:      enddo
        -:  268:
        -:  269:!dvm$ parallel (j,i),across(A(1:1,1:1),B(2:0,0:0)),tie(A(i,j),B(i+1,j))
       99:  270:      do j=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9703:  271:      do i=2,N-1
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     9604:  272:        A(i,j) = A(i-1,j)+A(i+1,j)+A(i,j+1)+A(i,j-1)
     9702:  273:        B(i+1,j) = B(i-1,j)+B(i+1,j)+A(i,j)
        -:  274:      enddo
        -:  275:      enddo
        -:  276:  
        -:  277:!dvm$ parallel (j,i), reduction( min( erri ) )
      101:  278:      do j=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    10101:  279:      do i=1,N
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   10000*:  280:        if(A(i,j) .ne. AS(i,j)) erri =  min(erri, ABS(A(i,j)-AS(i,j)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
   10100*:  281:        if(B(i,j) .ne. BS(i,j)) erri =  min(erri, ABS(B(i,j)-BS(i,j)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  282:      enddo
        -:  283:      enddo
        -:  284:!dvm$ end region   
        -:  285:!dvm$ get_actual(erri) 
        -:  286:      
        1:  287:      if (erri .eq. ER) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  288:          call ansyes(tname)
call    0 returned 100%
        -:  289:      else
    #####:  290:          call ansno(tname)
call    0 never executed
        -:  291:      endif 
       1*:  292:      deallocate (A,B,AS,BS)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  293:      
        1:  294:      end
        -:  295:
        -:  296:C -------------------------------------------------
        -:  297:
function ansyes_ called 4 returned 100% blocks executed 100%
        4:  298:      subroutine ansyes(name)
        -:  299:      character*14 name
        4:  300:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4:  301:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  302:      subroutine ansno(name)
        -:  303:      character*14 name
    #####:  304:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  305:      end
