        -:    0:Source:results/1d/align11/align11.f
        -:    0:Graph:./results\1d\align11\align11.gcno
        -:    0:Data:./results\1d\align11\align11.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program ALIGN11
        -:    2:
        -:    3:c    TESTING align CLAUSE .       
        -:    4:
        1:    5:      print *,'===START OF align11========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C --------------------------------------------------
        -:    7:c 111 arrA1[BLOCK]  arrB1[ ]  ALIGN arrB[i] WITH arrA[i]  normal 
        1:    8:      call align111
call    0 returned 100%
        -:    9:C --------------------------------------------------
        -:   10:c 1111  arrA1[BLOCK]  arrB1[ ]  ALIGN arrB[i] WITH arrA[i]  small array 
        1:   11:      call align1111
call    0 returned 100%
        -:   12:C --------------------------------------------------
        -:   13:c 1112  arrA1[BLOCK]  arrB1[ ]  ALIGN arrB[i] WITH arrA[2*i+1]  small array 
        1:   14:      call align1112
call    0 returned 100%
        -:   15:C --------------------------------------------------
        -:   16:c 112                         ALIGN arrB[i] WITH arrA[i+4]  shift along i 
        1:   17:      call align112
call    0 returned 100%
        -:   18:C --------------------------------------------------
        -:   19:c 113                         ALIGN arrB[i] WITH arrA[-i+9] reverse on i
        -:   20:c      call align113
        -:   21:C --------------------------------------------------
        -:   22:c 114                         ALIGN arrB[i] WITH arrA[2*i+8]  stretching along i
        1:   23:      call align114
call    0 returned 100%
        -:   24:C --------------------------------------------------
        -:   25:c 115                             ALIGN arrB[*] WITH arrA[*]   
        1:   26:      call align115
call    0 returned 100%
        -:   27:C --------------------------------------------------
        -:   28:C
        -:   29:C
        1:   30:      print *,'=== END OF align11 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   31:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   32:
        -:   33:C ----------------------------------------------------align111
        -:   34:c 111 arrA1[BLOCK]  arrB1[ ]  ALIGN arrB[i] WITH arrA[i]  normal 
function align111_ called 1 returned 100% blocks executed 75%
        1:   35:      subroutine align111
        -:   36:      integer, parameter :: AN1=8,BN1=8,PN = 4,NL=1000,ER=10000
        -:   37:c     parameters for ALIGN arrB[i] WITH arrA[k1i * i + li]                                                 
        -:   38:      integer, parameter :: k1i=1,k2i=0,li=0
        -:   39:      character*9 tname
        1:   40:      integer,allocatable :: A1(:),B1(:)
        -:   41:      integer erri,i
        -:   42:!dvm$ distribute A1(BLOCK)    
        -:   43:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:   44:
        1:   45:      tname='align111'
       1*:   46:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        9:   47:      erri= ER
        -:   48:c      call stralign111 
        -:   49:      NNL=NL 
        -:   50:
        -:   51:!dvm$ actual(erri)
        -:   52:!dvm$ region local(A1,B1)
        -:   53:!dvm$ parallel (i) on B1(i)
        9:   54:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:   55:            B1(i) =0     
        -:   56:      enddo 
        -:   57:
        -:   58:!dvm$ parallel (i) on A1(i), private(ib)
        9:   59:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:   60:             A1(i) = i
        -:   61:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        -:   62:     *          (((i-li)/k1i) .gt. 0)  .and.
        1:   63:     *          (((i-li)/k1i) .le. BN1)) then
        8:   64:                ib = (i-li)/k1i
        8:   65:                B1(ib) = ib
        -:   66:             endif 
        -:   67:      enddo 
        -:   68:
        -:   69:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia)
        9:   70:      do i=1,BN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:   71:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   72:            else
    #####:   73:               erri = min(erri,i)
        -:   74:            endif 
        8:   75:            ia=k1i * i + li
        9:   76:            if (A1(ia) .eq.(ia)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   77:            else
    #####:   78:               erri = min(erri,i)
        -:   79:            endif 
        -:   80:      enddo 
        -:   81:!dvm$ end region   
        -:   82:!dvm$ get_actual(erri) 
        -:   83:     
        1:   84:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   85:          call ansyes(tname)
call    0 returned 100%
        -:   86:          else
    #####:   87:          call ansno(tname)
call    0 never executed
        -:   88:      endif 
       1*:   89:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        1:   90:      end
        -:   91:C ----------------------------------------------------align1111
        -:   92:c 1111  arrA1[BLOCK]  arrB1[ ]  ALIGN arrB[i] WITH arrA[i]  small array 
function align1111_ called 1 returned 100% blocks executed 77%
        1:   93:      subroutine align1111
        -:   94:      integer, parameter :: AN1=5,BN1=2,PN = 4,NL=1000,ER=10000
        -:   95:c     parameters for ALIGN arrB[i] WITH arrA[k1i * i + li]                                                 
        -:   96:      integer, parameter :: k1i=1,k2i=0,li=0
        -:   97:      character*9 tname
        1:   98:      integer,allocatable :: A1(:),B1(:)
        -:   99:      integer erri,i
        -:  100:               
        -:  101:!dvm$ distribute A1(BLOCK)    
        -:  102:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  103:
        1:  104:      tname='align1111'
       1*:  105:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        3:  106:      erri= ER
        -:  107:      NNL=NL 
        -:  108:
        -:  109:!dvm$ actual(erri)
        -:  110:!dvm$ region local(A1,B1)
        -:  111:!dvm$ parallel (i) on B1(i)
        3:  112:      do i=1,BN1
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        3:  113:            B1(i) =0     
        -:  114:      enddo 
        -:  115:
        -:  116:!dvm$ parallel (i) on A1(i), private(ib)
        6:  117:      do i=1,AN1
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        5:  118:             A1(i) = i
        -:  119:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        5:  120:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        1:  121:     *          (((i-li)/k1i) .le. BN1)) then
        2:  122:                ib = (i-li)/k1i
        2:  123:                B1(ib) = ib
        -:  124:             endif 
        -:  125:      enddo 
        -:  126:
        -:  127:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia)
        3:  128:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:  129:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  130:            else
    #####:  131:               erri = min(erri,i)
        -:  132:            endif 
        2:  133:            ia=k1i * i + li
        3:  134:            if (A1(ia) .eq.(ia)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  135:            else
    #####:  136:               erri = min(erri,i)
        -:  137:            endif 
        -:  138:      enddo 
        -:  139:!dvm$ end region   
        -:  140:!dvm$ get_actual(erri)   
        -:  141:     
        1:  142:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  143:          call ansyes(tname)
call    0 returned 100%
        -:  144:          else
    #####:  145:          call ansno(tname)
call    0 never executed
        -:  146:      endif 
       1*:  147:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  148:
        1:  149:      end
        -:  150:C ----------------------------------------------------align1112
        -:  151:c 1112  arrA1[BLOCK]  arrB1[ ]  ALIGN arrB[i] WITH arrA[2*i+1]  small array 
function align1112_ called 1 returned 100% blocks executed 77%
        1:  152:      subroutine align1112
        -:  153:      integer, parameter :: AN1=5,BN1=2,PN = 4,NL=1000,ER=10000
        -:  154:c     parameters for ALIGN arrB[i] WITH arrA[k1i * i + li]                                                 
        -:  155:      integer, parameter :: k1i=2,k2i=0,li=1
        -:  156:      character*9 tname
        1:  157:      integer,allocatable :: A1(:),B1(:)
        -:  158:      integer erri,i
        -:  159:               
        -:  160:!dvm$ distribute A1(BLOCK)    
        -:  161:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  162:
        1:  163:      tname='align1112'
       1*:  164:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        3:  165:      erri= ER
        -:  166:      NNL=NL 
        -:  167:
        -:  168:!dvm$ actual(erri)
        -:  169:!dvm$ region local(A1,B1)
        -:  170:!dvm$ parallel (i) on B1(i)
        3:  171:      do i=1,BN1
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        3:  172:            B1(i) =0     
        -:  173:      enddo 
        -:  174:
        -:  175:!dvm$ parallel (i) on A1(i), private(ib)
        6:  176:      do i=1,AN1
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        5:  177:             A1(i) = i
        -:  178:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        5:  179:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        1:  180:     *          (((i-li)/k1i) .le. BN1)) then
        2:  181:                ib = (i-li)/k1i
        2:  182:                B1(ib) = ib
        -:  183:             endif 
        -:  184:      enddo 
        -:  185:
        -:  186:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia)
        3:  187:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:  188:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  189:            else
    #####:  190:               erri = min(erri,i)
        -:  191:            endif 
        2:  192:            ia=k1i * i + li
        3:  193:            if (A1(ia) .eq.(ia)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  194:            else
    #####:  195:               erri = min(erri,i)
        -:  196:            endif 
        -:  197:      enddo 
        -:  198:!dvm$ end region   
        -:  199:!dvm$ get_actual(erri) 
        -:  200:     
        1:  201:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  202:          call ansyes(tname)
call    0 returned 100%
        -:  203:      else
    #####:  204:          call ansno(tname)
call    0 never executed
        -:  205:      endif 
       1*:  206:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  207:
        1:  208:      end
        -:  209:C ----------------------------------------------------align112
        -:  210:c 112                         ALIGN arrB[i] WITH arrA[i+4]  shift along i 
function align112_ called 1 returned 100% blocks executed 77%
        1:  211:      subroutine align112
        -:  212:      integer, parameter :: AN1=8,BN1=4,PN = 4,NL=1000,ER=10000
        -:  213:c     parameters for ALIGN arrB[i] WITH arrA[k1i * i + li]                                                 
        -:  214:      integer, parameter :: k1i=1,k2i=0,li=4
        -:  215:      character*9 tname
        1:  216:      integer,allocatable :: A1(:),B1(:)
        -:  217:      integer erri,i
        -:  218:               
        -:  219:!dvm$ distribute A1(BLOCK)    
        -:  220:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  221:
        1:  222:      tname='align112'
       1*:  223:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        5:  224:      erri= ER
        -:  225:      NNL=NL 
        -:  226:
        -:  227:!dvm$ actual(erri)
        -:  228:!dvm$ region local(A1,B1)
        -:  229:!dvm$ parallel (i) on B1(i)
        5:  230:      do i=1,BN1
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  231:            B1(i) =0     
        -:  232:      enddo 
        -:  233:
        -:  234:!dvm$ parallel (i) on A1(i), private(ib)
        9:  235:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:  236:             A1(i) = i
        -:  237:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        8:  238:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  239:     *          (((i-li)/k1i) .le. BN1)) then
        4:  240:                ib = (i-li)/k1i
        4:  241:                B1(ib) = ib
        -:  242:             endif 
        -:  243:      enddo 
        -:  244:
        -:  245:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia)
        5:  246:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  247:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  248:            else
    #####:  249:               erri = min(erri,i)
        -:  250:            endif 
        4:  251:            ia=k1i * i + li
        5:  252:            if (A1(ia) .eq.(ia)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  253:            else
    #####:  254:               erri = min(erri,i)
        -:  255:            endif 
        -:  256:      enddo 
        -:  257:!dvm$ end region   
        -:  258:!dvm$ get_actual(erri) 
        -:  259:     
        1:  260:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  261:          call ansyes(tname)
call    0 returned 100%
        -:  262:      else
    #####:  263:          call ansno(tname)
call    0 never executed
        -:  264:      endif 
       1*:  265:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  266:
        1:  267:      end
        -:  268:C ----------------------------------------------------align113
        -:  269:c 113     ALIGN arrB[i] WITH arrA[-i+9] reverse on i
function align113_ called 0 returned 0% blocks executed 0%
    #####:  270:      subroutine align113
        -:  271:      integer, parameter :: AN1=8,BN1=8,PN = 4,NL=1000,ER=10000
        -:  272:c     parameters for ALIGN arrB[i] WITH arrA[k1i * i + li]                                                 
        -:  273:      integer, parameter :: k1i=-1,k2i=0,li=9
        -:  274:      character*9 tname
    #####:  275:      integer,allocatable :: A1(:),B1(:)
        -:  276:      integer erri,i
        -:  277:               
        -:  278:!dvm$ distribute A1(BLOCK)    
        -:  279:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  280:
    #####:  281:      tname='align113'
    #####:  282:      allocate (A1(AN1),B1(BN1))
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
    #####:  283:      erri= ER
        -:  284:      NNL=NL 
        -:  285:
        -:  286:!dvm$ actual(erri)
        -:  287:!dvm$ region local(A1,B1)
        -:  288:!dvm$ parallel (i) on B1(i)
    #####:  289:      do i=1,BN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  290:            B1(i) =0     
        -:  291:      enddo 
        -:  292:
        -:  293:!dvm$ parallel (i) on A1(i), private(ib)
    #####:  294:      do i=1,AN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  295:             A1(i) = i
        -:  296:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        -:  297:     *          (((i-li)/k1i) .gt. 0)  .and.
    #####:  298:     *          (((i-li)/k1i) .le. BN1)) then
    #####:  299:                ib = (i-li)/k1i
    #####:  300:                B1(ib) = ib
        -:  301:             endif 
        -:  302:      enddo 
        -:  303:
        -:  304:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia)
    #####:  305:      do i=1,BN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  306:            if (B1(i) .eq.(i)) then     
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  307:            else
    #####:  308:               erri = min(erri,i)
        -:  309:            endif 
    #####:  310:            ia=k1i * i + li
    #####:  311:            if (A1(ia) .eq.(ia)) then     
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  312:            else
    #####:  313:               erri = min(erri,i)
        -:  314:            endif 
        -:  315:      enddo 
        -:  316:!dvm$ end region   
        -:  317:!dvm$ get_actual(erri) 
        -:  318:     
    #####:  319:      if (erri .eq.ER) then     
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  320:          call ansyes(tname)
call    0 never executed
        -:  321:      else
    #####:  322:          call ansno(tname)
call    0 never executed
        -:  323:      endif 
    #####:  324:      deallocate (B1,A1)
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
        -:  325:
    #####:  326:      end
        -:  327:C ----------------------------------------------------align114
        -:  328:c 114     ALIGN arrB[i] WITH arrA[2*i+8]  stretching along i
function align114_ called 1 returned 100% blocks executed 77%
        1:  329:      subroutine align114
        -:  330:      integer, parameter :: AN1=24,BN1=8,PN = 4,NL=1000,ER=10000
        -:  331:c     parameters for ALIGN arrB[i] WITH arrA[k1i * i + li]                                                 
        -:  332:      integer, parameter :: k1i=2,k2i=0,li=8
        -:  333:      character*9 tname
        1:  334:      integer,allocatable :: A1(:),B1(:)
        -:  335:      integer erri,i
        -:  336:               
        -:  337:!dvm$ distribute A1(BLOCK)    
        -:  338:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  339:
        -:  340:
        1:  341:      tname='align114'
       1*:  342:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        9:  343:      erri= ER
        -:  344:      NNL=NL 
        -:  345:
        -:  346:!dvm$ actual(erri)
        -:  347:!dvm$ region local(A1,B1),inout(erri)
        -:  348:!dvm$ parallel (i) on B1(i)
        9:  349:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  350:            B1(i) =0     
        -:  351:      enddo 
        -:  352:
        -:  353:!dvm$ parallel (i) on A1(i), private(ib)
       25:  354:      do i=1,AN1
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       24:  355:             A1(i) = i
        -:  356:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       24:  357:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        1:  358:     *          (((i-li)/k1i) .le. BN1)) then
        8:  359:                ib = (i-li)/k1i
        8:  360:                B1(ib) = ib
        -:  361:             endif 
        -:  362:      enddo 
        -:  363:
        -:  364:!dvm$ parallel (i) on B1(i), reduction( min( erri ) ), private(ia)
        9:  365:      do i=1,BN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  366:            if (B1(i) .eq.(i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  367:            else
    #####:  368:               erri = min(erri,i)
        -:  369:            endif 
        8:  370:            ia=k1i * i + li
        9:  371:            if (A1(ia) .eq.(ia)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  372:            else
    #####:  373:               erri = min(erri,i)
        -:  374:            endif 
        -:  375:      enddo 
        -:  376:!dvm$ end region   
        -:  377:!dvm$ get_actual(erri) 
        -:  378:     
        1:  379:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  380:          call ansyes(tname)
call    0 returned 100%
        -:  381:          else
    #####:  382:          call ansno(tname)
call    0 never executed
        -:  383:      endif 
       1*:  384:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  385:
        1:  386:      end
        -:  387:C ----------------------------------------------------align115
        -:  388:c 115                             ALIGN arrB[*] WITH arrA[*]   
function align115_ called 1 returned 100% blocks executed 77%
        1:  389:      subroutine align115
        -:  390:      integer, parameter :: AN1=24,BN1=8,PN = 4,NL=1000,ER=10000
        -:  391:c     parameters for ALIGN arrB[*] WITH arrA[*]                                                 
        -:  392:      integer, parameter :: k1i=0,k2i=0,li=0
        -:  393:      character*9 tname
        1:  394:      integer,allocatable :: A1(:),B1(:)
        -:  395:      integer erri,i
        -:  396:               
        -:  397:!dvm$ distribute A1(BLOCK)    
        -:  398:!dvm$ ALIGN B1(*) WITH A1(*)
        -:  399:
        1:  400:      tname='align115'
       1*:  401:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        9:  402:      erri= ER
        -:  403:      NNL=NL 
        -:  404:
        -:  405:!dvm$ actual(erri)
        -:  406:!dvm$ region local(A1,B1)
        -:  407:!dvm$ parallel (i) on B1(i)
        9:  408:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  409:            B1(i) =i     
        -:  410:      enddo 
        -:  411:
        -:  412:!dvm$ parallel (i) on A1(i), reduction( min( erri ) ),private(j)
       25:  413:      do i=1,AN1
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      217:  414:        do j=1,BN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      216:  415:            if (B1(j) .eq.(j)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  416:            else
    #####:  417:               erri = min(erri,j)
        -:  418:            endif 
        -:  419:        enddo 
        -:  420:      enddo 
        -:  421:!dvm$ end region
        -:  422:!dvm$ get_actual(erri)
        -:  423:
        1:  424:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  425:          call ansyes(tname)
call    0 returned 100%
        -:  426:      else
    #####:  427:          call ansno(tname)
call    0 never executed
        -:  428:      endif 
       1*:  429:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  430:
        1:  431:      end
        -:  432:C -------------------------------------------------
        -:  433:
function ansyes_ called 6 returned 100% blocks executed 100%
        6:  434:      subroutine ansyes(name)
        -:  435:      character*9 name
        6:  436:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        6:  437:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  438:      subroutine ansno(name)
        -:  439:      character*9 name
    #####:  440:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  441:      end
