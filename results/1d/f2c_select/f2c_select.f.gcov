        -:    0:Source:results/1d/f2c_select/f2c_select.f
        -:    0:Graph:./results\1d\f2c_select\f2c_select.gcno
        -:    0:Data:./results\1d\f2c_select\f2c_select.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program SELECT_SIMPLE
        -:    2:
        -:    3:c    TESTING convert statement SELECT .       
        -:    4:
        1:    5:      print *,'===START OF F2C_SELECT ========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C --------------------------------------------------
        -:    7:c   normal select
        1:    8:      call select_with_default
call    0 returned 100%
        -:    9:c   only default node select
        1:   10:      call select_only_default
call    0 returned 100%
        -:   11:c   select without default node
        1:   12:      call select_without_default
call    0 returned 100%
        -:   13:c   select with interval
        1:   14:      call select_interval
call    0 returned 100%
        -:   15:c   select with multi interval
        1:   16:      call select_multi_interval
call    0 returned 100%
        -:   17:c   select with multi select
        1:   18:      call select_multi_select
call    0 returned 100%
        1:   19:      print *,'=== END OF F2C_SELECT ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   20:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   21:
        -:   22:C ----------------------------------------------------select11
function select_with_default_ called 1 returned 100% blocks executed 89%
        1:   23:      subroutine select_with_default
        -:   24:      integer, parameter :: AN1=8, ER=10000    
        -:   25:      character*22 tname
        1:   26:      integer, allocatable :: A1(:)
        1:   27:      integer, allocatable :: B1(:)
        -:   28:      integer erri,i
        -:   29:               
        -:   30:!dvm$ distribute A1(BLOCK)    
        -:   31:
        1:   32:      tname='select_with_default'
       1*:   33:      allocate (A1(AN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:   34:      allocate (B1(AN1))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:   35:      
        9:   36:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:   37:            B1(i) =i     
        -:   38:      enddo
        -:   39:!dvm$ region
        -:   40:!dvm$ parallel (i) on A1(i)
        9:   41:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:   42:            A1(i) =i     
        -:   43:      enddo
        -:   44:
        -:   45:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:   46:!dvm$*, private(ia)
        9:   47:      do i=1, AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:   48:        ia = A1(i)
       10:   49:        select case( MOD( A1(i), 4 ) )
        -:   50:        case(0)
        2:   51:            ia = ia + 4
        -:   52:        case(1)
        2:   53:            ia = ia+3
        -:   54:        case(2)
        2:   55:            ia = ia+2
        -:   56:        case default
        8:   57:            ia = ia+1
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
        -:   58:        end select  
        9:   59:        A1(i) = ia*2+3
        -:   60:      enddo
        -:   61:!dvm$ end region   
        -:   62:
        9:   63:      do i=1, AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:   64:        ia = B1(i)
       10:   65:        select case( MOD( B1(i), 4 ) )
        -:   66:        case(0)
        2:   67:            ia = ia + 4
        -:   68:        case(1)
        2:   69:            ia = ia+3
        -:   70:        case(2)
        2:   71:            ia = ia+2
        -:   72:        case default
        8:   73:            ia = ia+1
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
        -:   74:        end select    
        9:   75:        B1(i) = ia*2+3
        -:   76:      enddo
        -:   77:      
        -:   78:      erri= ER
        -:   79:!dvm$ get_actual(A1)
        -:   80:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:   81:      do i=1,AN1
        -:   82:            if ( abs(A1(i) - B1(i) ) .lt. 0.001 ) then         
        -:   83:            else
        -:   84:               erri = min(erri,i)
        -:   85:            endif     
        -:   86:      enddo
        -:   87:      
        -:   88:
        1:   89:      erri= ER
        -:   90:      if (erri .eq.ER) then     
        1:   91:          call ansyes(tname)
call    0 returned 100%
        -:   92:      else
        -:   93:          call ansno(tname)
        -:   94:      endif 
       1*:   95:      deallocate (A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:   96:      deallocate (B1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   97:
        1:   98:      end
        -:   99:C ----------------------------------------------------select12
function select_only_default_ called 1 returned 100% blocks executed 85%
        1:  100:      subroutine select_only_default
        -:  101:      integer, parameter :: AN1=8, ER=10000    
        -:  102:      character*22 tname
        1:  103:      integer, allocatable :: A1(:)
        1:  104:      integer, allocatable :: B1(:)
        -:  105:      integer erri,i
        -:  106:               
        -:  107:!dvm$ distribute A1(BLOCK)    
        -:  108:
        1:  109:      tname='select_only_default'
       1*:  110:      allocate (A1(AN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  111:      allocate (B1(AN1))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  112:      
        9:  113:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  114:            B1(i) =i     
        -:  115:      enddo
        -:  116:!dvm$ region
        -:  117:!dvm$ parallel (i) on A1(i)
        9:  118:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  119:            A1(i) =i     
        -:  120:      enddo
        -:  121:
        -:  122:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  123:!dvm$*, private(ia)
        9:  124:      do i=1, AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:  125:        ia = A1(i)
        -:  126:        select case( MOD( A1(i), 4) )
        -:  127:          case default
        8:  128:            ia = ia*A1(i)-15
        -:  129:        end select    
        9:  130:        A1(i) = ia
        -:  131:      enddo
        -:  132:!dvm$ end region   
        -:  133:
        9:  134:      do i=1, AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  135:        ia = B1(i)
        -:  136:        select case( MOD( B1(i), 4) )
        -:  137:          case default
        8:  138:            ia = ia*B1(i)-15
        -:  139:        end select    
        9:  140:        B1(i) = ia
        -:  141:      enddo
        -:  142:      
        -:  143:      erri= ER
        -:  144:!dvm$ get_actual(A1)
        -:  145:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  146:      do i=1,AN1
        -:  147:            if ( abs(A1(i) - B1(i) ) .lt. 0.001 ) then         
        -:  148:            else
        -:  149:               erri = min(erri,i)
        -:  150:            endif     
        -:  151:      enddo
        -:  152:      
        -:  153:
        1:  154:      erri= ER
        -:  155:      if (erri .eq.ER) then     
        1:  156:          call ansyes(tname)
call    0 returned 100%
        -:  157:      else
        -:  158:          call ansno(tname)
        -:  159:      endif 
       1*:  160:      deallocate (A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  161:      deallocate (B1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  162:
        1:  163:      end
        -:  164:
        -:  165:C ----------------------------------------------------select13
function select_without_default_ called 1 returned 100% blocks executed 88%
        1:  166:      subroutine select_without_default
        -:  167:      integer, parameter :: AN1=8, ER=10000    
        -:  168:      character*22 tname
        1:  169:      integer, allocatable :: A1(:)
        1:  170:      integer, allocatable :: B1(:)
        -:  171:      integer erri,i
        -:  172:               
        -:  173:!dvm$ distribute A1(BLOCK)    
        -:  174:
        1:  175:      tname='select_without_default'
       1*:  176:      allocate (A1(AN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  177:      allocate (B1(AN1))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  178:      
        9:  179:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  180:            B1(i) =i     
        -:  181:      enddo
        -:  182:!dvm$ region
        -:  183:!dvm$ parallel (i) on A1(i)
        9:  184:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  185:            A1(i) =i     
        -:  186:      enddo
        -:  187:
        -:  188:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  189:!dvm$*, private(ia)
        9:  190:      do i=1, AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:  191:        ia = A1(i)
       10:  192:        select case( MOD( A1(i), 4 ) )
        -:  193:        case(0)
        2:  194:            ia = ia + 4
        -:  195:        case(1)
        2:  196:            ia = ia*2+3
        -:  197:        case(2)
        8:  198:            ia = ia*3-7
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
        -:  199:        end select  
        9:  200:        A1(i) = ia
        -:  201:      enddo
        -:  202:!dvm$ end region   
        -:  203:
        9:  204:      do i=1, AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  205:        ia = B1(i)
       10:  206:        select case( MOD( B1(i), 4 ) )
        -:  207:        case(0)
        2:  208:            ia = ia + 4
        -:  209:        case(1)
        2:  210:            ia = ia*2+3
        -:  211:        case(2)
        8:  212:            ia = ia*3-7
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 25%
        -:  213:        end select  
        9:  214:        B1(i) = ia
        -:  215:      enddo
        -:  216:      erri= ER
        -:  217:!dvm$ get_actual(A1)
        -:  218:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  219:      do i=1,AN1
        -:  220:            if ( abs(A1(i) - B1(i) ) .lt. 0.001 ) then         
        -:  221:            else
        -:  222:               erri = min(erri,i)
        -:  223:            endif     
        -:  224:      enddo
        -:  225:      
        -:  226:
        1:  227:      erri= ER
        -:  228:      if (erri .eq.ER) then     
        1:  229:          call ansyes(tname)
call    0 returned 100%
        -:  230:      else
        -:  231:          call ansno(tname)
        -:  232:      endif 
       1*:  233:      deallocate (A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  234:      deallocate (B1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  235:
        1:  236:      end
        -:  237:
        -:  238:
        -:  239:C ----------------------------------------------------select14
function select_interval_ called 1 returned 100% blocks executed 78%
        1:  240:      subroutine select_interval
        -:  241:      integer, parameter :: AN1=8, ER=10000    
        -:  242:      character*22 tname
        1:  243:      integer, allocatable :: A1(:)
        1:  244:      integer, allocatable :: B1(:)
        -:  245:      integer erri,i
        -:  246:               
        -:  247:!dvm$ distribute A1(BLOCK)    
        -:  248:
        1:  249:      tname='select_interval'
       1*:  250:      allocate (A1(AN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  251:      allocate (B1(AN1))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  252:      
        9:  253:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  254:            B1(i) =i     
        -:  255:      enddo
        -:  256:!dvm$ region 
        -:  257:!dvm$ parallel (i) on A1(i)
        9:  258:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  259:            A1(i) =i     
        -:  260:      enddo
        -:  261:
        -:  262:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  263:!dvm$*, private(ia)
        9:  264:      do i=1, AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:  265:        ia = A1(i)
       15:  266:        select case( MOD( A1(i), 20 ) )
        -:  267:        case(:7)
       7*:  268:            ia = ia + 4
        -:  269:        case(9:13)
    #####:  270:            ia = ia*2+3
        -:  271:        case(16:)
    #####:  272:            ia = ia*3-7
        -:  273:        case default
        8:  274:            ia = A1(i)*1/8 +ia*A1(i)-ia
branch  0 taken 88%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 12%
        -:  275:        end select  
        9:  276:        A1(i) = ia
        -:  277:      enddo
        -:  278:!dvm$ end region   
        -:  279:
        9:  280:      do i=1, AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  281:        ia = B1(i)
       15:  282:        select case( MOD( B1(i), 20 ) )
        -:  283:        case(:7)
       7*:  284:            ia = ia + 4
        -:  285:        case(9:13)
    #####:  286:            ia = ia*2+3
        -:  287:        case(16:)
    #####:  288:            ia = ia*3-7
        -:  289:        case default
        8:  290:            ia = B1(i)*1/8 +ia*B1(i)-ia
branch  0 taken 88%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 12%
        -:  291:        end select  
        9:  292:        B1(i) = ia
        -:  293:      enddo
        -:  294:      erri= ER
        -:  295:!dvm$ get_actual(A1)
        -:  296:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  297:      do i=1,AN1
        -:  298:            if ( abs(A1(i) - B1(i) ) .lt. 0.001 ) then         
        -:  299:            else
        -:  300:               erri = min(erri,i)
        -:  301:            endif     
        -:  302:      enddo
        -:  303:      
        -:  304:
        1:  305:      erri= ER
        -:  306:      if (erri .eq.ER) then     
        1:  307:          call ansyes(tname)
call    0 returned 100%
        -:  308:      else
        -:  309:          call ansno(tname)
        -:  310:      endif 
       1*:  311:      deallocate (A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  312:      deallocate (B1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  313:
        1:  314:      end
        -:  315:
        -:  316:C ----------------------------------------------------select15
function select_multi_interval_ called 1 returned 100% blocks executed 89%
        1:  317:      subroutine select_multi_interval
        -:  318:      integer, parameter :: AN1=8, ER=10000    
        -:  319:      character*22 tname
        1:  320:      integer, allocatable :: A1(:)
        1:  321:      integer, allocatable :: B1(:)
        -:  322:      integer erri,i
        -:  323:               
        -:  324:!dvm$ distribute A1(BLOCK)    
        -:  325:
        1:  326:      tname='select_multi_interval'
       1*:  327:      allocate (A1(AN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  328:      allocate (B1(AN1))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  329:      
        9:  330:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  331:            B1(i) =i     
        -:  332:      enddo
        -:  333:!dvm$ region 
        -:  334:!dvm$ parallel (i) on A1(i)
        9:  335:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  336:            A1(i) =i     
        -:  337:      enddo
        -:  338:
        -:  339:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  340:!dvm$*, private(ia)
        9:  341:      do i=1, AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:  342:        ia = A1(i)
       12:  343:        select case( MOD( A1(i), 30 ) )
        -:  344:        case(:4)
        4:  345:            ia = ia + 4
        -:  346:        case(9:13, 20:24, 5)
        1:  347:            ia = ia*2+3
        -:  348:        case(7, 17:19, 26: )
        1:  349:            ia = ia*3-7
        -:  350:        case default
        8:  351:            ia = A1(i)*1/8 +ia*A1(i)-ia
branch  0 taken 50%
branch  1 taken 12%
branch  2 taken 12%
branch  3 taken 25%
        -:  352:        end select  
        9:  353:        A1(i) = ia
        -:  354:      enddo
        -:  355:!dvm$ end region   
        -:  356:
        9:  357:      do i=1, AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  358:        ia = B1(i)
       12:  359:        select case( MOD( B1(i), 30 ) )
        -:  360:        case(:4)
        4:  361:            ia = ia + 4
        -:  362:        case(9:13, 20:24, 5)
        1:  363:            ia = ia*2+3
        -:  364:        case(7, 17:19, 26: )
        1:  365:            ia = ia*3-7
        -:  366:        case default
        8:  367:            ia = B1(i)*1/8 +ia*B1(i)-ia
branch  0 taken 50%
branch  1 taken 12%
branch  2 taken 12%
branch  3 taken 25%
        -:  368:        end select  
        9:  369:        B1(i) = ia
        -:  370:      enddo
        -:  371:      
        -:  372:      erri= ER
        -:  373:!dvm$ get_actual(A1)
        -:  374:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  375:      do i=1,AN1
        -:  376:            if ( abs(A1(i) - B1(i) ) .lt. 0.001 ) then         
        -:  377:            else
        -:  378:               erri = min(erri,i)
        -:  379:            endif     
        -:  380:      enddo
        -:  381:      
        -:  382:
        1:  383:      erri= ER
        -:  384:      if (erri .eq.ER) then     
        1:  385:          call ansyes(tname)
call    0 returned 100%
        -:  386:      else
        -:  387:          call ansno(tname)
        -:  388:      endif 
       1*:  389:      deallocate (A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  390:      deallocate (B1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  391:
        1:  392:      end
        -:  393:C ----------------------------------------------------select16
function select_multi_select_ called 1 returned 100% blocks executed 77%
        1:  394:      subroutine select_multi_select
        -:  395:      integer, parameter :: AN1=8, ER=10000    
        -:  396:      character*22 tname
        1:  397:      integer, allocatable :: A1(:)
        1:  398:      integer, allocatable :: B1(:)
        -:  399:      integer erri,i
        -:  400:               
        -:  401:!dvm$ distribute A1(BLOCK)    
        -:  402:
        1:  403:      tname='select_multi_interval'
       1*:  404:      allocate (A1(AN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  405:      allocate (B1(AN1))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  406:      
        9:  407:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  408:            B1(i) =i     
        -:  409:      enddo
        -:  410:!dvm$ region
        -:  411:!dvm$ parallel (i) on A1(i)
        9:  412:      do i=1,AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  413:            A1(i) =i     
        -:  414:      enddo
        -:  415:
        -:  416:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  417:!dvm$*, private(ia)
        9:  418:      do i=1, AN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        8:  419:        ia = A1(i)
       12:  420:        select case( MOD( A1(i), 30 ) )
        -:  421:        case(:4)
        4:  422:            ia = ia + 4
        -:  423:        case(9:13, 20:24, 5)
        1:  424:            ia = ia*2+3
        3:  425:            select case(ia + min(A1(i) +7, A1(i)*A1(i)*1/4-19 ))
        -:  426:            case(:10)
       1*:  427:                ia = max(ia, 19) + 7
        -:  428:            case default
    #####:  429:                ia = ia/2 -9
        -:  430:            case(17)
    #####:  431:                ia = ia+1
        -:  432:            case(20:)
       1*:  433:                ia = A1(i)-7
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
        -:  434:            end select
        -:  435:        case(7, 17:19, 26: )
        1:  436:            ia = ia*3-7
        -:  437:        case default
        8:  438:            ia = A1(i)*1/8 +ia*A1(i)-ia
branch  0 taken 50%
branch  1 taken 12%
branch  2 taken 12%
branch  3 taken 25%
        -:  439:        end select  
        9:  440:        A1(i) = ia
        -:  441:      enddo
        -:  442:!dvm$ end region   
        -:  443:
        9:  444:      do i=1, AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  445:        ia = B1(i)
       12:  446:         select case( MOD( B1(i), 30 ) )
        -:  447:        case(:4)
        4:  448:            ia = ia + 4
        -:  449:        case(9:13, 20:24, 5)
        1:  450:            ia = ia*2+3
       2*:  451:            select case(ia + min(B1(i) +7, A1(i)*B1(i)*1/4-19 ))
        -:  452:            case(:10)
    #####:  453:                ia = max(ia, 19) + 7
        -:  454:            case default
    #####:  455:                ia = ia/2 -9
        -:  456:            case(17)
    #####:  457:                ia = ia+1
        -:  458:            case(20:)
        1:  459:                ia = B1(i)-7
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  460:            end select
        -:  461:        case(7, 17:19, 26: )
        1:  462:            ia = ia*3-7
        -:  463:        case default
        8:  464:            ia = B1(i)*1/8 +ia*B1(i)-ia
branch  0 taken 50%
branch  1 taken 12%
branch  2 taken 12%
branch  3 taken 25%
        -:  465:        end select  
        9:  466:        B1(i) = ia
        -:  467:       enddo
        -:  468:      
        -:  469:      erri= ER
        -:  470:!dvm$ get_actual(A1)
        -:  471:!dvm$ parallel (i) on A1(i), reduction( min( erri ) )
        -:  472:      do i=1,AN1
        -:  473:            if ( abs(A1(i) - B1(i) ) .lt. 0.001 ) then         
        -:  474:            else
        -:  475:               erri = min(erri,i)
        -:  476:            endif     
        -:  477:      enddo
        -:  478:      
        -:  479:
        1:  480:      erri= ER
        -:  481:      if (erri .eq.ER) then     
        1:  482:          call ansyes(tname)
call    0 returned 100%
        -:  483:      else
        -:  484:          call ansno(tname)
        -:  485:      endif 
       1*:  486:      deallocate (A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:  487:      deallocate (B1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  488:
        1:  489:      end
        -:  490:      
        -:  491:C -------------------------------------------------
        -:  492:
function ansyes_ called 6 returned 100% blocks executed 100%
        6:  493:      subroutine ansyes(name)
        -:  494:      character*22 name
        6:  495:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        6:  496:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  497:      subroutine ansno(name)
        -:  498:      character*22 name
    #####:  499:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  500:      end
