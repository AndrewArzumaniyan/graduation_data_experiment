        -:    0:Source:results/1d/realign11/realign11.f
        -:    0:Graph:./results\1d\realign11\realign11.gcno
        -:    0:Data:./results\1d\realign11\realign11.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program REALIGN11
        -:    2:
        -:    3:c    Testing REALIGN directive       
        -:    4:
        1:    5:      print *,'===START OF realign11========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C --------------------------------------------------
        -:    7:C 111 ALIGN arrB(i) WITH arrA(i)  REALIGN arrB(i) WITH arrA(2*i+8) 
        1:    8:       call realign111
call    0 returned 100%
        -:    9:C --------------------------------------------------
        -:   10:C 112 ALIGN arrB(i) WITH arrA(i+4)  REALIGN arrB(i) WITH arrA(i+8) 
        1:   11:       call realign112
call    0 returned 100%
        -:   12:C --------------------------------------------------
        -:   13:C 112r ALIGN arrB(i) WITH arrA(i+4)  REALIGN arrB(i) WITH arrA(-i+8) 
        -:   14:c      call realign112r
        -:   15:C --------------------------------------------------
        -:   16:C 113  ALIGN arrB(i) WITH arrA(3*i-2) REALIGN arrB(i) WITH arrA(2*i+1)  
        1:   17:       call realign113
call    0 returned 100%
        -:   18:C --------------------------------------------------
        -:   19:C 113r ALIGN arrB(i) WITH arrA(-i+8) REALIGN arrB(i) WITH arrA(3*i-2) 
        -:   20:c       call realign113r
        -:   21:C --------------------------------------------------
        -:   22:C 114  ALIGN arrB(i) WITH arrA(2*i+8)  REALIGN arrB(i) WITH arrA(i) 
        1:   23:       call realign114
call    0 returned 100%
        -:   24:C --------------------------------------------------
        -:   25:C 115  ALIGN arrB(*) WITH arrA(*)  REALIGN arrB(i) WITH arrA(i+4) 
        1:   26:       call realign115
call    0 returned 100%
        -:   27:C --------------------------------------------------
        -:   28:C 116  ALIGN arrB(i) WITH arrA(4*i-3)  REALIGN arrB(i) WITH arrA(*) 
        1:   29:       call realign116
call    0 returned 100%
        -:   30:C --------------------------------------------------
        -:   31:C
        1:   32:      print *,'=== END OF realign11 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   33:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   34:
        -:   35:C ----------------------------------------------------realign111
        -:   36: 
        -:   37:C 111 ALIGN arrB(i) WITH arrA(i)  REALIGN arrB(i) WITH arrA(2*i+8) 
function realign111_ called 1 returned 100% blocks executed 77%
        1:   38:      subroutine realign111
        -:   39:      integer, parameter ::  AN1=25,BN1=8,NL=1000,ER=10000
        -:   40:      integer ::   erria = ER, errib = ER
        -:   41:c     parameters for ALIGN                                                  
        -:   42:      integer, parameter ::  k1i=1,li=0
        -:   43:c     parameters for REALIGN                                                 
        -:   44:      integer, parameter ::  kr1i=2,lri=8
        1:   45:      integer, allocatable :: A1(:),B1(:)
        -:   46:      character(*), parameter :: tname = 'realign111'
        -:   47:               
        -:   48:!dvm$ distribute A1(BLOCK)    
        -:   49:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:   50:!dvm$ DYNAMIC B1
        -:   51:
       1*:   52:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:   53:
        -:   54:!dvm$ region  out(A1,B1)
        -:   55:!dvm$ parallel (i) on B1(i)
        9:   56:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:   57:            B1(i) = 0     
        -:   58:      enddo
        -:   59:
        -:   60:!dvm$ parallel (i) on A1(i), private(ib)
       26:   61:      do i=1,AN1
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       25:   62:             A1(i) = i
        -:   63:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       25:   64:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        1:   65:     *          (((i-li)/k1i) .le. BN1)) then
        8:   66:                ib = (i-li)/k1i
        8:   67:                B1(ib) = ib
        -:   68:             endif 
        -:   69:      enddo
        -:   70:!dvm$ end region   
        -:   71:
        -:   72:!dvm$ REALIGN B1(i) WITH A1(kr1i * i + lri)
        -:   73:
        -:   74:!dvm$ actual(erria, errib)
        -:   75:
        -:   76:!dvm$ region inlocal(A1,B1)
        -:   77:!dvm$ parallel (i) on B1(i), private(ia),
        -:   78:!dvm$*                reduction(min(erria),min(errib))
        9:   79:      do i=1,BN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:   80:            if (B1(i) /= i) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   81:               errib = min(errib,i)
        -:   82:            endif 
        8:   83:            ia=kr1i * i + lri
        9:   84:            if (A1(ia) /= ia) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   85:               erria = min(erria,i)
        -:   86:            endif 
        -:   87:      enddo
        -:   88:!dvm$ end region   
        -:   89:
        -:   90:!dvm$ get_actual(erria,errib) 
        -:   91:
        1:   92:      if ((erria == ER) .and. (errib == ER)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   93:          call ansyes(tname)
call    0 returned 100%
        -:   94:      else
    #####:   95:          call ansno(tname)
call    0 never executed
        -:   96:      endif 
        -:   97:
       1*:   98:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:   99:
        1:  100:      end subroutine realign111
        -:  101:C ----------------------------------------------------realign112
        -:  102:
        -:  103:C 112 ALIGN arrB(i) WITH arrA(i+4)  REALIGN arrB(i) WITH arrA(i+8)   
function realign112_ called 1 returned 100% blocks executed 77%
        1:  104:      subroutine realign112
        -:  105:      integer, parameter ::  AN1=16,BN1=4,NL=1000,ER=10000
        -:  106:      integer ::   erria = ER, errib = ER
        -:  107:c     parameters for ALIGN                                                 
        -:  108:      integer, parameter ::  k1i=1,li=4
        -:  109:c     parameters for REALIGN                                                 
        -:  110:      integer, parameter ::  kr1i=1,lri=8
        1:  111:      integer, allocatable :: A1(:),B1(:)
        -:  112:      character(*), parameter :: tname = 'realign112'
        -:  113:               
        -:  114:!dvm$ distribute A1(BLOCK)    
        -:  115:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  116:!dvm$ DYNAMIC B1
        -:  117:
       1*:  118:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  119:
        5:  120:      B1 = 1     
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  121:
        -:  122:!dvm$ actual (B1)
        -:  123:
        -:  124:!dvm$ region inout (B1), out(A1)
        -:  125:!dvm$ parallel (i) on A1(i), private(ib)
       17:  126:      do i=1,AN1
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       16:  127:             A1(i) = i * 2
        -:  128:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       16:  129:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  130:     *          (((i-li)/k1i) .le. BN1)) then
        4:  131:                ib = (i-li)/k1i
        4:  132:                B1(ib) = B1(ib) + ib
        -:  133:             endif 
        -:  134:      enddo
        -:  135:!dvm$ end region 
        -:  136:
        -:  137:!dvm$ REALIGN B1(i) WITH A1(kr1i * i + lri)
        -:  138:
        -:  139:!dvm$ actual(erria, errib)
        -:  140:
        -:  141:!dvm$ region  
        -:  142:!dvm$ parallel (i) on B1(i), private(ia), 
        -:  143:!dvm$*                reduction(min(erria),min(errib))
        5:  144:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  145:            if (B1(i) /= i+1) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  146:               errib = min(errib,i)
        -:  147:            endif 
        4:  148:            ia=kr1i * i + lri
        5:  149:            if (A1(ia) /= ia*2) then     
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
    #####:  150:               erria = min(erria,i)
        -:  151:            endif 
        -:  152:      enddo
        -:  153:!dvm$ end region 
        -:  154:  
        -:  155:!dvm$ get_actual(erria,errib) 
        -:  156:
        1:  157:      if ((erria == ER) .and. (errib == ER)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  158:          call ansyes(tname)
call    0 returned 100%
        -:  159:      else
    #####:  160:          call ansno(tname)
call    0 never executed
        -:  161:      endif 
        -:  162:
       1*:  163:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  164:
        1:  165:      end subroutine realign112
        -:  166:C ----------------------------------------------------realign112r
        -:  167:C 112r ALIGN arrB(i) WITH arrA(i+4)  REALIGN arrB(i) WITH arrA(-i+8)
function realign112r_ called 0 returned 0% blocks executed 0%
    #####:  168:      subroutine realign112r
        -:  169:      integer, parameter ::  AN1=16,BN1=4,NL=1000,ER=10000
        -:  170:      integer ::   erria = ER, errib = ER
        -:  171:c     parameters for ALIGN                                                 
        -:  172:      integer, parameter ::  k1i=1,li=4
        -:  173:c     parameters for REALIGN                                                  
        -:  174:      integer, parameter ::  kr1i=-1,lri=8
    #####:  175:      integer, allocatable :: A1(:),B1(:)
        -:  176:      character(*), parameter :: tname = 'realign112r'
        -:  177:               
        -:  178:!dvm$ distribute A1(BLOCK)    
        -:  179:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  180:!dvm$ DYNAMIC B1
        -:  181:
    #####:  182:      allocate (A1(AN1),B1(BN1))
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
        -:  183:
    #####:  184:      B1 = 1     
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  185:
        -:  186:!dvm$ actual (B1)
        -:  187:
        -:  188:!dvm$ region inout (B1), out(A1)
        -:  189:!dvm$ parallel (i) on A1(i), private(ib)
    #####:  190:      do i=1,AN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  191:             A1(i) = i * 2
        -:  192:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
    #####:  193:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  194:     *          (((i-li)/k1i) .le. BN1)) then
    #####:  195:                ib = (i-li)/k1i
    #####:  196:                B1(ib) = B1(ib) + ib
        -:  197:             endif 
        -:  198:      enddo
        -:  199:!dvm$ end region 
        -:  200:
        -:  201:!dvm$ REALIGN B1(i) WITH A1(kr1i * i + lri)
        -:  202:
        -:  203:!dvm$ actual(erria, errib)
        -:  204:
        -:  205:!dvm$ region  
        -:  206:!dvm$ parallel (i) on B1(i), private(ia), 
        -:  207:!dvm$*                reduction(min(erria),min(errib))
    #####:  208:      do i=1,BN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  209:            if (B1(i) /= i+1) then     
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  210:               errib = min(errib,i)
        -:  211:            endif 
    #####:  212:            ia=kr1i * i + lri
    #####:  213:            if (A1(ia) /= ia*2) then     
branch  0 never executed
branch  1 never executed (fallthrough)
    #####:  214:               erria = min(erria,i)
        -:  215:            endif 
        -:  216:      enddo
        -:  217:!dvm$ end region 
        -:  218:  
        -:  219:!dvm$ get_actual(erria,errib) 
        -:  220:
    #####:  221:      if ((erria == ER) .and. (errib == ER)) then     
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  222:          call ansyes(tname)
call    0 never executed
        -:  223:      else
    #####:  224:          call ansno(tname)
call    0 never executed
        -:  225:      endif 
        -:  226:
    #####:  227:      deallocate (B1,A1)
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
        -:  228:
    #####:  229:      end subroutine realign112r
        -:  230:C ----------------------------------------------------realign113
        -:  231:C 113 ALIGN arrB(i) WITH arrA(3*i-2) REALIGN arrB(i) WITH arrA(2*i+1)   
function realign113_ called 1 returned 100% blocks executed 78%
        1:  232:      subroutine realign113
        -:  233:      integer, parameter ::  AN1=30,BN1=6,NL=1000,ER=10000
        -:  234:      integer ::   erria = ER, errib = ER
        -:  235:c     parameters for ALIGN                                                  
        -:  236:      integer, parameter ::  k1i=3,li=-2
        -:  237:c     parameters for REALIGN                                                 
        -:  238:      integer, parameter ::  kr1i=2,lri=1
        1:  239:      integer, allocatable :: A1(:),B1(:)
        -:  240:      character(*), parameter :: tname = 'realign113'
        -:  241:               
        -:  242:!dvm$ distribute A1(BLOCK)   
        -:  243:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  244:!dvm$ DYNAMIC B1
        -:  245:
       1*:  246:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  247:
        -:  248:!dvm$ region 
        -:  249:!dvm$ parallel (i) on B1(i)
        7:  250:      do i=1,BN1
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        7:  251:            B1(i) = 5     
        -:  252:      enddo
        -:  253:
        -:  254:!dvm$ end region   
        -:  255:
        -:  256:!dvm$ region in(B1), out(A1,B1)
        -:  257:!dvm$ parallel (i) on A1(i), private(ib)
       31:  258:      do i=1,AN1
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       30:  259:             A1(i) = i + 3
        -:  260:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       30:  261:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 60% (fallthrough)
branch  3 taken 40%
        1:  262:     *          (((i-li)/k1i) .le. BN1)) then
        6:  263:                ib = (i-li)/k1i
        6:  264:                B1(ib) = B1(ib) + ib
        -:  265:             endif 
        -:  266:      enddo
        -:  267:!dvm$ end region   
        -:  268:
        -:  269:!dvm$ REALIGN B1(i) WITH A1(kr1i * i + lri)
        -:  270:
        -:  271:!dvm$ actual(erria, errib)
        -:  272:
        -:  273:!dvm$ region 
        -:  274:!dvm$ parallel (i) on B1(i), private(ia), 
        -:  275:!dvm$*                reduction(min(erria),min(errib))
        7:  276:      do i=1,BN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        6:  277:            if (B1(i) /= (i+5)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  278:               errib = min(errib,i)
        -:  279:            endif 
        6:  280:            ia=kr1i * i + lri
        7:  281:            if (A1(ia) /= (ia+3)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  282:               erria = min(erria,i)
        -:  283:            endif 
        -:  284:      enddo
        -:  285:!dvm$ end region   
        -:  286:
        -:  287:!dvm$ get_actual(erria,errib) 
        -:  288:
        1:  289:      if ((erria == ER) .and. (errib == ER)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  290:          call ansyes(tname)
call    0 returned 100%
        -:  291:      else
    #####:  292:          call ansno(tname)
call    0 never executed
        -:  293:      endif 
       1*:  294:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  295:
        1:  296:      end subroutine realign113
        -:  297:C ----------------------------------------------------realign113r
        -:  298:C 113r ALIGN arrB(i) WITH arrA(-i+8) REALIGN arrB(i) WITH arrA(3*i-2) 
function realign113r_ called 0 returned 0% blocks executed 0%
    #####:  299:      subroutine realign113r
        -:  300:      integer, parameter ::  AN1=30,BN1=6,NL=1000,ER=10000
        -:  301:      integer ::   erria = ER, errib = ER
        -:  302:c     parameters for ALIGN                                                  
        -:  303:      integer, parameter ::  k1i=-1,li=8
        -:  304:c     parameters for REALIGN                                                 
        -:  305:      integer, parameter ::  kr1i=3,lri=-2
    #####:  306:      integer, allocatable :: A1(:),B1(:)
        -:  307:      character(*), parameter :: tname = 'realign113r'
        -:  308:               
        -:  309:!dvm$ distribute A1(BLOCK)   
        -:  310:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  311:!dvm$ DYNAMIC B1
        -:  312:
    #####:  313:      allocate (A1(AN1),B1(BN1))
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
        -:  314:
        -:  315:!dvm$ region 
        -:  316:!dvm$ parallel (i) on B1(i)
    #####:  317:      do i=1,BN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  318:            B1(i) = 5     
        -:  319:      enddo
        -:  320:
        -:  321:!dvm$ end region   
        -:  322:
        -:  323:!dvm$ region in(B1), out(A1,B1)
        -:  324:!dvm$ parallel (i) on A1(i), private(ib)
    #####:  325:      do i=1,AN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  326:             A1(i) = i + 3
        -:  327:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
    #####:  328:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  329:     *          (((i-li)/k1i) .le. BN1)) then
    #####:  330:                ib = (i-li)/k1i
    #####:  331:                B1(ib) = B1(ib) + ib
        -:  332:             endif 
        -:  333:      enddo
        -:  334:!dvm$ end region   
        -:  335:
        -:  336:!dvm$ REALIGN B1(i) WITH A1(kr1i * i + lri)
        -:  337:
        -:  338:!dvm$ actual(erria, errib)
        -:  339:
        -:  340:!dvm$ region 
        -:  341:!dvm$ parallel (i) on B1(i), private(ia), 
        -:  342:!dvm$*                reduction(min(erria),min(errib))
    #####:  343:      do i=1,BN1
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  344:            if (B1(i) /= (i+5)) then     
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  345:               errib = min(errib,i)
        -:  346:            endif 
    #####:  347:            ia=kr1i * i + lri
    #####:  348:            if (A1(ia) /= (ia+3)) then     
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  349:               erria = min(erria,i)
        -:  350:            endif 
        -:  351:      enddo
        -:  352:!dvm$ end region   
        -:  353:
        -:  354:!dvm$ get_actual(erria,errib) 
        -:  355:
    #####:  356:      if ((erria == ER) .and. (errib == ER)) then     
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  357:          call ansyes(tname)
call    0 never executed
        -:  358:      else
    #####:  359:          call ansno(tname)
call    0 never executed
        -:  360:      endif 
    #####:  361:      deallocate (B1,A1)
branch  0 never executed (fallthrough)
branch  1 never executed
call    2 never executed
branch  3 never executed (fallthrough)
branch  4 never executed
call    5 never executed
        -:  362:
    #####:  363:      end subroutine realign113r
        -:  364:C ----------------------------------------------------realign114
        -:  365:C 114 ALIGN arrB(i) WITH arrA(2*i+8)  REALIGN arrB(i) WITH arrA(i) 
function realign114_ called 1 returned 100% blocks executed 78%
        1:  366:      subroutine realign114
        -:  367:      integer, parameter ::  AN1=24,BN1=8,NL=1000,ER=10000
        -:  368:      integer ::   erria = ER, errib = ER
        -:  369:c     parameters for ALIGN                                                 
        -:  370:      integer, parameter ::  k1i=2,li=8
        -:  371:c     parameters for REALIGN                                                  
        -:  372:      integer, parameter ::  kr1i=1,lri=0
        1:  373:      integer, allocatable :: A1(:),B1(:)
        -:  374:      character(*), parameter :: tname = 'realign114'
        -:  375:               
        -:  376:!dvm$ distribute A1(BLOCK)   
        -:  377:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  378:!dvm$ DYNAMIC B1
        -:  379:
       1*:  380:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  381:
        -:  382:!dvm$ region  out(A1, B1)
        -:  383:!dvm$ parallel (i) on B1(i)
        9:  384:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  385:            B1(i) = 0     
        -:  386:      enddo
        -:  387:
        -:  388:!dvm$ parallel (i) on A1(i), private(ib)
       25:  389:      do i=1,AN1
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       24:  390:             A1(i) = i
        -:  391:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       24:  392:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        1:  393:     *          (((i-li)/k1i) .le. BN1)) then
        8:  394:                ib = (i-li)/k1i
        8:  395:                B1(ib) = ib
        -:  396:             endif 
        -:  397:      enddo
        -:  398:!dvm$ end region   
        -:  399:
        -:  400:!dvm$ REALIGN B1(i) WITH A1(kr1i * i + lri)
        -:  401:
        -:  402:!dvm$ actual(erria, errib)
        -:  403:
        -:  404:!dvm$ region 
        -:  405:!dvm$ parallel (i) on B1(i), reduction(min(erria),min(errib)),
        -:  406:!dvm$*      private(ia)      
        9:  407:      do i=1,BN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  408:            if (B1(i) /= (i)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  409:               errib = min(errib,i)
        -:  410:            endif 
        8:  411:            ia=kr1i * i + lri
        9:  412:            if (A1(ia) /= (ia)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  413:               erria = min(erria,i)
        -:  414:            endif 
        -:  415:      enddo
        -:  416:!dvm$ end region   
        -:  417:     
        -:  418:!dvm$ get_actual(erria,errib) 
        -:  419:
        1:  420:      if ((erria == ER) .and. (errib == ER)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  421:          call ansyes(tname)
call    0 returned 100%
        -:  422:      else
    #####:  423:          call ansno(tname)
call    0 never executed
        -:  424:      endif 
        -:  425:
       1*:  426:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  427:
        1:  428:      end subroutine realign114
        -:  429:C ----------------------------------------------------realign115
        -:  430:C 115 ALIGN arrB(*) WITH arrA(*)  REALIGN arrB(i) WITH arrA(i+4)
function realign115_ called 1 returned 100% blocks executed 76%
        1:  431:      subroutine realign115
        -:  432:      integer, parameter ::  AN1=24,BN1=8,NL=1000,ER=10000
        -:  433:      integer ::   erria = ER, errib = ER
        -:  434:c     parameters for ALIGN                                                  
        -:  435:      integer, parameter ::  k1i=0,li=0
        -:  436:c     parameters for REALIGN                                                 
        -:  437:      integer, parameter ::  kr1i=1,lri=4
        1:  438:      integer, allocatable :: A1(:),B1(:)
        -:  439:      character(*), parameter :: tname = 'realign115'
        -:  440:               
        -:  441:!dvm$ distribute A1(BLOCK)    
        -:  442:!dvm$ ALIGN B1(*) WITH A1(*)
        -:  443:!dvm$ DYNAMIC B1
        -:  444:
       1*:  445:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  446:
        9:  447:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  448:            B1(i) = i+4     
        -:  449:      enddo
        -:  450:
        -:  451:!dvm$ region 
        -:  452:!dvm$ parallel (i) on A1(i)
       25:  453:      do i=1,AN1
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       25:  454:             A1(i) = (i+1) ** 2
        -:  455:      enddo
        -:  456:!dvm$ end region 
        -:  457:
        -:  458:!dvm$ REALIGN B1(i) WITH A1(kr1i * i + lri)
        -:  459:
        -:  460:!dvm$ actual(erria, errib)
        -:  461:
        -:  462:!dvm$ region 
        -:  463:!dvm$ parallel (i) on B1(i),
        -:  464:!dvm$*      private(ia),      
        -:  465:!dvm$*      reduction(min(erria),min(errib))
        9:  466:      do i=1,BN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:  467:            if (B1(i) /= (i+4)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  468:               errib = min(errib,i)
        -:  469:            endif 
        8:  470:            ia=kr1i * i + lri
        9:  471:            if (A1(ia) /= (ia+1)**2) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  472:              erria = min(erria,i)
        -:  473:            endif 
        -:  474:      enddo
        -:  475:!dvm$ end region   
        -:  476:     
        -:  477:!dvm$ get_actual(erria,errib) 
        -:  478:
        1:  479:      if ((erria == ER) .and. (errib == ER)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  480:          call ansyes(tname)
call    0 returned 100%
        -:  481:      else
    #####:  482:          call ansno(tname)
call    0 never executed
        -:  483:      endif 
        -:  484:
       1*:  485:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  486:
        1:  487:      end subroutine realign115
        -:  488:C ----------------------------------------------------realign116
        -:  489:C 116  ALIGN arrB(i) WITH arrA(4*i-3)  REALIGN arrB(i) WITH arrA(*) 
function realign116_ called 1 returned 100% blocks executed 79%
        1:  490:      subroutine realign116
        -:  491:      integer, parameter ::  AN1=36,BN1=8,NL=1000,ER=10000
        -:  492:      integer ::   erria = ER, errib = ER
        -:  493:c     parameters for ALIGN                                                  
        -:  494:      integer, parameter ::  k1i=4,li=-3
        -:  495:c     parameters for REALIGN                                                  
        -:  496:      integer, parameter ::  kr1i=0,lri=0
        1:  497:      integer, allocatable :: A1(:),B1(:)
        -:  498:      character(*), parameter :: tname = 'realign116'
        -:  499:               
        -:  500:!dvm$ distribute A1(BLOCK)    
        -:  501:!dvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:  502:!dvm$ DYNAMIC B1
        -:  503:
       1*:  504:      allocate (A1(AN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  505:
        -:  506:!dvm$ region 
        -:  507:!dvm$ parallel (i) on B1(i)
        9:  508:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  509:            B1(i) = i+6     
        -:  510:      enddo
        -:  511:
        -:  512:!dvm$ parallel (i) on A1(i)
       37:  513:      do i=1,AN1
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       37:  514:             A1(i) = (i+1) ** 3
        -:  515:      enddo
        -:  516:!dvm$ end region 
        -:  517:
        -:  518:!dvm$ REALIGN B1(*) WITH A1(*)
        -:  519:
        -:  520:!dvm$ actual(erria, errib)
        -:  521:
        -:  522:!dvm$ region 
        -:  523:!dvm$ parallel (i) on B1(i), reduction(min(errib))
        9:  524:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:  525:            if (B1(i) /= (i+6)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  526:               errib = min(errib,i)
        -:  527:            endif 
        -:  528:      enddo
        -:  529:!dvm$ parallel (i) on A1(i),reduction(min(erria))
       37:  530:      do i=1,AN1
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       37:  531:            if (A1(i) /= ((i+1)**3)) then     
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
    #####:  532:               erria = min(erria,i)
        -:  533:            endif 
        -:  534:      enddo
        -:  535:!dvm$ end region   
        -:  536:     
        -:  537:!dvm$ get_actual(erria,errib) 
        -:  538:
        1:  539:      if ((erria == ER) .and. (errib == ER)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  540:          call ansyes(tname)
call    0 returned 100%
        -:  541:      else
    #####:  542:          call ansno(tname)
call    0 never executed
        -:  543:      endif 
        -:  544:
       1*:  545:      deallocate (B1,A1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  546:
        1:  547:      end subroutine realign116
        -:  548:C -------------------------------------------------
        -:  549:
        -:  550:
function ansyes_ called 6 returned 100% blocks executed 100%
        6:  551:      subroutine ansyes(name)
        -:  552:      character(*) name
        6:  553:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        6:  554:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  555:      subroutine ansno(name)
        -:  556:      character(*) name
    #####:  557:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  558:      end
        -:  559:   
