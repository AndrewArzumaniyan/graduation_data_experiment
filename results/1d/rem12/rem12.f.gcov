        -:    0:Source:results/1d/rem12/rem12.f
        -:    0:Graph:./results\1d\rem12\rem12.gcno
        -:    0:Data:./results\1d\rem12\rem12.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program REM12
        -:    2:     
        -:    3:c    TESTING OF THE REMOTE_ACCESS DIRECTIVE AND THE REMOTE_ACCESS CLAUSE'.       
        -:    4:c    DISTRIBUTED ARRAY A(N) OR ELEMENTS OF THIS ARRAY ARE REPLICATED
        -:    5:c    ON ALL PROCESSORS. 
        -:    6:
        1:    7:      print *,'===START OF REM12========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    8:C --------------------------------------------------
        1:    9:      call rem1201
call    0 returned 100%
        -:   10:C --------------------------------------------------
        1:   11:      call rem1202
call    0 returned 100%
        -:   12:C --------------------------------------------------
        1:   13:      call rem1203
call    0 returned 100%
        -:   14:C -------------------------------------------------
        1:   15:      call rem1204
call    0 returned 100%
        -:   16:C -------------------------------------------------
        1:   17:      call rem1205
call    0 returned 100%
        -:   18:C -------------------------------------------------
        1:   19:      call rem1206
call    0 returned 100%
        -:   20:C --------------------------------------------------
        1:   21:      call rem1207
call    0 returned 100%
        -:   22:C --------------------------------------------------
        1:   23:      call rem1208
call    0 returned 100%
        -:   24:C --------------------------------------------------
        1:   25:      call rem1209
call    0 returned 100%
        -:   26:C -------------------------------------------------
        1:   27:      call rem1210
call    0 returned 100%
        -:   28:C -------------------------------------------------
        1:   29:      call rem1211
call    0 returned 100%
        -:   30:C -------------------------------------------------
        1:   31:      call rem1212
call    0 returned 100%
        -:   32:C ------------------------------------------------- 
        -:   33:
        -:   34:C
        -:   35:C
        1:   36:      print *,'=== END OF REM12 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   37:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   38:C ---------------------------------------------REM1201
function rem1201_ called 1 returned 100% blocks executed 75%
        1:   39:      subroutine REM1201
        -:   40:      integer, parameter :: N = 16,NL=1000
        1:   41:      integer, allocatable :: A(:),B(:),C(:)
        -:   42:      integer nloop 
        -:   43:      character*7 tname
        -:   44:                
        -:   45:!dvm$ distribute B(*)     
        -:   46:!dvm$ align (I) with B(I) ::A
        -:   47:
        1:   48:      tname='REM1201'
       1*:   49:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:   50:      NNL=NL    
       17:   51:      call serial1(C,N,NNL)
        -:   52:      nloop=NL
        -:   53:
        -:   54:!dvm$ region out(A)
        -:   55:!dvm$ parallel (i) on A(i)
       17:   56:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
       17:   57:        A(i) = NL+i
        -:   58:      enddo
        -:   59:!dvm$ end region
        -:   60:!dvm$ get_actual(A(1))
        -:   61:!dvm$ remote_access (A(1))
        1:   62:      ib=A(1)
        -:   63:
        1:   64:      if (ib .eq.C(1)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   65:          call ansyes(tname)
call    0 returned 100%
        -:   66:      else
    #####:   67:          call ansno(tname)
call    0 never executed
        -:   68:      endif 
       1*:   69:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   70:
        1:   71:      end
        -:   72:C ---------------------------------------------REM1202
function rem1202_ called 1 returned 100% blocks executed 75%
        1:   73:      subroutine REM1202
        -:   74:      integer, parameter :: N = 16,NL=1000
        1:   75:      integer, allocatable :: A(:),B(:),C(:)
        -:   76:      integer nloop 
        -:   77:      character*7 tname
        -:   78:                
        -:   79:!dvm$ distribute B(*)    
        -:   80:!dvm$ align (I) with B(I) ::A
        -:   81:
        1:   82:      tname='REM1202'
       1*:   83:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:   84:      NNL=NL    
       17:   85:      call serial1(C,N,NNL)
        -:   86:      nloop=NL
        -:   87:!dvm$ region out(A)
        -:   88:!dvm$ parallel (i) on A(i)
       17:   89:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
       17:   90:        A(i) = NL+i
        -:   91:      enddo
        -:   92:!dvm$ end region
        -:   93:!dvm$ get_actual(A(N))
        -:   94:!dvm$ remote_access (A(N))
        1:   95:      ib=A(N)               
        1:   96:      if (ib .eq.C(N)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   97:         call ansyes(tname)
call    0 returned 100%
        -:   98:      else
    #####:   99:         call ansno(tname)
call    0 never executed
        -:  100:      endif 
       1*:  101:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  102:
        1:  103:      end     
        -:  104: 
        -:  105:C ----------------------------------------REM1203
function rem1203_ called 1 returned 100% blocks executed 75%
        1:  106:      subroutine REM1203
        -:  107:      integer, parameter :: N = 16,NL=1000
        1:  108:      integer, allocatable :: A(:),B(:),C(:)
        -:  109:      integer nloop 
        -:  110:      character*7 tname
        -:  111:                
        -:  112:!dvm$ distribute B(*)     
        -:  113:!dvm$ align (I) with B(I) ::A
        -:  114:
        1:  115:      tname='REM1203'
       1*:  116:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:  117:      NNL=NL    
       17:  118:      call serial1(C,N,NNL)
        -:  119:      nloop=NL
        -:  120:
        -:  121:!dvm$ region out(A)
        -:  122:!dvm$ parallel (i) on A(i)
       17:  123:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
       17:  124:        A(i) = NL+i
        -:  125:      enddo
        -:  126:!dvm$ end region
        -:  127:!dvm$ get_actual(A(N/2))
        -:  128:!dvm$ remote_access (A(N/2))
        1:  129:      ib=A(N/2)               
        1:  130:      if (ib .eq.C(N/2)) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  131:         call ansyes(tname)
call    0 returned 100%
        -:  132:      else
    #####:  133:         call ansno(tname)
call    0 never executed
        -:  134:      endif 
       1*:  135:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  136:
        1:  137:      end      
        -:  138:C ----------------------------------------REM1204
function rem1204_ called 1 returned 100% blocks executed 72%
        1:  139:      subroutine REM1204
        -:  140:      integer, parameter :: N = 16,NL=1000
        1:  141:      integer, allocatable :: A(:),B(:),C(:),D(:)
        -:  142:      integer nloop,isumc,isuma 
        -:  143:      character*7 tname
        -:  144:                
        -:  145:!dvm$ distribute B(*)    
        -:  146:!dvm$ align (I) with B(I) ::A
        -:  147:
        1:  148:      tname='REM1204'
       1*:  149:      allocate (B(N),A(N),C(N),D(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
       17:  150:      isumc=0
       17:  151:      isuma=0    
        -:  152:      NNL=NL    
       17:  153:      call serial1(C,N,NNL)
        -:  154:      nloop=NL
        -:  155:
        -:  156:!dvm$ region out(A)
        -:  157:!dvm$ parallel (i) on A(i)
       17:  158:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  159:        A(i) = NL+i
        -:  160:      enddo
        -:  161:!dvm$ end region
        -:  162:!dvm$ get_actual(A)
       17:  163:      do i=1,N         
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
        -:  164:!dvm$   remote_access (A(i))
       16:  165:        D(i)=A(i)
       16:  166:        isumc=isumc+C(i)
       17:  167:        isuma=isuma+D(i)
        -:  168:      enddo
        1:  169:      if (isumc .eq.isuma) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  170:         call ansyes(tname)
call    0 returned 100%
        -:  171:      else
    #####:  172:         call ansno(tname)
call    0 never executed
        -:  173:      endif 
       1*:  174:      deallocate (A,B,C,D)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  175:
        1:  176:      end           
        -:  177: 
        -:  178:C ----------------------------------------REM1205
function rem1205_ called 1 returned 100% blocks executed 72%
        1:  179:      subroutine REM1205
        -:  180:      integer, parameter :: N = 16,NL=1000
        1:  181:      integer, allocatable :: A(:),B(:),C(:),D(:)
        -:  182:      integer nloop,isumc,isuma 
        -:  183:      character*7 tname
        -:  184:                
        -:  185:!dvm$ distribute B(*)     
        -:  186:
        -:  187:!dvm$ align (I) with B(I) ::A
        -:  188:
        1:  189:      tname='REM1205'
       1*:  190:      allocate (B(N),A(N),C(N),D(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
       17:  191:      isumc=0
       17:  192:      isuma=0    
        -:  193:      NNL=NL    
       17:  194:      call serial1(C,N,NNL)
        -:  195:      nloop=NL
        -:  196:
        -:  197:!dvm$ region out(A)
        -:  198:!dvm$ parallel (i) on A(i)
       17:  199:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  200:        A(i) = NL+i
        -:  201:      enddo
        -:  202:!dvm$ end region
        -:  203:!dvm$ get_actual(A)
       17:  204:      do i=1,N         
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
        -:  205:!dvm$   remote_access (A(:))
       16:  206:        D(i)=A(i)
       16:  207:        isumc=isumc+C(i)
       17:  208:        isuma=isuma+D(i)
        -:  209:      enddo
        1:  210:      if (isumc .eq.isuma) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  211:         call ansyes(tname)
call    0 returned 100%
        -:  212:      else
    #####:  213:         call ansno(tname)
call    0 never executed
        -:  214:      endif 
       1*:  215:      deallocate (A,B,C,D)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  216:
        1:  217:      end           
        -:  218: 
        -:  219:C ----------------------------------------REM1206
function rem1206_ called 1 returned 100% blocks executed 72%
        1:  220:      subroutine REM1206
        -:  221:      integer, parameter :: N = 16,NL=1000     
        1:  222:      integer, allocatable :: A(:),B(:),C(:),D(:)
        -:  223:      integer nloop,isumc,isuma 
        -:  224:      character*7 tname
        -:  225:                
        -:  226:!dvm$ distribute B(*)     
        -:  227:!dvm$ align (I) with B(I) ::A
        -:  228:
        1:  229:      tname='REM1206'
       1*:  230:      allocate (B(N),A(N),C(N),D(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
       17:  231:      isumc=0
       17:  232:      isuma=0    
        -:  233:      NNL=NL    
       17:  234:      call serial1(C,N,NNL)
        -:  235:      nloop=NL
        -:  236:
        -:  237:      kk=2
        -:  238:      kk1=3                                               
        -:  239:!dvm$ region out(A)
        -:  240:!dvm$ parallel (i) on A(i)
       17:  241:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  242:        A(i) = NL+i
        -:  243:      enddo
        -:  244:
        -:  245:!dvm$ end region
        -:  246:!dvm$ get_actual(A)
        -:  247:
        6:  248:      do i=1,N/kk-kk1
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -:  249:!dvm$  remote_access (A(kk*i+kk1))
        5:  250:       D(i)=A(kk*i+kk1)
        5:  251:       isumc=isumc+C(kk*i+kk1)
        6:  252:       isuma=isuma+D(i)
        -:  253:      enddo
        1:  254:      if (isumc .eq.isuma) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  255:          call ansyes(tname)
call    0 returned 100%
        -:  256:      else
    #####:  257:          call ansno(tname)
call    0 never executed
        -:  258:      endif 
       1*:  259:      deallocate (A,B,C,D)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
        -:  260:
        1:  261:      end           
        -:  262:C ---------------------------------------------REM1207
function rem1207_ called 1 returned 100% blocks executed 76%
        1:  263:      subroutine REM1207
        -:  264:      integer, parameter :: N = 16,NL=1000
        1:  265:      integer, allocatable :: A(:),B(:),C(:)
        -:  266:      integer nloop 
        -:  267:      character*7 tname
        -:  268:                
        -:  269:!dvm$ distribute B(*)    
        -:  270:!dvm$ align (I) with B(I) ::A
        -:  271:
        1:  272:      tname='REM1207'
       1*:  273:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:  274:      NNL=NL    
       17:  275:      call serial1(C,N,NNL)
       17:  276:      nloop=NL
        -:  277:
        -:  278:!dvm$ region local(A,B)
        -:  279:!dvm$ parallel (i) on A(i)
       17:  280:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  281:        A(i) = NL+i
        -:  282:      enddo
        -:  283:               
        -:  284:!dvm$ parallel (i) on B(i),remote_access(A(1))
       17:  285:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  286:         B(i) = A(1)
        -:  287:      enddo
        -:  288:
        -:  289:!dvm$ parallel (i) on A(i), reduction( min( nloop ) )
       17:  290:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      17*:  291:          if (B(i).ne.C(1)) nloop=min(nloop,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  292:      enddo
        -:  293:!dvm$ end region
        -:  294:!dvm$ get_actual(nloop)
        1:  295:      if (nloop .eq.NL) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  296:          call ansyes(tname)
call    0 returned 100%
        -:  297:      else
    #####:  298:          call ansno(tname)
call    0 never executed
        -:  299:      endif 
       1*:  300:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        -:  301:
        1:  302:      end
        -:  303:
        -:  304:C ---------------------------------------------REM1208
function rem1208_ called 1 returned 100% blocks executed 76%
        1:  305:      subroutine REM1208
        -:  306:      integer, parameter :: N = 16,NL=1000
        1:  307:      integer, allocatable :: A(:),B(:),C(:)
        -:  308:      integer nloop 
        -:  309:      character*7 tname
        -:  310:                
        -:  311:!dvm$ distribute B(*)    
        -:  312:!dvm$ align (I) with B(I) ::A
        -:  313:
        1:  314:      tname='REM1208'
       1*:  315:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:  316:      NNL=NL    
       17:  317:      call serial1(C,N,NNL)
       17:  318:      nloop=NL
        -:  319:!dvm$ region local(A,B)
        -:  320:!dvm$ parallel (i) on A(i)
       17:  321:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  322:        A(i) = NL+i
        -:  323:      enddo
        -:  324:               
        -:  325:!dvm$ parallel (i) on B(i),remote_access(A(N))
       17:  326:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  327:         B(i) = A(N)
        -:  328:      enddo
        -:  329:
        -:  330:!dvm$ parallel (i) on B(i), reduction( min( nloop ) )
       17:  331:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      17*:  332:          if (B(i).ne.C(N)) nloop=min(nloop, i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  333:      enddo
        -:  334:!dvm$ end region
        -:  335:!dvm$ get_actual(nloop)
        1:  336:      if (nloop .eq.NL) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  337:          call ansyes(tname)
call    0 returned 100%
        -:  338:      else
    #####:  339:          call ansno(tname)
call    0 never executed
        -:  340:      endif 
       1*:  341:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        -:  342:
        1:  343:      end
        -:  344:C ---------------------------------------------REM1209
        -:  345:
function rem1209_ called 1 returned 100% blocks executed 76%
        1:  346:      subroutine REM1209
        -:  347:      integer, parameter :: N = 16,NL=1000
        1:  348:      integer, allocatable :: A(:),B(:),C(:)
        -:  349:      integer nloop 
        -:  350:      character*7 tname
        -:  351:                
        -:  352:!dvm$ distribute B(*)   
        -:  353:!dvm$ align (I) with B(I) ::A
        -:  354:
        1:  355:      tname='REM1209'
       1*:  356:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:  357:      NNL=NL    
       17:  358:      call serial1(C,N,NNL)
       17:  359:      nloop=NL
        -:  360:!dvm$ region local(A,B)
        -:  361:!dvm$ parallel (i) on A(i)
       17:  362:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  363:        A(i) = NL+i
        -:  364:      enddo
        -:  365:               
        -:  366:!dvm$ parallel (i) on B(i),remote_access(A(N/2))
       17:  367:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  368:         B(i) = A(N/2)
        -:  369:      enddo
        -:  370:
        -:  371:!dvm$ parallel (i) on B(i), reduction( min( nloop ) )
       17:  372:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      17*:  373:          if (B(i).ne.C(N/2)) nloop=min(nloop, i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  374:      enddo
        -:  375:!dvm$ end region
        -:  376:!dvm$ get_actual(nloop)
        -:  377:
        1:  378:      if (nloop .eq.NL) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  379:         call ansyes(tname)
call    0 returned 100%
        -:  380:      else
    #####:  381:         call ansno(tname)
call    0 never executed
        -:  382:      endif 
       1*:  383:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        -:  384:
        1:  385:      end
        -:  386:C ---------------------------------------------REM1210
        -:  387:
function rem1210_ called 1 returned 100% blocks executed 76%
        1:  388:      subroutine REM1210
        -:  389:      integer, parameter :: N = 16,NL=1000
        1:  390:      integer, allocatable :: A(:),B(:),C(:)
        -:  391:      integer nloop 
        -:  392:      character*7 tname
        -:  393:                
        -:  394:!dvm$ distribute B(*)    
        -:  395:!dvm$ align (I) with B(I) ::A
        -:  396:
        1:  397:      tname='REM1210'
       1*:  398:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:  399:      NNL=NL    
       17:  400:      call serial1(C,N,NNL)
       17:  401:      nloop=NL
        -:  402:!dvm$ region local(A,B)
        -:  403:!dvm$ parallel (i) on A(i)
       17:  404:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  405:        A(i) = NL+i
        -:  406:      enddo
        -:  407:               
        -:  408:c !dvm$ parallel (i) on B(i),remote_access(A)
        -:  409:!dvm$ parallel (i) on B(i),remote_access(A(:))
       17:  410:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  411:         B(i) = A(i)
        -:  412:      enddo
        -:  413:
        -:  414:!dvm$ parallel (i) on B(i), reduction( min( nloop ) )
       17:  415:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      17*:  416:          if (B(i).ne.C(i)) nloop=min(nloop, i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  417:      enddo
        -:  418:!dvm$ end region
        -:  419:!dvm$ get_actual(nloop)
        -:  420:
        -:  421:               
        1:  422:      if (nloop .eq.NL) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  423:         call ansyes(tname)
call    0 returned 100%
        -:  424:      else
    #####:  425:         call ansno(tname)
call    0 never executed
        -:  426:      endif 
       1*:  427:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        -:  428:
        1:  429:      end
        -:  430:
        -:  431:C ---------------------------------------------REM1211
function rem1211_ called 1 returned 100% blocks executed 76%
        1:  432:      subroutine REM1211
        -:  433:      integer, parameter :: N = 16,NL=1000
        1:  434:      integer, allocatable :: A(:),B(:),C(:)
        -:  435:      integer nloop 
        -:  436:      character*7 tname
        -:  437:                
        -:  438:!dvm$ distribute B(*)     
        -:  439:!dvm$ align (I) with B(I) ::A
        -:  440:
        1:  441:      tname='REM1211'
       1*:  442:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:  443:      NNL=NL    
       17:  444:      call serial1(C,N,NNL)
       17:  445:      nloop=NL
        -:  446:
        -:  447:!dvm$ region local(A,B)
        -:  448:!dvm$ parallel (i) on A(i)
       17:  449:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  450:        A(i) = NL+i
        -:  451:      enddo
        -:  452:               
        -:  453:!dvm$ parallel (i) on B(i),remote_access(A(:))
       17:  454:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  455:         B(i) = A(i)
        -:  456:      enddo
        -:  457:
        -:  458:!dvm$ parallel (i) on B(i), reduction( min( nloop ) )
       17:  459:      do i=1,N
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      17*:  460:          if (B(i).ne.C(i)) nloop=min(nloop, i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  461:      enddo
        -:  462:!dvm$ end region
        -:  463:!dvm$ get_actual(nloop)
        1:  464:      if (nloop .eq.NL) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  465:         call ansyes(tname)
call    0 returned 100%
        -:  466:      else
    #####:  467:         call ansno(tname)
call    0 never executed
        -:  468:      endif 
       1*:  469:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        -:  470:
        1:  471:      end
        -:  472:
        -:  473:
        -:  474:C ---------------------------------------------REM1212
function rem1212_ called 1 returned 100% blocks executed 76%
        1:  475:      subroutine REM1212
        -:  476:      integer, parameter :: N = 16,NL=1000
        1:  477:      integer, allocatable :: A(:),B(:),C(:)
        -:  478:      integer nloop 
        -:  479:      character*7 tname
        -:  480:                
        -:  481:!dvm$ distribute B(*)   
        -:  482:!dvm$ align (I) with B(I) ::A
        -:  483:
        1:  484:      tname='REM1212'
       1*:  485:      allocate (B(N),A(N),C(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
call    8 never executed
        -:  486:      NNL=NL    
       17:  487:      call serial1(C,N,NNL)
       17:  488:      nloop=NL
        -:  489:      kk=2
        -:  490:      kk1=3         
        -:  491:!dvm$ region local(A,B)
        -:  492:!dvm$ parallel (i) on A(i)
       17:  493:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       17:  494:        A(i) = NL+i
        -:  495:      enddo
        -:  496:
        -:  497:!dvm$ parallel (i) on B(i),remote_access(A(:))
        6:  498:      do i=1,N/kk-kk1
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        6:  499:         B(i) = A(kk*i+kk1)
        -:  500:      enddo
        -:  501:
        -:  502:!dvm$ parallel (i) on B(i), reduction( min( nloop ) )
        6:  503:      do i=1,N/kk-kk1
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       6*:  504:          if (B(i).ne.C(kk*i+kk1)) nloop=min(nloop, i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  505:      enddo
        -:  506:!dvm$ end region
        -:  507:!dvm$ get_actual(nloop)
        1:  508:      if (nloop .eq.NL) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  509:         call ansyes(tname)
call    0 returned 100%
        -:  510:      else
    #####:  511:         call ansno(tname)
call    0 never executed
        -:  512:      endif 
       1*:  513:      deallocate (A,B,C)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
        -:  514:
        1:  515:      end
        -:  516:
        -:  517:C -----------------------------------------------         
function serial1_ called 0 returned 0% blocks executed 0%
    #####:  518:      subroutine serial1(AR,N,NL)
        -:  519:      integer AR(N)
        -:  520:      integer NL 
     204*:  521:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
branch  6 taken 6% (fallthrough)
branch  7 taken 94%
branch  8 taken 6% (fallthrough)
branch  9 taken 94%
branch 10 taken 6% (fallthrough)
branch 11 taken 94%
branch 12 taken 6% (fallthrough)
branch 13 taken 94%
branch 14 taken 6% (fallthrough)
branch 15 taken 94%
branch 16 taken 6% (fallthrough)
branch 17 taken 94%
branch 18 taken 6% (fallthrough)
branch 19 taken 94%
branch 20 taken 6% (fallthrough)
branch 21 taken 94%
branch 22 never executed (fallthrough)
branch 23 never executed
branch 24 taken 6% (fallthrough)
branch 25 taken 94%
     204*:  522:        AR(i) = NL+i
        -:  523:      enddo
    #####:  524:      end 
        -:  525:
function ansyes_ called 12 returned 100% blocks executed 100%
       12:  526:      subroutine ansyes(name)
        -:  527:      character*7 name
       12:  528:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
       12:  529:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  530:      subroutine ansno(name)
        -:  531:      character*7 name
    #####:  532:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  533:      end
