        -:    0:Source:results/1d/templ1/templ1.f
        -:    0:Graph:./results\1d\templ1\templ1.gcno
        -:    0:Data:./results\1d\templ1\templ1.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:       program TEMPL11
        -:    2:
        -:    3:c    TESTING template CLAUSE .       
        -:    4:
        1:    5:      print *,'===START OF templ11======================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C --------------------------------------------------
        -:    7:c 111 TEMPLATE arrA1[BLOCK]   ALIGN arrB[i] WITH arrA[i+4] 
        -:    8:c                             ALIGN arrC[i] WITH arrA[2*i+4] 
        1:    9:      call templ111
call    0 returned 100%
        -:   10:C --------------------------------------------------
        -:   11:c 121 TEMPLATE arrA1[BLOCK]   ALIGN arrB[][i]  WITH arrA[i]	
        -:   12:c                             ALIGN arrC[i][ ] WITH arrA[2*i+1]
        1:   13:      call templ121
call    0 returned 100%
        -:   14:C --------------------------------------------------
        1:   15:      print *,'=== END OF templ11 ======================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   16:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   17:
        -:   18:C ----------------------------------------------------templ111
        -:   19:c 111   TEMPLATE arrA[BLOCK]  ALIGN arrB[i] WITH arrA[i+4]  
        -:   20:c                             ALIGN arrC[i] WITH arrA[2*i+4] 
function templ111_ called 1 returned 100% blocks executed 84%
        1:   21:      subroutine templ111
        -:   22:      integer, parameter :: AN1=14,CN1=4,BN1=8,PN = 4,NL=1000,ER=10000
        -:   23:c     parameters for ALIGN arrB[i] WITH arrA[k1i * i + li]                                                 
        -:   24:      integer, parameter :: k1i=1,k2i=0,li=4
        -:   25:c     parameters for ALIGN arrC[i] WITH arrA[kc1i * i + lci]                                                 
        -:   26:      integer, parameter :: kc1i=2,kc2i=0,lci=4
        -:   27:      character*9 tname
        1:   28:      integer, allocatable :: C1(:),B1(:)
        -:   29:      integer erri,i,ib,ic
        -:   30:
        -:   31:cdvm$ template A1(AN1)               
        -:   32:cdvm$ ALIGN B1(i) WITH A1(k1i * i + li)
        -:   33:cdvm$ ALIGN C1(i) WITH A1(kc1i * i + lci)
        -:   34:cdvm$ distribute A1(BLOCK)    
        -:   35:
        1:   36:      tname='templ111'
       1*:   37:      allocate (C1(CN1),B1(BN1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        9:   38:      erri= ER
        -:   39:      NNL=NL 
        -:   40:!dvm$ actual (erri)
        -:   41:!dvm$ region
        -:   42:*dvm$ parallel (i) on B1(i)
        9:   43:      do i=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        9:   44:            B1(i) =i     
        -:   45:      enddo
        -:   46:
        -:   47:*dvm$ parallel (i) on C1(i)
        5:   48:      do i=1,CN1
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:   49:            C1(i) =i     
        -:   50:      enddo
        -:   51:
        -:   52:*dvm$ parallel (i) on A1(i), private (ib,erri,ic)
       15:   53:      do i=1,AN1
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:   54:             if (((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       14:   55:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
        -:   56:     *          (((i-li)/k1i) .le. BN1)) then
        8:   57:                ib = (i-li)/k1i
        8:   58:                if (B1(ib) .eq.(ib)) then     
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:   59:                else
       14:   60:                    erri = i
        -:   61:                endif 
        -:   62:             endif 
        -:   63:             if (((i-lci) .eq.(((i-lci)/kc1i) * kc1i)) .and.
       14:   64:     *          (((i-lci)/kc1i) .gt. 0)  .and.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 43%
branch  3 taken 57% (fallthrough)
        1:   65:     *          (((i-lci)/kc1i) .le. CN1)) then
        4:   66:                ic = (i-lci)/kc1i
        4:   67:                if (C1(ic) .eq.(ic)) then     
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:   68:                else
       14:   69:                    erri = i
        -:   70:                endif 
        -:   71:             endif 
        -:   72:      enddo
        -:   73:
        -:   74:!dvm$ end region
        -:   75:!dvm$ get_actual (erri)
        -:   76:
        1:   77:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   78:          call ansyes(tname)
call    0 returned 100%
        -:   79:      else
    #####:   80:          call ansno(tname)
call    0 never executed
        -:   81:      endif 
       1*:   82:      deallocate (C1,B1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:   83:
        1:   84:      end
        -:   85:C ----------------------------------------------------templ121
        -:   86:c   121	TEMPLATE arrA1[BLOCK]	
        -:   87:c       	ALIGN arrB[][i]  WITH arrA[i]	
        -:   88:c           ALIGN arrC[i][ ] WITH arrA[2*i+1]
function templ121_ called 1 returned 100% blocks executed 85%
        1:   89:      subroutine templ121
        -:   90:      integer, parameter :: AN1=9,CN1=4,CN2=4,BN1=8,BN2=8
        -:   91:      integer, parameter :: NL=1000,ER=10000
        -:   92:c     parameters for ALIGN arrB(*,i) WITH arrA[k1i*i+li]                                                
        -:   93:      integer, parameter :: k1i=1,k2i=0,li=0
        -:   94:c     parameters for ALIGN arrC(i,*) WITH arrA[kc1i*i+lci]                                                
        -:   95:      integer, parameter :: kc1i=2,kc2i=0,lci=1
        -:   96:      character*9 tname
        1:   97:      integer, allocatable :: C2(:,:),B2(:,:)
        -:   98:      integer erri,i,ib,jb,ic,jc
        -:   99:
        -:  100:cdvm$ template A1(AN1)               
        -:  101:cdvm$ ALIGN B2(*,i) WITH A1(k1i*i+li)
        -:  102:cdvm$ ALIGN C2(i,*) WITH A1(kc1i*i+lci)
        -:  103:cdvm$ distribute A1(BLOCK)    
        -:  104:
        1:  105:      tname='templ121'
       1*:  106:      allocate (C2(CN1,CN2),B2(BN1,BN2))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        9:  107:      erri= ER
        -:  108:      NNL=NL 
        -:  109:
        -:  110:!dvm$ actual (erri)
        -:  111:!dvm$ region
        -:  112:
        -:  113:*dvm$ parallel (i,j) on B2(i,j)
        9:  114:      do i=1,BN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  115:          do j=1,BN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       72:  116:            B2(i,j) =(i*NL+j)     
        -:  117:          enddo
        -:  118:      enddo
        -:  119:
        -:  120:*dvm$ parallel (i,j) on C2(i,j)
        5:  121:      do i=1,CN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:  122:          do j=1,CN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       20:  123:            C2(i,j) =(i*NL+j)     
        -:  124:          enddo
        -:  125:      enddo
        -:  126:
        -:  127:*dvm$ parallel (i) on A1(i), private (j,ib,jb,erri,jc,ic,k)
       10:  128:      do i=1,AN1
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
       81:  129:          do j=1,BN1
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  130:             if (  
        -:  131:     *          ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
       72:  132:     *          (((i-li)/k1i) .gt. 0)  .and.
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        9:  133:     *          (((i-li)/k1i) .le. BN2)  )then
       64:  134:                ib = j
       64:  135:                jb = (i-li)/k1i
       64:  136:                if (B2(ib,jb) .eq.(ib*NL+jb)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  137:                else
    #####:  138:                    erri = i*NL/10+j
        -:  139:                endif 
        -:  140:             endif   
        -:  141:          enddo
       46:  142:          do k=1,CN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  143:             if (  
        -:  144:     *          ((i-lci) .eq.(((i-lci)/kc1i) * kc1i)) .and.
       36:  145:     *          (((i-lci)/kc1i) .gt. 0)  .and.
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
branch  2 taken 80% (fallthrough)
branch  3 taken 20%
        9:  146:     *          (((i-lci)/kc1i) .le. CN1)  )then
       16:  147:                jc = k
       16:  148:                ic = (i-lci)/kc1i
       16:  149:                if (C2(ic,jc) .eq.(ic*NL+jc)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  150:                else
    #####:  151:                    erri = i*NL/10+j
        -:  152:                endif 
        -:  153:             endif   
        -:  154:          enddo
        -:  155:      enddo
        -:  156:
        -:  157:!dvm$ end region
        -:  158:!dvm$ get_actual (erri)
        -:  159:
        -:  160:
        1:  161:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  162:          call ansyes(tname)
call    0 returned 100%
        -:  163:          else
    #####:  164:          call ansno(tname)
call    0 never executed
        -:  165:      endif 
       1*:  166:      deallocate (C2,B2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  167:
        1:  168:      end
        -:  169:C -------------------------------------------------
        -:  170:
        -:  171:
function ansyes_ called 2 returned 100% blocks executed 100%
        2:  172:      subroutine ansyes(name)
        -:  173:      character*9 name
        2:  174:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        2:  175:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  176:      subroutine ansno(name)
        -:  177:      character*9 name
    #####:  178:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  179:      end
        -:  180:         
