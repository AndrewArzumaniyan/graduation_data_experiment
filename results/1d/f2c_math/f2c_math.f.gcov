        -:    0:Source:results/1d/f2c_math/f2c_math.f
        -:    0:Graph:./results\1d\f2c_math\f2c_math.gcno
        -:    0:Data:./results\1d\f2c_math\f2c_math.gcda
        -:    0:Runs:1
        -:    1:
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    2:      program INTRINSICS
        1:    3:      print *, '=== START OF F2C_MATH intrinsic test ==========='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    4:
        -:    5:c     TESTING abs GENERIC INTRINSIC
        -:    6:c     integer*4 abs(integer*4)
        1:    7:      call abs1
call    0 returned 100%
        -:    8:c     real*4 abs(real*4)
        1:    9:      call abs2
call    0 returned 100%
        -:   10:c     real*8 abs(real*8)
        1:   11:      call abs3
call    0 returned 100%
        -:   12:c     real*4 abs(complex*8)
        1:   13:      call abs4
call    0 returned 100%
        -:   14:c     real*8 abs(complex*16)
        1:   15:      call abs5
call    0 returned 100%
        -:   16:c     real*4 cabs(complex*8)
        1:   17:      call abs6
call    0 returned 100%
        -:   18:c     real*8 dabs(real*8)
        1:   19:      call abs7
call    0 returned 100%
        -:   20:c     integer*4 iabs(integer*4)
        1:   21:      call abs8
call    0 returned 100%
        -:   22:c     real*8 cdabs(complex*16)
        1:   23:      call abs14
call    0 returned 100%
        -:   24:c     real*8 zabs(complex*16)
        1:   25:      call abs15
call    0 returned 100%
        -:   26:
        -:   27:c     TESTING acos GENERIC INTRINSIC
        -:   28:c     real*4 acos(real*4)
        1:   29:      call acos1
call    0 returned 100%
        -:   30:c     real*8 acos(real*8)
        1:   31:      call acos2
call    0 returned 100%
        -:   32:c     real*8 dacos(real*8)
        1:   33:      call acos3
call    0 returned 100%
        -:   34:
        -:   35:c     TESTING acosh GENERIC INTRINSIC
        -:   36:c     real*4 acosh(real*4)
        1:   37:      call acosh1
call    0 returned 100%
        -:   38:c     real*8 acosh(real*8)
        1:   39:      call acosh2
call    0 returned 100%
        -:   40:c     real*8 dacosh(real*8)
        1:   41:      call acosh3
call    0 returned 100%
        -:   42:
        -:   43:c     TESTING aimag GENERIC INTRINSIC
        -:   44:c     real*4 aimag(complex*8)
        1:   45:      call aimag1
call    0 returned 100%
        -:   46:c     real*8 aimag(complex*16)
        1:   47:      call aimag2
call    0 returned 100%
        -:   48:c     real*4 imag(complex*8)
        1:   49:      call aimag3
call    0 returned 100%
        -:   50:c     real*8 imag(complex*16)
        1:   51:      call aimag4
call    0 returned 100%
        -:   52:c     real*8 dimag(complex*16)
        1:   53:      call aimag5
call    0 returned 100%
        -:   54:
        -:   55:c     TESTING asin GENERIC INTRINSIC
        -:   56:c     real*4 asin(real*4)
        1:   57:      call asin1
call    0 returned 100%
        -:   58:c     real*8 asin(real*8)
        1:   59:      call asin2
call    0 returned 100%
        -:   60:c     real*8 dasin(real*8)
        1:   61:      call asin3
call    0 returned 100%
        -:   62:
        -:   63:c     TESTING asinh GENERIC INTRINSIC
        -:   64:c     real*4 asinh(real*4)
        1:   65:      call asinh1
call    0 returned 100%
        -:   66:c     real*8 asinh(real*8)
        1:   67:      call asinh2
call    0 returned 100%
        -:   68:c     real*8 dasinh(real*8)
        1:   69:      call asinh3
call    0 returned 100%
        -:   70:
        -:   71:c     TESTING atan GENERIC INTRINSIC
        -:   72:c     real*4 atan(real*4)
        1:   73:      call atan1
call    0 returned 100%
        -:   74:c     real*8 atan(real*8)
        1:   75:      call atan2_
call    0 returned 100%
        -:   76:c     real*8 datan(real*8)
        1:   77:      call atan3
call    0 returned 100%
        -:   78:
        -:   79:c     TESTING atan2 GENERIC INTRINSIC
        -:   80:c     real*4 atan2(real*4, real*4)
        1:   81:      call atan21
call    0 returned 100%
        -:   82:c     real*8 atan2(real*8, real*8)
        1:   83:      call atan22
call    0 returned 100%
        -:   84:c     real*8 datan2(real*8, real*8)
        1:   85:      call atan23
call    0 returned 100%
        -:   86:
        -:   87:c     TESTING atanh GENERIC INTRINSIC
        -:   88:c     real*4 atanh(real*4)
        1:   89:      call atanh1
call    0 returned 100%
        -:   90:c     real*8 atanh(real*8)
        1:   91:      call atanh2
call    0 returned 100%
        -:   92:c     real*8 datanh(real*8)
        1:   93:      call atanh3
call    0 returned 100%
        -:   94:
        -:   95:c     TESTING bessel_j0 GENERIC INTRINSIC
        -:   96:c     real*4 bessel_j0(real*4)
        1:   97:      call bessel_j01
call    0 returned 100%
        -:   98:c     real*8 bessel_j0(real*8)
        1:   99:      call bessel_j02
call    0 returned 100%
        -:  100:
        -:  101:c     TESTING bessel_j1 GENERIC INTRINSIC
        -:  102:c     real*4 bessel_j1(real*4)
        1:  103:      call bessel_j11
call    0 returned 100%
        -:  104:c     real*8 bessel_j1(real*8)
        1:  105:      call bessel_j12
call    0 returned 100%
        -:  106:
        -:  107:c     TESTING bessel_jn GENERIC INTRINSIC
        -:  108:c     real*4 bessel_jn(integer*4, real*4)
        1:  109:      call bessel_jn1
call    0 returned 100%
        -:  110:c     real*8 bessel_jn(integer*4, real*8)
        1:  111:      call bessel_jn2
call    0 returned 100%
        -:  112:
        -:  113:c     TESTING bessel_y0 GENERIC INTRINSIC
        -:  114:c     real*4 bessel_y0(real*4)
        1:  115:      call bessel_y01
call    0 returned 100%
        -:  116:c     real*8 bessel_y0(real*8)
        1:  117:      call bessel_y02
call    0 returned 100%
        -:  118:
        -:  119:c     TESTING bessel_y1 GENERIC INTRINSIC
        -:  120:c     real*4 bessel_y1(real*4)
        1:  121:      call bessel_y11
call    0 returned 100%
        -:  122:c     real*8 bessel_y1(real*8)
        1:  123:      call bessel_y12
call    0 returned 100%
        -:  124:c     TESTING bessel_yn GENERIC INTRINSIC
        -:  125:c     real*4 bessel_yn(integer*4, real*4)
        1:  126:      call bessel_yn1
call    0 returned 100%
        -:  127:c     real*8 bessel_yn(integer*4, real*8)
        1:  128:      call bessel_yn2
call    0 returned 100%
        -:  129:c     TESTING btest GENERIC INTRINSIC
        -:  130:c     logical*1 btest(integer*1)
        1:  131:      call btest1
call    0 returned 100%
        -:  132:c     logical*2 btest(integer*2)
        1:  133:      call btest2
call    0 returned 100%
        -:  134:c     logical*4 btest(integer*4)
        1:  135:      call btest3
call    0 returned 100%
        -:  136:c     logical*8 btest(integer*8)
        1:  137:      call btest4
call    0 returned 100%
        -:  138:
        -:  139:c     TESTING cmplx GENERIC INTRINSIC
        -:  140:c     complex*8 cmplx(integer*4)
        1:  141:      call cmplx1
call    0 returned 100%
        -:  142:c     complex*8 cmplx(real*4)
        1:  143:      call cmplx2
call    0 returned 100%
        -:  144:c     complex*8 cmplx(real*8)
        1:  145:      call cmplx3
call    0 returned 100%
        -:  146:c     complex*8 cmplx(complex*8)
        1:  147:      call cmplx4
call    0 returned 100%
        -:  148:c     complex*8 cmplx(complex*16)
        1:  149:      call cmplx5
call    0 returned 100%
        -:  150:c     complex*8 cmplx(integer*4, integer*4)
        1:  151:      call cmplx6
call    0 returned 100%
        -:  152:c     complex*8 cmplx(real*4, real*4)
        1:  153:      call cmplx7
call    0 returned 100%
        -:  154:c     complex*8 cmplx(real*8, real*8)
        1:  155:      call cmplx8
call    0 returned 100%
        -:  156:c     complex*8 cmplx(integer*4, integer*4, 4)
        1:  157:      call cmplx9
call    0 returned 100%
        -:  158:c     complex*8 cmplx(real*4, real*4, 4)
        1:  159:      call cmplx10
call    0 returned 100%
        -:  160:c     complex*8 cmplx(real*8, real*8, 4)
        1:  161:      call cmplx11
call    0 returned 100%
        -:  162:c     complex*16 cmplx(integer*4, integer*4, 8)
        1:  163:      call cmplx12
call    0 returned 100%
        -:  164:c     complex*16 cmplx(real*4, real*4, 8)
        1:  165:      call cmplx13
call    0 returned 100%
        -:  166:c     complex*16 cmplx(real*8, real*8, 8)
        1:  167:      call cmplx14
call    0 returned 100%
        -:  168:c     complex*16 dcmplx(integer*4)
        1:  169:      call cmplx15
call    0 returned 100%
        -:  170:c     complex*16 dcmplx(real*4)
        1:  171:      call cmplx16
call    0 returned 100%
        -:  172:c     complex*16 dcmplx(real*8)
        1:  173:      call cmplx17
call    0 returned 100%
        -:  174:c     complex*16 dcmplx(complex*8)
        1:  175:      call cmplx18
call    0 returned 100%
        -:  176:c     complex*16 dcmplx(complex*16)
        1:  177:      call cmplx19
call    0 returned 100%
        -:  178:c     complex*16 dcmplx(integer*4, integer*4)
        1:  179:      call cmplx20
call    0 returned 100%
        -:  180:c     complex*16 dcmplx(real*4, real*4)
        1:  181:      call cmplx21
call    0 returned 100%
        -:  182:c     complex*16 dcmplx(real*8, real*8)
        1:  183:      call cmplx22
call    0 returned 100%
        -:  184:
        -:  185:c     TESTING conjg GENERIC INTRINSIC
        -:  186:c     complex*8 conjg(complex*8)
        1:  187:      call conjg1
call    0 returned 100%
        -:  188:c     complex*16 conjg(complex*16)
        1:  189:      call conjg2
call    0 returned 100%
        -:  190:c     complex*16 dconjg(complex*16)
        1:  191:      call conjg3
call    0 returned 100%
        -:  192:
        -:  193:c     TESTING cos GENERIC INTRINSIC
        -:  194:c     real*4 cos(real*4)
        1:  195:      call cos1
call    0 returned 100%
        -:  196:c     real*8 cos(real*8)
        1:  197:      call cos2
call    0 returned 100%
        -:  198:c     complex*8 cos(complex*8)
        1:  199:      call cos3
call    0 returned 100%
        -:  200:c     complex*16 cos(complex*16)
        1:  201:      call cos4
call    0 returned 100%
        -:  202:c     real*8 dcos(real*8)
        1:  203:      call cos5
call    0 returned 100%
        -:  204:c     complex*8 ccos(complex*8)
        1:  205:      call cos6
call    0 returned 100%
        -:  206:c     complex*16 cdcos(complex*16)
        1:  207:      call cos7
call    0 returned 100%
        -:  208:c     complex*16 zcos(complex*16)
        1:  209:      call cos8
call    0 returned 100%
        -:  210:
        -:  211:c     TESTING cosh GENERIC INTRINSIC
        -:  212:c     real*4 cosh(real*4)
        1:  213:      call cosh1
call    0 returned 100%
        -:  214:c     real*8 cosh(real*8)
        1:  215:      call cosh2
call    0 returned 100%
        -:  216:c     real*8 dcosh(real*8)
        1:  217:      call cosh3
call    0 returned 100%
        -:  218:
        -:  219:c     TESTING dble GENERIC INTRINSIC
        -:  220:c     real*8 dble(integer*1)
        1:  221:      call dble1
call    0 returned 100%
        -:  222:c     real*8 dble(integer*2)
        1:  223:      call dble2
call    0 returned 100%
        -:  224:c     real*8 dble(integer*4)
        1:  225:      call dble3
call    0 returned 100%
        -:  226:c     real*8 dble(integer*8)
        1:  227:      call dble4
call    0 returned 100%
        -:  228:c     real*8 dble(real*4)
        1:  229:      call dble5
call    0 returned 100%
        -:  230:c     real*8 dble(real*8)
        1:  231:      call dble6
call    0 returned 100%
        -:  232:c     real*8 dble(complex*8)
        1:  233:      call dble7
call    0 returned 100%
        -:  234:c     real*8 dble(complex*16)
        1:  235:      call dble8
call    0 returned 100%
        -:  236:
        -:  237:c     TESTING dfloat GENERIC INTRINSIC
        -:  238:c     real*8 dfloat(integer*1)
        1:  239:      call dfloat1
call    0 returned 100%
        -:  240:c     real*8 dfloat(integer*2)
        1:  241:      call dfloat2
call    0 returned 100%
        -:  242:c     real*8 dfloat(integer*4)
        1:  243:      call dfloat3
call    0 returned 100%
        -:  244:c     real*8 dfloat(integer*8)
        1:  245:      call dfloat4
call    0 returned 100%
        -:  246:
        -:  247:c     TESTING dim GENERIC INTRINSIC
        -:  248:c     integer*1 dim(integer*1)
        1:  249:      call dim1
call    0 returned 100%
        -:  250:c     integer*2 dim(integer*2)
        1:  251:      call dim2
call    0 returned 100%
        -:  252:c     integer*4 dim(integer*4)
        1:  253:      call dim3
call    0 returned 100%
        -:  254:c     integer*8 dim(integer*8)
        1:  255:      call dim4
call    0 returned 100%
        -:  256:c     real*4 dim(real*4)
        1:  257:      call dim5
call    0 returned 100%
        -:  258:c     real*8 dim(real*8)
        1:  259:      call dim6
call    0 returned 100%
        -:  260:c     real*8 ddim(real*8)
        1:  261:      call dim13
call    0 returned 100%
        -:  262:
        -:  263:c     TESTING dprod SPECIFIC INTRINSIC
        -:  264:c     real*8 dprod(real*4)
        1:  265:      call dprod1
call    0 returned 100%
        -:  266:
        -:  267:c     TESTING dreal SPECIFIC INTRINSIC
        -:  268:c     real*8 dreal(complex*16)
        1:  269:      call dreal1
call    0 returned 100%
        -:  270:
        -:  271:c     TESTING dshiftl SPECIFIC INTRINSIC
        -:  272:c     integer*8 dshiftl(integer*8)
        1:  273:      call dshiftl1
call    0 returned 100%
        -:  274:
        -:  275:c     TESTING dshiftr SPECIFIC INTRINSIC
        -:  276:c     integer*8 dshiftr(integer*8)
        1:  277:      call dshiftr1
call    0 returned 100%
        -:  278:
        -:  279:c     TESTING erf GENERIC INTRINSIC
        -:  280:c     real*4 erf(real*4)
        1:  281:      call erf1
call    0 returned 100%
        -:  282:c     real*8 erf(real*8)
        1:  283:      call erf2
call    0 returned 100%
        -:  284:c     real*8 derf(real*8)
        1:  285:      call erf3
call    0 returned 100%
        -:  286:
        -:  287:c     TESTING erfc GENERIC INTRINSIC
        -:  288:c     real*4 erfc(real*4)
        1:  289:      call erfc1
call    0 returned 100%
        -:  290:c     real*8 erfc(real*8)
        1:  291:      call erfc2
call    0 returned 100%
        -:  292:c     real*8 derfc(real*8)
        1:  293:      call erfc3
call    0 returned 100%
        -:  294:
        -:  295:c     TESTING erfc_scaled GENERIC INTRINSIC
        -:  296:c     real*4 erfc_scaled(real*4)
        1:  297:      call erfc_scaled1
call    0 returned 100%
        -:  298:c     real*8 erfc_scaled(real*8)
        1:  299:      call erfc_scaled2
call    0 returned 100%
        -:  300:
        -:  301:c     TESTING exp GENERIC INTRINSIC
        -:  302:c     real*4 exp(real*4)
        1:  303:      call exp1
call    0 returned 100%
        -:  304:c     real*8 exp(real*8)
        1:  305:      call exp2
call    0 returned 100%
        -:  306:c     complex*8 exp(complex*8)
        1:  307:      call exp3
call    0 returned 100%
        -:  308:c     complex*16 exp(complex*16)
        1:  309:      call exp4
call    0 returned 100%
        -:  310:c     real*8 dexp(real*8)
        1:  311:      call exp5
call    0 returned 100%
        -:  312:c     complex*8 cexp(complex*8)
        1:  313:      call exp6
call    0 returned 100%
        -:  314:c     complex*16 cdexp(complex*16)
        1:  315:      call exp7
call    0 returned 100%
        -:  316:c     complex*16 zexp(complex*16)
        1:  317:      call exp8
call    0 returned 100%
        -:  318:
        -:  319:c     TESTING gamma GENERIC INTRINSIC
        -:  320:c     real*4 gamma(real*4)
        1:  321:      call gamma1
call    0 returned 100%
        -:  322:c     real*8 gamma(real*8)
        1:  323:      call gamma2
call    0 returned 100%
        -:  324:
        -:  325:c     TESTING hypot GENERIC INTRINSIC
        -:  326:c     real*4 hypot(real*4)
        1:  327:      call hypot1
call    0 returned 100%
        -:  328:c     real*8 hypot(real*8)
        1:  329:      call hypot2
call    0 returned 100%
        -:  330:
        -:  331:c     TESTING iand GENERIC INTRINSIC
        -:  332:c     integer*1 iand(integer*1)
        1:  333:      call iand1
call    0 returned 100%
        -:  334:c     integer*2 iand(integer*2)
        1:  335:      call iand2
call    0 returned 100%
        -:  336:c     integer*4 iand(integer*4)
        1:  337:      call iand3
call    0 returned 100%
        -:  338:c     integer*8 iand(integer*8)
        1:  339:      call iand4
call    0 returned 100%
        -:  340:c     integer*1 and(integer*1)
        1:  341:      call iand5
call    0 returned 100%
        -:  342:c     integer*2 and(integer*2)
        1:  343:      call iand6
call    0 returned 100%
        -:  344:c     integer*4 and(integer*4)
        1:  345:      call iand7
call    0 returned 100%
        -:  346:c     integer*8 and(integer*8)
        1:  347:      call iand8
call    0 returned 100%
        -:  348:
        -:  349:c     TESTING ibclr GENERIC INTRINSIC
        -:  350:c     integer*1 ibclr(integer*1)
        1:  351:      call ibclr1
call    0 returned 100%
        -:  352:c     integer*2 ibclr(integer*2)
        1:  353:      call ibclr2
call    0 returned 100%
        -:  354:c     integer*4 ibclr(integer*4)
        1:  355:      call ibclr3
call    0 returned 100%
        -:  356:c     integer*8 ibclr(integer*8)
        1:  357:      call ibclr4
call    0 returned 100%
        -:  358:
        -:  359:c     TESTING ibits GENERIC INTRINSIC
        -:  360:c     integer*1 ibits(integer*1)
        1:  361:      call ibits1
call    0 returned 100%
        -:  362:c     integer*2 ibits(integer*2)
        1:  363:      call ibits2
call    0 returned 100%
        -:  364:c     integer*4 ibits(integer*4)
        1:  365:      call ibits3
call    0 returned 100%
        -:  366:c     integer*8 ibits(integer*8)
        1:  367:      call ibits4
call    0 returned 100%
        -:  368:
        -:  369:c     TESTING ibset GENERIC INTRINSIC
        -:  370:c     integer*1 ibset(integer*1)
        1:  371:      call ibset1
call    0 returned 100%
        -:  372:c     integer*2 ibset(integer*2)
        1:  373:      call ibset2
call    0 returned 100%
        -:  374:c     integer*4 ibset(integer*4)
        1:  375:      call ibset3
call    0 returned 100%
        -:  376:c     integer*8 ibset(integer*8)
        1:  377:      call ibset4
call    0 returned 100%
        -:  378:
        -:  379:c     TESTING ieor GENERIC INTRINSIC
        -:  380:c     integer*1 ieor(integer*1)
        1:  381:      call ieor1
call    0 returned 100%
        -:  382:c     integer*2 ieor(integer*2)
        1:  383:      call ieor2
call    0 returned 100%
        -:  384:c     integer*4 ieor(integer*4)
        1:  385:      call ieor3
call    0 returned 100%
        -:  386:c     integer*8 ieor(integer*8)
        1:  387:      call ieor4
call    0 returned 100%
        -:  388:c     integer*1 xor(integer*1)
        1:  389:      call ieor9
call    0 returned 100%
        -:  390:c     integer*2 xor(integer*2)
        1:  391:      call ieor10
call    0 returned 100%
        -:  392:c     integer*4 xor(integer*4)
        1:  393:      call ieor11
call    0 returned 100%
        -:  394:c     integer*8 xor(integer*8)
        1:  395:      call ieor12
call    0 returned 100%
        -:  396:
        -:  397:c     TESTING ior GENERIC INTRINSIC
        -:  398:c     integer*1 ior(integer*1)
        1:  399:      call ior1
call    0 returned 100%
        -:  400:c     integer*2 ior(integer*2)
        1:  401:      call ior2
call    0 returned 100%
        -:  402:c     integer*4 ior(integer*4)
        1:  403:      call ior3
call    0 returned 100%
        -:  404:c     integer*8 ior(integer*8)
        1:  405:      call ior4
call    0 returned 100%
        -:  406:c     integer*1 or(integer*1)
        1:  407:      call ior5
call    0 returned 100%
        -:  408:c     integer*2 or(integer*2)
        1:  409:      call ior6
call    0 returned 100%
        -:  410:c     integer*4 or(integer*4)
        1:  411:      call ior7
call    0 returned 100%
        -:  412:c     integer*8 or(integer*8)
        1:  413:      call ior8
call    0 returned 100%
        -:  414:
        -:  415:c     TESTING ishft GENERIC INTRINSIC
        -:  416:c     integer*1 ishft(integer*1)
        1:  417:      call ishft1
call    0 returned 100%
        -:  418:c     integer*2 ishft(integer*2)
        1:  419:      call ishft2
call    0 returned 100%
        -:  420:c     integer*4 ishft(integer*4)
        1:  421:      call ishft3
call    0 returned 100%
        -:  422:c     integer*8 ishft(integer*8)
        1:  423:      call ishft4
call    0 returned 100%
        -:  424:
        -:  425:c     TESTING lshift GENERIC INTRINSIC
        -:  426:c     integer*1 lshift(integer*1)
        1:  427:      call lshift1
call    0 returned 100%
        -:  428:c     integer*2 lshift(integer*2)
        1:  429:      call lshift2
call    0 returned 100%
        -:  430:c     integer*4 lshift(integer*4)
        1:  431:      call lshift3
call    0 returned 100%
        -:  432:c     integer*8 lshift(integer*8)
        1:  433:      call lshift4
call    0 returned 100%
        -:  434:
        -:  435:c     TESTING rshift GENERIC INTRINSIC
        -:  436:c     integer*1 rshift(integer*1)
        1:  437:      call rshift1
call    0 returned 100%
        -:  438:c     integer*2 rshift(integer*2)
        1:  439:      call rshift2
call    0 returned 100%
        -:  440:c     integer*4 rshift(integer*4)
        1:  441:      call rshift3
call    0 returned 100%
        -:  442:c     integer*8 rshift(integer*8)
        1:  443:      call rshift4
call    0 returned 100%
        -:  444:
        -:  445:c     TESTING ishftc GENERIC INTRINSIC
        -:  446:c     integer*1 ishftc(integer*1)
        1:  447:      call ishftc1
call    0 returned 100%
        -:  448:c     integer*2 ishftc(integer*2)
        1:  449:      call ishftc2
call    0 returned 100%
        -:  450:c     integer*4 ishftc(integer*4)
        1:  451:      call ishftc3
call    0 returned 100%
        -:  452:c     integer*8 ishftc(integer*8)
        1:  453:      call ishftc4
call    0 returned 100%
        -:  454:c     integer*1 ishftc(integer*1)
        1:  455:      call ishftc5
call    0 returned 100%
        -:  456:c     integer*2 ishftc(integer*2)
        1:  457:      call ishftc6
call    0 returned 100%
        -:  458:c     integer*4 ishftc(integer*4)
        1:  459:      call ishftc7
call    0 returned 100%
        -:  460:c     integer*8 ishftc(integer*8)
        1:  461:      call ishftc8
call    0 returned 100%
        -:  462:
        -:  463:c     TESTING log GENERIC INTRINSIC
        -:  464:c     real*4 log(real*4)
        1:  465:      call log1
call    0 returned 100%
        -:  466:c     real*8 log(real*8)
        1:  467:      call log2
call    0 returned 100%
        -:  468:c     complex*8 log(complex*8)
        1:  469:      call log3
call    0 returned 100%
        -:  470:c     complex*16 log(complex*16)
        1:  471:      call log4
call    0 returned 100%
        -:  472:c     real*4 alog(real*4)
        1:  473:      call log5
call    0 returned 100%
        -:  474:c     real*8 dlog(real*8)
        1:  475:      call log6
call    0 returned 100%
        -:  476:c     complex*8 clog(complex*8)
        1:  477:      call log7
call    0 returned 100%
        -:  478:c     complex*16 cdlog(complex*16)
        1:  479:      call log8
call    0 returned 100%
        -:  480:c     complex*16 zlog(complex*16)
        1:  481:      call log9
call    0 returned 100%
        -:  482:
        -:  483:c     TESTING log10 GENERIC INTRINSIC
        -:  484:c     real*4 log10(real*4)
        1:  485:      call log101
call    0 returned 100%
        -:  486:c     real*8 log10(real*8)
        1:  487:      call log102
call    0 returned 100%
        -:  488:
        -:  489:c     real*4 alog10(real*4)
        1:  490:      call log105
call    0 returned 100%
        -:  491:c     real*8 dlog10(real*8)
        1:  492:      call log106
call    0 returned 100%
        -:  493:
        -:  494:c     TESTING log_gamma GENERIC INTRINSIC
        -:  495:c     real*4 log_gamma(real*4)
        1:  496:      call log_gamma1
call    0 returned 100%
        -:  497:c     real*8 log_gamma(real*8)
        1:  498:      call log_gamma2
call    0 returned 100%
        -:  499:
        -:  500:c     TESTING max GENERIC INTRINSIC
        -:  501:c     integer*1 max(integer*1)
        1:  502:      call max1_
call    0 returned 100%
        -:  503:c     integer*2 max(integer*2)
        1:  504:      call max2_
call    0 returned 100%
        -:  505:c     integer*4 max(integer*4)
        1:  506:      call max3_
call    0 returned 100%
        -:  507:c     integer*8 max(integer*8)
        1:  508:      call max4_
call    0 returned 100%
        -:  509:c     real*4 max(real*4)
        1:  510:      call max5_
call    0 returned 100%
        -:  511:c     real*8 max(real*8)
        1:  512:      call max6_
call    0 returned 100%
        -:  513:c     integer*4 max0(integer*4)
        1:  514:      call max7_
call    0 returned 100%
        -:  515:c     real*4 amax1(real*4)
        1:  516:      call max8_
call    0 returned 100%
        -:  517:c     real*8 dmax1(real*8)
        1:  518:      call max9_
call    0 returned 100%
        -:  519:
        -:  520:c     integer*4 max1(real*4)
        1:  521:      call max13_
call    0 returned 100%
        -:  522:
        -:  523:c     real*4 amax0(integer*4)
        1:  524:      call max17_
call    0 returned 100%
        -:  525:
        -:  526:c     TESTING merge_bits GENERIC INTRINSIC
        -:  527:c     integer*1 merge_bits(integer*1)
        1:  528:      call merge_bits1
call    0 returned 100%
        -:  529:c     integer*2 merge_bits(integer*2)
        1:  530:      call merge_bits2
call    0 returned 100%
        -:  531:c     integer*4 merge_bits(integer*4)
        1:  532:      call merge_bits3
call    0 returned 100%
        -:  533:c     integer*8 merge_bits(integer*8)
        1:  534:      call merge_bits4
call    0 returned 100%
        -:  535:
        -:  536:c     TESTING min GENERIC INTRINSIC
        -:  537:c     integer*1 min(integer*1)
        1:  538:      call min1_
call    0 returned 100%
        -:  539:c     integer*2 min(integer*2)
        1:  540:      call min2_
call    0 returned 100%
        -:  541:c     integer*4 min(integer*4)
        1:  542:      call min3_
call    0 returned 100%
        -:  543:c     integer*8 min(integer*8)
        1:  544:      call min4_
call    0 returned 100%
        -:  545:c     real*4 min(real*4)
        1:  546:      call min5_
call    0 returned 100%
        -:  547:c     real*8 min(real*8)
        1:  548:      call min6_
call    0 returned 100%
        -:  549:c     integer*4 min0(integer*4)
        1:  550:      call min7_
call    0 returned 100%
        -:  551:c     real*4 amin1(real*4)
        1:  552:      call min8_
call    0 returned 100%
        -:  553:c     real*8 dmin1(real*8)
        1:  554:      call min9_
call    0 returned 100%
        -:  555:c     integer*4 min1(real*4)
        1:  556:      call min13_
call    0 returned 100%
        -:  557:c     real*4 amin0(integer*4)
        1:  558:      call min17_
call    0 returned 100%
        -:  559:
        -:  560:c     TESTING mod GENERIC INTRINSIC
        -:  561:c     integer*1 mod(integer*1)
        1:  562:      call mod1
call    0 returned 100%
        -:  563:c     integer*2 mod(integer*2)
        1:  564:      call mod2
call    0 returned 100%
        -:  565:c     integer*4 mod(integer*4)
        1:  566:      call mod3
call    0 returned 100%
        -:  567:c     integer*8 mod(integer*8)
        1:  568:      call mod4
call    0 returned 100%
        -:  569:c     real*4 amod(real*4)
        1:  570:      call mod10
call    0 returned 100%
        -:  571:c     real*8 dmod(real*8)
        1:  572:      call mod11
call    0 returned 100%
        -:  573:
        -:  574:c     TESTING modulo GENERIC INTRINSIC
        -:  575:c     integer*1 modulo(integer*1)
        1:  576:      call modulo1
call    0 returned 100%
        -:  577:c     integer*2 modulo(integer*2)
        1:  578:      call modulo2
call    0 returned 100%
        -:  579:c     integer*4 modulo(integer*4)
        1:  580:      call modulo3
call    0 returned 100%
        -:  581:c     integer*8 modulo(integer*8)
        1:  582:      call modulo4
call    0 returned 100%
        -:  583:c     real*4 modulo(real*4)
        1:  584:      call modulo5
call    0 returned 100%
        -:  585:c     real*8 modulo(real*8)
        1:  586:      call modulo6
call    0 returned 100%
        -:  587:
        -:  588:c     TESTING not GENERIC INTRINSIC
        -:  589:c     integer*1 not(integer*1)
        1:  590:      call not1
call    0 returned 100%
        -:  591:c     integer*2 not(integer*2)
        1:  592:      call not2
call    0 returned 100%
        -:  593:c     integer*4 not(integer*4)
        1:  594:      call not3
call    0 returned 100%
        -:  595:c     integer*8 not(integer*8)
        1:  596:      call not4
call    0 returned 100%
        -:  597:
        -:  598:c     TESTING popcnt GENERIC INTRINSIC
        -:  599:c     integer*1 popcnt(integer*1)
        1:  600:      call popcnt1
call    0 returned 100%
        -:  601:c     integer*2 popcnt(integer*2)
        1:  602:      call popcnt2
call    0 returned 100%
        -:  603:c     integer*4 popcnt(integer*4)
        1:  604:      call popcnt3
call    0 returned 100%
        -:  605:c     integer*8 popcnt(integer*8)
        1:  606:      call popcnt4
call    0 returned 100%
        -:  607:
        -:  608:c     TESTING poppar GENERIC INTRINSIC
        -:  609:c     integer*1 poppar(integer*1)
        1:  610:      call poppar1
call    0 returned 100%
        -:  611:c     integer*2 poppar(integer*2)
        1:  612:      call poppar2
call    0 returned 100%
        -:  613:c     integer*4 poppar(integer*4)
        1:  614:      call poppar3
call    0 returned 100%
        -:  615:c     integer*8 poppar(integer*8)
        1:  616:      call poppar4
call    0 returned 100%
        -:  617:
        -:  618:c     TESTING real GENERIC INTRINSIC
        -:  619:c     real*4 real(integer*1)
        1:  620:      call real1
call    0 returned 100%
        -:  621:c     real*4 real(integer*2)
        1:  622:      call real2
call    0 returned 100%
        -:  623:c     real*4 real(integer*4)
        1:  624:      call real3
call    0 returned 100%
        -:  625:c     real*4 real(integer*8)
        1:  626:      call real4
call    0 returned 100%
        -:  627:c     real*4 real(real*4)
        1:  628:      call real5
call    0 returned 100%
        -:  629:c     real*4 real(real*8)
        1:  630:      call real6
call    0 returned 100%
        -:  631:c     real*4 real(complex*8)
        1:  632:      call real7
call    0 returned 100%
        -:  633:c     real*4 real(complex*16)
        1:  634:      call real8
call    0 returned 100%
        -:  635:c     real*4 float(integer*4)
        1:  636:      call real10
call    0 returned 100%
        -:  637:c     real*4 sngl(real*4)
        1:  638:      call real13
call    0 returned 100%
        -:  639:c     real*4 sngl(real*8)
        1:  640:      call real14
call    0 returned 100%
        -:  641:
        -:  642:c     TESTING shifta GENERIC INTRINSIC
        -:  643:c     integer*1 shifta(integer*1)
        1:  644:      call shifta1
call    0 returned 100%
        -:  645:c     integer*2 shifta(integer*2)
        1:  646:      call shifta2
call    0 returned 100%
        -:  647:c     integer*4 shifta(integer*4)
        1:  648:      call shifta3
call    0 returned 100%
        -:  649:c     integer*8 shifta(integer*8)
        1:  650:      call shifta4
call    0 returned 100%
        -:  651:
        -:  652:c     TESTING shiftl GENERIC INTRINSIC
        -:  653:c     integer*1 shiftl(integer*1)
        1:  654:      call shiftl1
call    0 returned 100%
        -:  655:c     integer*2 shiftl(integer*2)
        1:  656:      call shiftl2
call    0 returned 100%
        -:  657:c     integer*4 shiftl(integer*4)
        1:  658:      call shiftl3
call    0 returned 100%
        -:  659:c     integer*8 shiftl(integer*8)
        1:  660:      call shiftl4
call    0 returned 100%
        -:  661:
        -:  662:c     TESTING shiftr GENERIC INTRINSIC
        -:  663:c     integer*1 shiftr(integer*1)
        1:  664:      call shiftr1
call    0 returned 100%
        -:  665:c     integer*2 shiftr(integer*2)
        1:  666:      call shiftr2
call    0 returned 100%
        -:  667:c     integer*4 shiftr(integer*4)
        1:  668:      call shiftr3
call    0 returned 100%
        -:  669:c     integer*8 shiftr(integer*8)
        1:  670:      call shiftr4
call    0 returned 100%
        -:  671:
        -:  672:c     TESTING sign GENERIC INTRINSIC
        -:  673:c     integer*1 sign(integer*1)
        1:  674:      call sign1
call    0 returned 100%
        -:  675:c     integer*2 sign(integer*2)
        1:  676:      call sign2
call    0 returned 100%
        -:  677:c     integer*4 sign(integer*4)
        1:  678:      call sign3
call    0 returned 100%
        -:  679:c     integer*8 sign(integer*8)
        1:  680:      call sign4
call    0 returned 100%
        -:  681:c     real*4 sign(real*4)
        1:  682:      call sign5
call    0 returned 100%
        -:  683:c     real*8 sign(real*8)
        1:  684:      call sign6
call    0 returned 100%
        -:  685:c     integer*4 isign(integer*4)
        1:  686:      call sign9
call    0 returned 100%
        -:  687:c     real*8 dsign(real*8)
        1:  688:      call sign16
call    0 returned 100%
        -:  689:
        -:  690:c     TESTING sin GENERIC INTRINSIC
        -:  691:c     real*4 sin(real*4)
        1:  692:      call sin1
call    0 returned 100%
        -:  693:c     real*8 sin(real*8)
        1:  694:      call sin2
call    0 returned 100%
        -:  695:c     complex*8 sin(complex*8)
        1:  696:      call sin3
call    0 returned 100%
        -:  697:c     complex*16 sin(complex*16)
        1:  698:      call sin4
call    0 returned 100%
        -:  699:c     real*8 dsin(real*8)
        1:  700:      call sin5
call    0 returned 100%
        -:  701:c     complex*8 csin(complex*8)
        1:  702:      call sin6
call    0 returned 100%
        -:  703:c     complex*16 cdsin(complex*16)
        1:  704:      call sin7
call    0 returned 100%
        -:  705:c     complex*16 zsin(complex*16)
        1:  706:      call sin8
call    0 returned 100%
        -:  707:
        -:  708:c     TESTING sinh GENERIC INTRINSIC
        -:  709:c     real*4 sinh(real*4)
        1:  710:      call sinh1
call    0 returned 100%
        -:  711:c     real*8 sinh(real*8)
        1:  712:      call sinh2
call    0 returned 100%
        -:  713:c     real*8 dsinh(real*8)
        1:  714:      call sinh3
call    0 returned 100%
        -:  715:
        -:  716:c     TESTING sqrt GENERIC INTRINSIC
        -:  717:c     real*4 sqrt(real*4)
        1:  718:      call sqrt1
call    0 returned 100%
        -:  719:c     real*8 sqrt(real*8)
        1:  720:      call sqrt2
call    0 returned 100%
        -:  721:c     complex*8 sqrt(complex*8)
        1:  722:      call sqrt3
call    0 returned 100%
        -:  723:c     complex*16 sqrt(complex*16)
        1:  724:      call sqrt4
call    0 returned 100%
        -:  725:c     real*8 dsqrt(real*8)
        1:  726:      call sqrt5
call    0 returned 100%
        -:  727:c     complex*8 csqrt(complex*8)
        1:  728:      call sqrt6
call    0 returned 100%
        -:  729:c     complex*16 cdsqrt(complex*16)
        1:  730:      call sqrt7
call    0 returned 100%
        -:  731:c     complex*16 zsqrt(complex*16)
        1:  732:      call sqrt8
call    0 returned 100%
        -:  733:
        -:  734:c     TESTING tan GENERIC INTRINSIC
        -:  735:c     real*4 tan(real*4)
        1:  736:      call tan1
call    0 returned 100%
        -:  737:c     real*8 tan(real*8)
        1:  738:      call tan2
call    0 returned 100%
        -:  739:c     complex*8 tan(complex*8)
        1:  740:      call tan3
call    0 returned 100%
        -:  741:c     complex*16 tan(complex*16)
        1:  742:      call tan4
call    0 returned 100%
        -:  743:c     real*8 dtan(real*8)
        1:  744:      call tan5
call    0 returned 100%
        -:  745:
        -:  746:c     TESTING tanh GENERIC INTRINSIC
        -:  747:c     real*4 tanh(real*4)
        1:  748:      call tanh1
call    0 returned 100%
        -:  749:c     real*8 tanh(real*8)
        1:  750:      call tanh2
call    0 returned 100%
        -:  751:c     real*8 dtanh(real*8)
        1:  752:      call tanh3
call    0 returned 100%
        -:  753:
        -:  754:c     TESTING trailz SPECIFIC INTRINSIC
        -:  755:c     integer*1 trailz(integer*1)
        1:  756:      call trailz1
call    0 returned 100%
        -:  757:c     integer*2 trailz(integer*2)
        1:  758:      call trailz2
call    0 returned 100%
        -:  759:c     integer*4 trailz(integer*4)
        1:  760:      call trailz3
call    0 returned 100%
        -:  761:c     integer*8 trailz(integer*8)
        1:  762:      call trailz4
call    0 returned 100%
        -:  763:
        1:  764:      print *, '=== END OF F2C_MATH intrinsic test ============='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:  765:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  766:
        -:  767:C -------------------------------------------------
        -:  768:
function abs1_ called 1 returned 100% blocks executed 80%
        1:  769:      subroutine abs1
        -:  770:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:  771:      character*24 tname
        -:  772:      integer A(N), B(N)
        -:  773:      integer erri, i, asize, clock
        1:  774:      integer, allocatable :: seed(:)
        -:  775:      real tmp
        -:  776:
        -:  777:!dvm$ distribute A(BLOCK)
        -:  778:
        1:  779:      call random_seed(size = asize)
call    0 returned 100%
       3*:  780:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:  781:      call system_clock(count = clock)
call    0 returned 100%
      34*:  782:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:  783:      call random_seed(put = seed)
call    0 returned 100%
       1*:  784:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  785:
        1:  786:      tname = 'abs_long'
        1:  787:      erri = ER
        -:  788:
      257:  789:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:  790:          call random_number(tmp)
call    0 returned 100%
      257:  791:          B(i) = int(tmp * W + S)
        -:  792:      enddo
        -:  793:
        -:  794:!dvm$ actual(B)	  
        -:  795:!dvm$ region
        -:  796:!dvm$ parallel (i) on A(i)
      257:  797:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:  798:          A(i) = abs(B(i))
        -:  799:      enddo
        -:  800:!dvm$ end region
        -:  801:!dvm$ get_actual(A)
        -:  802:
        -:  803:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:  804:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:  805:          if (abs(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  806:               erri = min(erri, i)
        -:  807:          endif
        -:  808:      enddo
        -:  809:
        1:  810:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  811:          call ansyes(tname)
call    0 returned 100%
        -:  812:      else
    #####:  813:          call ansno(tname)
call    0 never executed
        -:  814:      endif
       1*:  815:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  816:
        -:  817:C -------------------------------------------------
        -:  818:
function abs2_ called 1 returned 100% blocks executed 80%
        1:  819:      subroutine abs2
        -:  820:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:  821:      character*24 tname
        -:  822:      real A(N), B(N)
        -:  823:      integer erri, i, asize, clock
        1:  824:      integer, allocatable :: seed(:)
        -:  825:
        -:  826:!dvm$ distribute A(BLOCK)
        -:  827:
        1:  828:      call random_seed(size = asize)
call    0 returned 100%
       3*:  829:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:  830:      call system_clock(count = clock)
call    0 returned 100%
      34*:  831:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:  832:      call random_seed(put = seed)
call    0 returned 100%
       1*:  833:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  834:
        1:  835:      tname = 'abs_float'
        1:  836:      erri = ER
        -:  837:
      257:  838:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:  839:          call random_number(B(i))
call    0 returned 100%
      257:  840:          B(i) = B(i) * W + S
        -:  841:      enddo
        -:  842:
        -:  843:!dvm$ actual(B)	  
        -:  844:!dvm$ region
        -:  845:!dvm$ parallel (i) on A(i)
      257:  846:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:  847:          A(i) = abs(B(i))
        -:  848:      enddo
        -:  849:!dvm$ end region
        -:  850:!dvm$ get_actual(A)
        -:  851:
        -:  852:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:  853:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:  854:          if (abs(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  855:               erri = min(erri, i)
        -:  856:          endif
        -:  857:      enddo
        -:  858:
        1:  859:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  860:          call ansyes(tname)
call    0 returned 100%
        -:  861:      else
    #####:  862:          call ansno(tname)
call    0 never executed
        -:  863:      endif
       1*:  864:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  865:
        -:  866:C -------------------------------------------------
        -:  867:
function abs3_ called 1 returned 100% blocks executed 80%
        1:  868:      subroutine abs3
        -:  869:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:  870:      character*24 tname
        -:  871:      real*8 A(N), B(N)
        -:  872:      integer erri, i, asize, clock
        1:  873:      integer, allocatable :: seed(:)
        -:  874:
        -:  875:!dvm$ distribute A(BLOCK)
        -:  876:
        1:  877:      call random_seed(size = asize)
call    0 returned 100%
       3*:  878:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:  879:      call system_clock(count = clock)
call    0 returned 100%
      34*:  880:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:  881:      call random_seed(put = seed)
call    0 returned 100%
       1*:  882:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  883:
        1:  884:      tname = 'abs_double'
        1:  885:      erri = ER
        -:  886:
      257:  887:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:  888:          call random_number(B(i))
call    0 returned 100%
      257:  889:          B(i) = B(i) * W + S
        -:  890:      enddo
        -:  891:
        -:  892:!dvm$ actual(B)	  
        -:  893:!dvm$ region
        -:  894:!dvm$ parallel (i) on A(i)
      257:  895:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:  896:          A(i) = abs(B(i))
        -:  897:      enddo
        -:  898:!dvm$ end region
        -:  899:!dvm$ get_actual(A)
        -:  900:
        -:  901:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:  902:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:  903:          if (abs(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  904:               erri = min(erri, i)
        -:  905:          endif
        -:  906:      enddo
        -:  907:
        1:  908:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  909:          call ansyes(tname)
call    0 returned 100%
        -:  910:      else
    #####:  911:          call ansno(tname)
call    0 never executed
        -:  912:      endif
       1*:  913:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  914:
        -:  915:C -------------------------------------------------
        -:  916:
function abs4_ called 1 returned 100% blocks executed 80%
        1:  917:      subroutine abs4
        -:  918:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:  919:      real, parameter :: EPS = 1e-6
        -:  920:      character*24 tname
        -:  921:      real A(N)
        -:  922:      complex B(N)
        -:  923:      integer erri, i, asize, clock
        1:  924:      integer, allocatable :: seed(:)
        -:  925:      real x, y, tmp
        -:  926:
        -:  927:!dvm$ distribute A(BLOCK)
        -:  928:
        1:  929:      call random_seed(size = asize)
call    0 returned 100%
       3*:  930:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:  931:      call system_clock(count = clock)
call    0 returned 100%
      34*:  932:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:  933:      call random_seed(put = seed)
call    0 returned 100%
       1*:  934:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  935:
        1:  936:      tname = 'abs_complexf'
        1:  937:      erri = ER
        -:  938:
      257:  939:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:  940:          call random_number(x)
call    0 returned 100%
      256:  941:          call random_number(y)
call    0 returned 100%
      257:  942:          B(i) = cmplx(x * W + S, y * W + S)
        -:  943:      enddo
        -:  944:
        -:  945:!dvm$ actual(B)	  
        -:  946:!dvm$ region
        -:  947:!dvm$ parallel (i) on A(i)
      257:  948:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:  949:          A(i) = abs(B(i))
        -:  950:      enddo
        -:  951:!dvm$ end region
        -:  952:!dvm$ get_actual(A)
        -:  953:
        -:  954:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:  955:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:  956:          tmp = abs(B(i))
      257:  957:          if (abs(tmp - A(i))/tmp .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  958:               erri = min(erri, i)
        -:  959:          endif
        -:  960:      enddo
        -:  961:
        1:  962:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  963:          call ansyes(tname)
call    0 returned 100%
        -:  964:      else
    #####:  965:          call ansno(tname)
call    0 never executed
        -:  966:      endif
       1*:  967:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  968:
        -:  969:C -------------------------------------------------
        -:  970:
function abs5_ called 1 returned 100% blocks executed 80%
        1:  971:      subroutine abs5
        -:  972:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:  973:      real*8, parameter :: EPS = 1d-15
        -:  974:      character*24 tname
        -:  975:      real*8 A(N)
        -:  976:      double complex B(N)
        -:  977:      integer erri, i, asize, clock
        1:  978:      integer, allocatable :: seed(:)
        -:  979:      real*8 x, y, tmp
        -:  980:
        -:  981:!dvm$ distribute A(BLOCK)
        -:  982:
        1:  983:      call random_seed(size = asize)
call    0 returned 100%
       3*:  984:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:  985:      call system_clock(count = clock)
call    0 returned 100%
      34*:  986:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:  987:      call random_seed(put = seed)
call    0 returned 100%
       1*:  988:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  989:
        1:  990:      tname = 'abs_complexd'
        1:  991:      erri = ER
        -:  992:
      257:  993:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:  994:          call random_number(x)
call    0 returned 100%
      256:  995:          call random_number(y)
call    0 returned 100%
      257:  996:          B(i) = dcmplx(x * W + S, y * W + S)
        -:  997:      enddo
        -:  998:
        -:  999:!dvm$ actual(B)	  
        -: 1000:!dvm$ region
        -: 1001:!dvm$ parallel (i) on A(i)
      257: 1002:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1003:          A(i) = abs(B(i))
        -: 1004:      enddo
        -: 1005:!dvm$ end region
        -: 1006:!dvm$ get_actual(A)
        -: 1007:
        -: 1008:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1009:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1010:          tmp = abs(B(i))
      257: 1011:          if (abs(tmp - A(i)) / tmp .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1012:               erri = min(erri, i)
        -: 1013:          endif
        -: 1014:      enddo
        -: 1015:
        1: 1016:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1017:          call ansyes(tname)
call    0 returned 100%
        -: 1018:      else
    #####: 1019:          call ansno(tname)
call    0 never executed
        -: 1020:      endif
       1*: 1021:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1022:
        -: 1023:C -------------------------------------------------
        -: 1024:
function abs6_ called 1 returned 100% blocks executed 80%
        1: 1025:      subroutine abs6
        -: 1026:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 1027:      real, parameter :: EPS = 1e-6
        -: 1028:      character*24 tname
        -: 1029:      real A(N)
        -: 1030:      complex B(N)
        -: 1031:      integer erri, i, asize, clock
        1: 1032:      integer, allocatable :: seed(:)
        -: 1033:      real x, y, tmp
        -: 1034:
        -: 1035:!dvm$ distribute A(BLOCK)
        -: 1036:
        1: 1037:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1038:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1039:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1040:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1041:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1042:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1043:
        1: 1044:      tname = 'cabs_complexf'
        1: 1045:      erri = ER
        -: 1046:
      257: 1047:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1048:          call random_number(x)
call    0 returned 100%
      256: 1049:          call random_number(y)
call    0 returned 100%
      257: 1050:          B(i) = cmplx(x * W + S, y * W + S)
        -: 1051:      enddo
        -: 1052:
        -: 1053:!dvm$ actual(B)	  
        -: 1054:!dvm$ region
        -: 1055:!dvm$ parallel (i) on A(i)
      257: 1056:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1057:          A(i) = cabs(B(i))
        -: 1058:      enddo
        -: 1059:!dvm$ end region
        -: 1060:!dvm$ get_actual(A)
        -: 1061:
        -: 1062:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1063:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1064:          tmp = cabs(B(i))
      257: 1065:          if (abs(tmp - A(i))/tmp .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1066:               erri = min(erri, i)
        -: 1067:          endif
        -: 1068:      enddo
        -: 1069:
        1: 1070:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1071:          call ansyes(tname)
call    0 returned 100%
        -: 1072:      else
    #####: 1073:          call ansno(tname)
call    0 never executed
        -: 1074:      endif
       1*: 1075:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1076:
        -: 1077:C -------------------------------------------------
        -: 1078:
function abs7_ called 1 returned 100% blocks executed 80%
        1: 1079:      subroutine abs7
        -: 1080:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 1081:      character*24 tname
        -: 1082:      real*8 A(N), B(N)
        -: 1083:      integer erri, i, asize, clock
        1: 1084:      integer, allocatable :: seed(:)
        -: 1085:
        -: 1086:!dvm$ distribute A(BLOCK)
        -: 1087:
        1: 1088:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1089:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1090:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1091:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1092:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1093:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1094:
        1: 1095:      tname = 'dabs_double'
        1: 1096:      erri = ER
        -: 1097:
      257: 1098:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 1099:          call random_number(B(i))
call    0 returned 100%
      257: 1100:          B(i) = B(i) * W + S
        -: 1101:      enddo
        -: 1102:
        -: 1103:!dvm$ actual(B)	  
        -: 1104:!dvm$ region
        -: 1105:!dvm$ parallel (i) on A(i)
      257: 1106:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 1107:          A(i) = dabs(B(i))
        -: 1108:      enddo
        -: 1109:!dvm$ end region
        -: 1110:!dvm$ get_actual(A)
        -: 1111:
        -: 1112:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 1113:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1114:          if (dabs(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1115:               erri = min(erri, i)
        -: 1116:          endif
        -: 1117:      enddo
        -: 1118:
        1: 1119:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1120:          call ansyes(tname)
call    0 returned 100%
        -: 1121:      else
    #####: 1122:          call ansno(tname)
call    0 never executed
        -: 1123:      endif
       1*: 1124:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1125:
        -: 1126:C -------------------------------------------------
        -: 1127:
function abs8_ called 1 returned 100% blocks executed 80%
        1: 1128:      subroutine abs8
        -: 1129:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 1130:      character*24 tname
        -: 1131:      integer A(N), B(N)
        -: 1132:      integer erri, i, asize, clock
        1: 1133:      integer, allocatable :: seed(:)
        -: 1134:      real tmp
        -: 1135:
        -: 1136:!dvm$ distribute A(BLOCK)
        -: 1137:
        1: 1138:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1139:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1140:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1141:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1142:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1143:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1144:
        1: 1145:      tname = 'iabs_long'
        1: 1146:      erri = ER
        -: 1147:
      257: 1148:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 1149:          call random_number(tmp)
call    0 returned 100%
      257: 1150:          B(i) = int(tmp * W + S)
        -: 1151:      enddo
        -: 1152:
        -: 1153:!dvm$ actual(B)	  
        -: 1154:!dvm$ region
        -: 1155:!dvm$ parallel (i) on A(i)
      257: 1156:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 1157:          A(i) = iabs(B(i))
        -: 1158:      enddo
        -: 1159:!dvm$ end region
        -: 1160:!dvm$ get_actual(A)
        -: 1161:
        -: 1162:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 1163:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1164:          if (iabs(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1165:               erri = min(erri, i)
        -: 1166:          endif
        -: 1167:      enddo
        -: 1168:
        1: 1169:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1170:          call ansyes(tname)
call    0 returned 100%
        -: 1171:      else
    #####: 1172:          call ansno(tname)
call    0 never executed
        -: 1173:      endif
       1*: 1174:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1175:
        -: 1176:C -------------------------------------------------
        -: 1177:
function abs14_ called 1 returned 100% blocks executed 80%
        1: 1178:      subroutine abs14
        -: 1179:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 1180:      real*8, parameter :: EPS = 1d-15
        -: 1181:      character*24 tname
        -: 1182:      real*8 A(N)
        -: 1183:      double complex B(N)
        -: 1184:      integer erri, i, asize, clock
        1: 1185:      integer, allocatable :: seed(:)
        -: 1186:      real*8 x, y, tmp
        -: 1187:
        -: 1188:!dvm$ distribute A(BLOCK)
        -: 1189:
        1: 1190:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1191:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1192:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1193:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1194:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1195:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1196:
        1: 1197:      tname = 'cdabs_complexd'
        1: 1198:      erri = ER
        -: 1199:
      257: 1200:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1201:          call random_number(x)
call    0 returned 100%
      256: 1202:          call random_number(y)
call    0 returned 100%
      257: 1203:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 1204:      enddo
        -: 1205:
        -: 1206:!dvm$ actual(B)	  
        -: 1207:!dvm$ region
        -: 1208:!dvm$ parallel (i) on A(i)
      257: 1209:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1210:          A(i) = cdabs(B(i))
        -: 1211:      enddo
        -: 1212:!dvm$ end region
        -: 1213:!dvm$ get_actual(A)
        -: 1214:
        -: 1215:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1216:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1217:          tmp = cdabs(B(i))
      257: 1218:          if (abs(tmp - A(i))/tmp .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1219:               erri = min(erri, i)
        -: 1220:          endif
        -: 1221:      enddo
        -: 1222:
        1: 1223:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1224:          call ansyes(tname)
call    0 returned 100%
        -: 1225:      else
    #####: 1226:          call ansno(tname)
call    0 never executed
        -: 1227:      endif
       1*: 1228:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1229:
        -: 1230:C -------------------------------------------------
        -: 1231:
function abs15_ called 1 returned 100% blocks executed 80%
        1: 1232:      subroutine abs15
        -: 1233:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 1234:      real*8, parameter :: EPS = 1d-15
        -: 1235:      character*24 tname
        -: 1236:      real*8 A(N)
        -: 1237:      double complex B(N)
        -: 1238:      integer erri, i, asize, clock
        1: 1239:      integer, allocatable :: seed(:)
        -: 1240:      real*8 x, y, tmp
        -: 1241:
        -: 1242:!dvm$ distribute A(BLOCK)
        -: 1243:
        1: 1244:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1245:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1246:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1247:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1248:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1249:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1250:
        1: 1251:      tname = 'zabs_complexd'
        1: 1252:      erri = ER
        -: 1253:
      257: 1254:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1255:          call random_number(x)
call    0 returned 100%
      256: 1256:          call random_number(y)
call    0 returned 100%
      257: 1257:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 1258:      enddo
        -: 1259:
        -: 1260:!dvm$ actual(B)	  
        -: 1261:!dvm$ region
        -: 1262:!dvm$ parallel (i) on A(i)
      257: 1263:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1264:          A(i) = zabs(B(i))
        -: 1265:      enddo
        -: 1266:!dvm$ end region
        -: 1267:!dvm$ get_actual(A)
        -: 1268:
        -: 1269:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1270:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1271:          tmp = zabs(B(i))
      257: 1272:          if (abs(tmp - A(i))/tmp .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1273:               erri = min(erri, i)
        -: 1274:          endif
        -: 1275:      enddo
        -: 1276:
        1: 1277:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1278:          call ansyes(tname)
call    0 returned 100%
        -: 1279:      else
    #####: 1280:          call ansno(tname)
call    0 never executed
        -: 1281:      endif
       1*: 1282:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1283:
        -: 1284:C -------------------------------------------------
        -: 1285:
function acos1_ called 1 returned 100% blocks executed 79%
        1: 1286:      subroutine acos1
        -: 1287:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1288:      real, parameter :: EPS = 1e-6
        -: 1289:      character*24 tname
        -: 1290:      real A(N), B(N)
        -: 1291:      integer erri, i, asize, clock
        1: 1292:      integer, allocatable :: seed(:)
        -: 1293:      real tmp
        -: 1294:
        -: 1295:!dvm$ distribute A(BLOCK)
        -: 1296:
        1: 1297:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1298:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1299:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1300:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1301:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1302:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1303:
        1: 1304:      tname = 'acos_float'
        1: 1305:      erri = ER
        -: 1306:
      257: 1307:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1308:          call random_number(B(i))
call    0 returned 100%
      257: 1309:          B(i) = B(i) * W + S
        -: 1310:      enddo
        -: 1311:
        -: 1312:!dvm$ actual(B)	  
        -: 1313:!dvm$ region
        -: 1314:!dvm$ parallel (i) on A(i)
      257: 1315:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1316:          A(i) = acos(B(i))
        -: 1317:      enddo
        -: 1318:!dvm$ end region
        -: 1319:!dvm$ get_actual(A)
        -: 1320:
        -: 1321:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1322:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1323:          tmp = acos(B(i))
      257: 1324:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1325:               erri = min(erri, i)
        -: 1326:          endif
        -: 1327:      enddo
        -: 1328:
        1: 1329:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1330:          call ansyes(tname)
call    0 returned 100%
        -: 1331:      else
    #####: 1332:          call ansno(tname)
call    0 never executed
        -: 1333:      endif
       1*: 1334:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1335:
        -: 1336:C -------------------------------------------------
        -: 1337:
function acos2_ called 1 returned 100% blocks executed 79%
        1: 1338:      subroutine acos2
        -: 1339:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1340:      real*8, parameter :: EPS = 1d-15
        -: 1341:      character*24 tname
        -: 1342:      real*8 A(N), B(N)
        -: 1343:      integer erri, i, asize, clock
        1: 1344:      integer, allocatable :: seed(:)
        -: 1345:      real*8 tmp
        -: 1346:
        -: 1347:!dvm$ distribute A(BLOCK)
        -: 1348:
        1: 1349:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1350:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1351:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1352:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1353:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1354:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1355:
        1: 1356:      tname = 'acos_double'
        1: 1357:      erri = ER
        -: 1358:
      257: 1359:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1360:          call random_number(B(i))
call    0 returned 100%
      257: 1361:          B(i) = B(i) * W + S
        -: 1362:      enddo
        -: 1363:
        -: 1364:!dvm$ actual(B)
        -: 1365:!dvm$ region
        -: 1366:!dvm$ parallel (i) on A(i)
      257: 1367:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1368:          A(i) = acos(B(i))
        -: 1369:      enddo
        -: 1370:!dvm$ end region
        -: 1371:!dvm$ get_actual(A)
        -: 1372:
        -: 1373:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1374:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1375:          tmp = acos(B(i))
      257: 1376:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1377:               erri = min(erri, i)
        -: 1378:          endif
        -: 1379:      enddo
        -: 1380:
        1: 1381:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1382:          call ansyes(tname)
call    0 returned 100%
        -: 1383:      else
    #####: 1384:          call ansno(tname)
call    0 never executed
        -: 1385:      endif
       1*: 1386:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1387:
        -: 1388:C -------------------------------------------------
        -: 1389:
function acos3_ called 1 returned 100% blocks executed 79%
        1: 1390:      subroutine acos3
        -: 1391:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1392:      real*8, parameter :: EPS = 1d-15
        -: 1393:      character*24 tname
        -: 1394:      real*8 A(N), B(N)
        -: 1395:      integer erri, i, asize, clock
        1: 1396:      integer, allocatable :: seed(:)
        -: 1397:      real*8 tmp
        -: 1398:
        -: 1399:!dvm$ distribute A(BLOCK)
        -: 1400:
        1: 1401:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1402:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1403:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1404:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1405:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1406:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1407:
        1: 1408:      tname = 'dacos_double'
        1: 1409:      erri = ER
        -: 1410:
      257: 1411:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1412:          call random_number(B(i))
call    0 returned 100%
      257: 1413:          B(i) = B(i) * W + S
        -: 1414:      enddo
        -: 1415:
        -: 1416:!dvm$ actual(B)
        -: 1417:!dvm$ region
        -: 1418:!dvm$ parallel (i) on A(i)
      257: 1419:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1420:          A(i) = dacos(B(i))
        -: 1421:      enddo
        -: 1422:!dvm$ end region
        -: 1423:!dvm$ get_actual(A)
        -: 1424:
        -: 1425:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1426:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1427:          tmp = dacos(B(i))
      257: 1428:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1429:               erri = min(erri, i)
        -: 1430:          endif
        -: 1431:      enddo
        -: 1432:
        1: 1433:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1434:          call ansyes(tname)
call    0 returned 100%
        -: 1435:      else
    #####: 1436:          call ansno(tname)
call    0 never executed
        -: 1437:      endif
       1*: 1438:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1439:
        -: 1440:C -------------------------------------------------
        -: 1441:
function acosh1_ called 1 returned 100% blocks executed 79%
        1: 1442:      subroutine acosh1
        -: 1443:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -: 1444:      real, parameter :: EPS = 1e-6
        -: 1445:      character*24 tname
        -: 1446:      real A(N), B(N)
        -: 1447:      integer erri, i, asize, clock
        1: 1448:      integer, allocatable :: seed(:)
        -: 1449:      real tmp
        -: 1450:
        -: 1451:!dvm$ distribute A(BLOCK)
        -: 1452:
        1: 1453:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1454:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1455:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1456:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1457:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1458:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1459:
        1: 1460:      tname = 'acosh_float'
        1: 1461:      erri = ER
        -: 1462:
      257: 1463:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1464:          call random_number(B(i))
call    0 returned 100%
      257: 1465:          B(i) = B(i) * W + S
        -: 1466:      enddo
        -: 1467:
        -: 1468:!dvm$ actual(B)	  
        -: 1469:!dvm$ region
        -: 1470:!dvm$ parallel (i) on A(i)
      257: 1471:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1472:          A(i) = acosh(B(i))
        -: 1473:      enddo
        -: 1474:!dvm$ end region
        -: 1475:!dvm$ get_actual(A)
        -: 1476:
        -: 1477:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1478:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1479:          tmp = acosh(B(i))
      257: 1480:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1481:               erri = min(erri, i)
        -: 1482:          endif
        -: 1483:      enddo
        -: 1484:
        1: 1485:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1486:          call ansyes(tname)
call    0 returned 100%
        -: 1487:      else
    #####: 1488:          call ansno(tname)
call    0 never executed
        -: 1489:      endif
       1*: 1490:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1491:
        -: 1492:C -------------------------------------------------
        -: 1493:
function acosh2_ called 1 returned 100% blocks executed 79%
        1: 1494:      subroutine acosh2
        -: 1495:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -: 1496:      real*8, parameter :: EPS = 1d-15
        -: 1497:      character*24 tname
        -: 1498:      real*8 A(N), B(N)
        -: 1499:      integer erri, i, asize, clock
        1: 1500:      integer, allocatable :: seed(:)
        -: 1501:      real*8 tmp
        -: 1502:
        -: 1503:!dvm$ distribute A(BLOCK)
        -: 1504:
        1: 1505:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1506:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1507:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1508:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1509:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1510:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1511:
        1: 1512:      tname = 'acosh_double'
        1: 1513:      erri = ER
        -: 1514:
      257: 1515:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1516:          call random_number(B(i))
call    0 returned 100%
      257: 1517:          B(i) = B(i) * W + S
        -: 1518:      enddo
        -: 1519:
        -: 1520:!dvm$ actual(B)
        -: 1521:!dvm$ region
        -: 1522:!dvm$ parallel (i) on A(i)
      257: 1523:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1524:          A(i) = acosh(B(i))
        -: 1525:      enddo
        -: 1526:!dvm$ end region
        -: 1527:!dvm$ get_actual(A)
        -: 1528:
        -: 1529:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1530:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1531:          tmp = acosh(B(i))
      257: 1532:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1533:               erri = min(erri, i)
        -: 1534:          endif
        -: 1535:      enddo
        -: 1536:
        1: 1537:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1538:          call ansyes(tname)
call    0 returned 100%
        -: 1539:      else
    #####: 1540:          call ansno(tname)
call    0 never executed
        -: 1541:      endif
       1*: 1542:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1543:
        -: 1544:C -------------------------------------------------
        -: 1545:
function acosh3_ called 1 returned 100% blocks executed 79%
        1: 1546:      subroutine acosh3
        -: 1547:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -: 1548:      real*8, parameter :: EPS = 1d-15
        -: 1549:      character*24 tname
        -: 1550:      real*8 A(N), B(N)
        -: 1551:      integer erri, i, asize, clock
        1: 1552:      integer, allocatable :: seed(:)
        -: 1553:      real*8 tmp
        -: 1554:
        -: 1555:!dvm$ distribute A(BLOCK)
        -: 1556:
        1: 1557:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1558:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1559:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1560:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1561:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1562:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1563:
        1: 1564:      tname = 'dacosh_double'
        1: 1565:      erri = ER
        -: 1566:
      257: 1567:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1568:          call random_number(B(i))
call    0 returned 100%
      257: 1569:          B(i) = B(i) * W + S
        -: 1570:      enddo
        -: 1571:
        -: 1572:!dvm$ actual(B)
        -: 1573:!dvm$ region
        -: 1574:!dvm$ parallel (i) on A(i)
      257: 1575:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1576:          A(i) = dacosh(B(i))
        -: 1577:      enddo
        -: 1578:!dvm$ end region
        -: 1579:!dvm$ get_actual(A)
        -: 1580:
        -: 1581:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1582:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1583:          tmp = dacosh(B(i))
      257: 1584:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1585:               erri = min(erri, i)
        -: 1586:          endif
        -: 1587:      enddo
        -: 1588:
        1: 1589:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1590:          call ansyes(tname)
call    0 returned 100%
        -: 1591:      else
    #####: 1592:          call ansno(tname)
call    0 never executed
        -: 1593:      endif
       1*: 1594:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1595:
        -: 1596:C -------------------------------------------------
        -: 1597:
function aimag1_ called 1 returned 100% blocks executed 81%
        1: 1598:      subroutine aimag1
        -: 1599:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1600:      character*24 tname
        -: 1601:      real A(N)
        -: 1602:      complex B(N)
        -: 1603:      integer erri, i, asize, clock
        1: 1604:      integer, allocatable :: seed(:)
        -: 1605:      real x, y
        -: 1606:
        -: 1607:!dvm$ distribute A(BLOCK)
        -: 1608:
        1: 1609:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1610:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1611:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1612:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1613:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1614:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1615:
        1: 1616:      tname = 'aimag_complexf'
        1: 1617:      erri = ER
        -: 1618:
      257: 1619:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 1620:          call random_number(x)
call    0 returned 100%
      256: 1621:          call random_number(y)
call    0 returned 100%
      257: 1622:          B(i) = cmplx(x * W + S, y * W + S)
        -: 1623:      enddo
        -: 1624:
        -: 1625:!dvm$ actual(B)	  
        -: 1626:!dvm$ region
        -: 1627:!dvm$ parallel (i) on A(i)
      257: 1628:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 1629:          A(i) = aimag(B(i))
        -: 1630:      enddo
        -: 1631:!dvm$ end region
        -: 1632:!dvm$ get_actual(A)
        -: 1633:
        -: 1634:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 1635:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1636:          if (aimag(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1637:               erri = min(erri, i)
        -: 1638:          endif
        -: 1639:      enddo
        -: 1640:
        1: 1641:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1642:          call ansyes(tname)
call    0 returned 100%
        -: 1643:      else
    #####: 1644:          call ansno(tname)
call    0 never executed
        -: 1645:      endif
       1*: 1646:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1647:
        -: 1648:C -------------------------------------------------
        -: 1649:
function aimag2_ called 1 returned 100% blocks executed 81%
        1: 1650:      subroutine aimag2
        -: 1651:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1652:      character*24 tname
        -: 1653:      real*8 A(N)
        -: 1654:      double complex B(N)
        -: 1655:      integer erri, i, asize, clock
        1: 1656:      integer, allocatable :: seed(:)
        -: 1657:      real*8 x, y
        -: 1658:
        -: 1659:!dvm$ distribute A(BLOCK)
        -: 1660:
        1: 1661:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1662:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1663:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1664:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1665:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1666:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1667:
        1: 1668:      tname = 'aimag_complexd'
        1: 1669:      erri = ER
        -: 1670:
      257: 1671:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 1672:          call random_number(x)
call    0 returned 100%
      256: 1673:          call random_number(y)
call    0 returned 100%
      257: 1674:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 1675:      enddo
        -: 1676:
        -: 1677:!dvm$ actual(B)	  
        -: 1678:!dvm$ region
        -: 1679:!dvm$ parallel (i) on A(i)
      257: 1680:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 1681:          A(i) = aimag(B(i))
        -: 1682:      enddo
        -: 1683:!dvm$ end region
        -: 1684:!dvm$ get_actual(A)
        -: 1685:
        -: 1686:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 1687:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1688:          if (aimag(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1689:               erri = min(erri, i)
        -: 1690:          endif
        -: 1691:      enddo
        -: 1692:
        1: 1693:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1694:          call ansyes(tname)
call    0 returned 100%
        -: 1695:      else
    #####: 1696:          call ansno(tname)
call    0 never executed
        -: 1697:      endif
       1*: 1698:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1699:
        -: 1700:C -------------------------------------------------
        -: 1701:
function aimag3_ called 1 returned 100% blocks executed 81%
        1: 1702:      subroutine aimag3
        -: 1703:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1704:      character*24 tname
        -: 1705:      real A(N)
        -: 1706:      complex B(N)
        -: 1707:      integer erri, i, asize, clock
        1: 1708:      integer, allocatable :: seed(:)
        -: 1709:      real x, y
        -: 1710:
        -: 1711:!dvm$ distribute A(BLOCK)
        -: 1712:
        1: 1713:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1714:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1715:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1716:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1717:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1718:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1719:
        1: 1720:      tname = 'imag_complexf'
        1: 1721:      erri = ER
        -: 1722:
      257: 1723:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 1724:          call random_number(x)
call    0 returned 100%
      256: 1725:          call random_number(y)
call    0 returned 100%
      257: 1726:          B(i) = cmplx(x * W + S, y * W + S)
        -: 1727:      enddo
        -: 1728:
        -: 1729:!dvm$ actual(B)	  
        -: 1730:!dvm$ region
        -: 1731:!dvm$ parallel (i) on A(i)
      257: 1732:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 1733:          A(i) = imag(B(i))
        -: 1734:      enddo
        -: 1735:!dvm$ end region
        -: 1736:!dvm$ get_actual(A)
        -: 1737:
        -: 1738:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 1739:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1740:          if (imag(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1741:               erri = min(erri, i)
        -: 1742:          endif
        -: 1743:      enddo
        -: 1744:
        1: 1745:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1746:          call ansyes(tname)
call    0 returned 100%
        -: 1747:      else
    #####: 1748:          call ansno(tname)
call    0 never executed
        -: 1749:      endif
       1*: 1750:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1751:
        -: 1752:C -------------------------------------------------
        -: 1753:
function aimag4_ called 1 returned 100% blocks executed 81%
        1: 1754:      subroutine aimag4
        -: 1755:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1756:      character*24 tname
        -: 1757:      real*8 A(N)
        -: 1758:      double complex B(N)
        -: 1759:      integer erri, i, asize, clock
        1: 1760:      integer, allocatable :: seed(:)
        -: 1761:      real*8 x, y
        -: 1762:
        -: 1763:!dvm$ distribute A(BLOCK)
        -: 1764:
        1: 1765:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1766:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1767:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1768:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1769:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1770:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1771:
        1: 1772:      tname = 'imag_complexd'
        1: 1773:      erri = ER
        -: 1774:
      257: 1775:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 1776:          call random_number(x)
call    0 returned 100%
      256: 1777:          call random_number(y)
call    0 returned 100%
      257: 1778:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 1779:      enddo
        -: 1780:
        -: 1781:!dvm$ actual(B)	  
        -: 1782:!dvm$ region
        -: 1783:!dvm$ parallel (i) on A(i)
      257: 1784:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 1785:          A(i) = imag(B(i))
        -: 1786:      enddo
        -: 1787:!dvm$ end region
        -: 1788:!dvm$ get_actual(A)
        -: 1789:
        -: 1790:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 1791:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1792:          if (imag(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1793:               erri = min(erri, i)
        -: 1794:          endif
        -: 1795:      enddo
        -: 1796:
        1: 1797:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1798:          call ansyes(tname)
call    0 returned 100%
        -: 1799:      else
    #####: 1800:          call ansno(tname)
call    0 never executed
        -: 1801:      endif
       1*: 1802:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1803:
        -: 1804:C -------------------------------------------------
        -: 1805:
function aimag5_ called 1 returned 100% blocks executed 81%
        1: 1806:      subroutine aimag5
        -: 1807:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1808:      character*24 tname
        -: 1809:      real*8 A(N)
        -: 1810:      double complex B(N)
        -: 1811:      integer erri, i, asize, clock
        1: 1812:      integer, allocatable :: seed(:)
        -: 1813:      real*8 x, y
        -: 1814:
        -: 1815:!dvm$ distribute A(BLOCK)
        -: 1816:
        1: 1817:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1818:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1819:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1820:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1821:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1822:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1823:
        1: 1824:      tname = 'dimag_complexd'
        1: 1825:      erri = ER
        -: 1826:
      257: 1827:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 1828:          call random_number(x)
call    0 returned 100%
      256: 1829:          call random_number(y)
call    0 returned 100%
      257: 1830:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 1831:      enddo
        -: 1832:
        -: 1833:!dvm$ actual(B)	  
        -: 1834:!dvm$ region
        -: 1835:!dvm$ parallel (i) on A(i)
      257: 1836:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 1837:          A(i) = dimag(B(i))
        -: 1838:      enddo
        -: 1839:!dvm$ end region
        -: 1840:!dvm$ get_actual(A)
        -: 1841:
        -: 1842:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 1843:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1844:          if (dimag(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1845:               erri = min(erri, i)
        -: 1846:          endif
        -: 1847:      enddo
        -: 1848:
        1: 1849:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1850:          call ansyes(tname)
call    0 returned 100%
        -: 1851:      else
    #####: 1852:          call ansno(tname)
call    0 never executed
        -: 1853:      endif
       1*: 1854:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1855:
        -: 1856:C -------------------------------------------------
        -: 1857:
function asin1_ called 1 returned 100% blocks executed 79%
        1: 1858:      subroutine asin1
        -: 1859:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1860:      real, parameter :: EPS = 1e-6
        -: 1861:      character*24 tname
        -: 1862:      real A(N), B(N)
        -: 1863:      integer erri, i, asize, clock
        1: 1864:      integer, allocatable :: seed(:)
        -: 1865:      real tmp
        -: 1866:
        -: 1867:!dvm$ distribute A(BLOCK)
        -: 1868:
        1: 1869:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1870:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1871:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1872:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1873:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1874:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1875:
        1: 1876:      tname = 'asin_float'
        1: 1877:      erri = ER
        -: 1878:
      257: 1879:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1880:          call random_number(B(i))
call    0 returned 100%
      257: 1881:          B(i) = B(i) * W + S
        -: 1882:      enddo
        -: 1883:
        -: 1884:!dvm$ actual(B)	  
        -: 1885:!dvm$ region
        -: 1886:!dvm$ parallel (i) on A(i)
      257: 1887:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1888:          A(i) = asin(B(i))
        -: 1889:      enddo
        -: 1890:!dvm$ end region
        -: 1891:!dvm$ get_actual(A)
        -: 1892:
        -: 1893:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1894:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1895:          tmp = asin(B(i))
      257: 1896:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1897:               erri = min(erri, i)
        -: 1898:          endif
        -: 1899:      enddo
        -: 1900:
        1: 1901:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1902:          call ansyes(tname)
call    0 returned 100%
        -: 1903:      else
    #####: 1904:          call ansno(tname)
call    0 never executed
        -: 1905:      endif
       1*: 1906:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1907:
        -: 1908:C -------------------------------------------------
        -: 1909:
function asin2_ called 1 returned 100% blocks executed 79%
        1: 1910:      subroutine asin2
        -: 1911:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1912:      real*8, parameter :: EPS = 1d-15
        -: 1913:      character*24 tname
        -: 1914:      real*8 A(N), B(N)
        -: 1915:      integer erri, i, asize, clock
        1: 1916:      integer, allocatable :: seed(:)
        -: 1917:      real*8 tmp
        -: 1918:
        -: 1919:!dvm$ distribute A(BLOCK)
        -: 1920:
        1: 1921:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1922:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1923:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1924:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1925:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1926:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1927:
        1: 1928:      tname = 'asin_double'
        1: 1929:      erri = ER
        -: 1930:
      257: 1931:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1932:          call random_number(B(i))
call    0 returned 100%
      257: 1933:          B(i) = B(i) * W + S
        -: 1934:      enddo
        -: 1935:
        -: 1936:!dvm$ actual(B)
        -: 1937:!dvm$ region
        -: 1938:!dvm$ parallel (i) on A(i)
      257: 1939:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1940:          A(i) = asin(B(i))
        -: 1941:      enddo
        -: 1942:!dvm$ end region
        -: 1943:!dvm$ get_actual(A)
        -: 1944:
        -: 1945:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1946:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1947:          tmp = asin(B(i))
      257: 1948:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1949:               erri = min(erri, i)
        -: 1950:          endif
        -: 1951:      enddo
        -: 1952:
        1: 1953:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1954:          call ansyes(tname)
call    0 returned 100%
        -: 1955:      else
    #####: 1956:          call ansno(tname)
call    0 never executed
        -: 1957:      endif
       1*: 1958:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1959:
        -: 1960:C -------------------------------------------------
        -: 1961:
function asin3_ called 1 returned 100% blocks executed 79%
        1: 1962:      subroutine asin3
        -: 1963:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 1964:      real*8, parameter :: EPS = 1d-15
        -: 1965:      character*24 tname
        -: 1966:      real*8 A(N), B(N)
        -: 1967:      integer erri, i, asize, clock
        1: 1968:      integer, allocatable :: seed(:)
        -: 1969:      real*8 tmp
        -: 1970:
        -: 1971:!dvm$ distribute A(BLOCK)
        -: 1972:
        1: 1973:      call random_seed(size = asize)
call    0 returned 100%
       3*: 1974:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 1975:      call system_clock(count = clock)
call    0 returned 100%
      34*: 1976:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 1977:      call random_seed(put = seed)
call    0 returned 100%
       1*: 1978:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 1979:
        1: 1980:      tname = 'dasin_double'
        1: 1981:      erri = ER
        -: 1982:
      257: 1983:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1984:          call random_number(B(i))
call    0 returned 100%
      257: 1985:          B(i) = B(i) * W + S
        -: 1986:      enddo
        -: 1987:
        -: 1988:!dvm$ actual(B)
        -: 1989:!dvm$ region
        -: 1990:!dvm$ parallel (i) on A(i)
      257: 1991:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 1992:          A(i) = dasin(B(i))
        -: 1993:      enddo
        -: 1994:!dvm$ end region
        -: 1995:!dvm$ get_actual(A)
        -: 1996:
        -: 1997:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 1998:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 1999:          tmp = dasin(B(i))
      257: 2000:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2001:               erri = min(erri, i)
        -: 2002:          endif
        -: 2003:      enddo
        -: 2004:
        1: 2005:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2006:          call ansyes(tname)
call    0 returned 100%
        -: 2007:      else
    #####: 2008:          call ansno(tname)
call    0 never executed
        -: 2009:      endif
       1*: 2010:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2011:
        -: 2012:C -------------------------------------------------
        -: 2013:
function asinh1_ called 1 returned 100% blocks executed 79%
        1: 2014:      subroutine asinh1
        -: 2015:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 2016:      real, parameter :: EPS = 1e-6
        -: 2017:      character*24 tname
        -: 2018:      real A(N), B(N)
        -: 2019:      integer erri, i, asize, clock
        1: 2020:      integer, allocatable :: seed(:)
        -: 2021:      real tmp
        -: 2022:
        -: 2023:!dvm$ distribute A(BLOCK)
        -: 2024:
        1: 2025:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2026:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2027:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2028:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2029:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2030:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2031:
        1: 2032:      tname = 'asinh_float'
        1: 2033:      erri = ER
        -: 2034:
      257: 2035:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2036:          call random_number(B(i))
call    0 returned 100%
      257: 2037:          B(i) = B(i) * W + S
        -: 2038:      enddo
        -: 2039:
        -: 2040:!dvm$ actual(B)	  
        -: 2041:!dvm$ region
        -: 2042:!dvm$ parallel (i) on A(i)
      257: 2043:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2044:          A(i) = asinh(B(i))
        -: 2045:      enddo
        -: 2046:!dvm$ end region
        -: 2047:!dvm$ get_actual(A)
        -: 2048:
        -: 2049:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2050:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2051:          tmp = asinh(B(i))
      257: 2052:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2053:               erri = min(erri, i)
        -: 2054:          endif
        -: 2055:      enddo
        -: 2056:
        1: 2057:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2058:          call ansyes(tname)
call    0 returned 100%
        -: 2059:      else
    #####: 2060:          call ansno(tname)
call    0 never executed
        -: 2061:      endif
       1*: 2062:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2063:
        -: 2064:C -------------------------------------------------
        -: 2065:
function asinh2_ called 1 returned 100% blocks executed 79%
        1: 2066:      subroutine asinh2
        -: 2067:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 2068:      real*8, parameter :: EPS = 1d-15
        -: 2069:      character*24 tname
        -: 2070:      real*8 A(N), B(N)
        -: 2071:      integer erri, i, asize, clock
        1: 2072:      integer, allocatable :: seed(:)
        -: 2073:      real*8 tmp
        -: 2074:
        -: 2075:!dvm$ distribute A(BLOCK)
        -: 2076:
        1: 2077:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2078:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2079:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2080:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2081:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2082:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2083:
        1: 2084:      tname = 'asinh_double'
        1: 2085:      erri = ER
        -: 2086:
      257: 2087:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2088:          call random_number(B(i))
call    0 returned 100%
      257: 2089:          B(i) = B(i) * W + S
        -: 2090:      enddo
        -: 2091:
        -: 2092:!dvm$ actual(B)
        -: 2093:!dvm$ region
        -: 2094:!dvm$ parallel (i) on A(i)
      257: 2095:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2096:          A(i) = asinh(B(i))
        -: 2097:      enddo
        -: 2098:!dvm$ end region
        -: 2099:!dvm$ get_actual(A)
        -: 2100:
        -: 2101:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2102:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2103:          tmp = asinh(B(i))
      257: 2104:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2105:               erri = min(erri, i)
        -: 2106:          endif
        -: 2107:      enddo
        -: 2108:
        1: 2109:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2110:          call ansyes(tname)
call    0 returned 100%
        -: 2111:      else
    #####: 2112:          call ansno(tname)
call    0 never executed
        -: 2113:      endif
       1*: 2114:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2115:
        -: 2116:C -------------------------------------------------
        -: 2117:
function asinh3_ called 1 returned 100% blocks executed 79%
        1: 2118:      subroutine asinh3
        -: 2119:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 2120:      real*8, parameter :: EPS = 1d-15
        -: 2121:      character*24 tname
        -: 2122:      real*8 A(N), B(N)
        -: 2123:      integer erri, i, asize, clock
        1: 2124:      integer, allocatable :: seed(:)
        -: 2125:      real*8 tmp
        -: 2126:
        -: 2127:!dvm$ distribute A(BLOCK)
        -: 2128:
        1: 2129:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2130:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2131:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2132:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2133:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2134:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2135:
        1: 2136:      tname = 'dasinh_double'
        1: 2137:      erri = ER
        -: 2138:
      257: 2139:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2140:          call random_number(B(i))
call    0 returned 100%
      257: 2141:          B(i) = B(i) * W + S
        -: 2142:      enddo
        -: 2143:
        -: 2144:!dvm$ actual(B)
        -: 2145:!dvm$ region
        -: 2146:!dvm$ parallel (i) on A(i)
      257: 2147:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2148:          A(i) = dasinh(B(i))
        -: 2149:      enddo
        -: 2150:!dvm$ end region
        -: 2151:!dvm$ get_actual(A)
        -: 2152:
        -: 2153:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2154:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2155:          tmp = dasinh(B(i))
      257: 2156:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2157:               erri = min(erri, i)
        -: 2158:          endif
        -: 2159:      enddo
        -: 2160:
        1: 2161:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2162:          call ansyes(tname)
call    0 returned 100%
        -: 2163:      else
    #####: 2164:          call ansno(tname)
call    0 never executed
        -: 2165:      endif
       1*: 2166:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2167:
        -: 2168:C -------------------------------------------------
        -: 2169:
function atan1_ called 1 returned 100% blocks executed 79%
        1: 2170:      subroutine atan1
        -: 2171:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 2172:      real, parameter :: EPS = 1e-6
        -: 2173:      character*24 tname
        -: 2174:      real A(N), B(N)
        -: 2175:      integer erri, i, asize, clock
        1: 2176:      integer, allocatable :: seed(:)
        -: 2177:      real tmp
        -: 2178:
        -: 2179:!dvm$ distribute A(BLOCK)
        -: 2180:
        1: 2181:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2182:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2183:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2184:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2185:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2186:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2187:
        1: 2188:      tname = 'atan_float'
        -: 2189:      
        -: 2190:      
        1: 2191:      erri = ER
        -: 2192:
      257: 2193:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2194:          call random_number(B(i))
call    0 returned 100%
      257: 2195:          B(i) = B(i) * W + S
        -: 2196:      enddo
        -: 2197:
        -: 2198:!dvm$ actual(B)	  
        -: 2199:!dvm$ region
        -: 2200:!dvm$ parallel (i) on A(i)
      257: 2201:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2202:          A(i) = atan(B(i))
        -: 2203:      enddo
        -: 2204:!dvm$ end region
        -: 2205:!dvm$ get_actual(A)
        -: 2206:
        -: 2207:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2208:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2209:          tmp = atan(B(i))
      257: 2210:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2211:               erri = min(erri, i)
        -: 2212:          endif
        -: 2213:      enddo
        -: 2214:
        1: 2215:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2216:          call ansyes(tname)
call    0 returned 100%
        -: 2217:      else
    #####: 2218:          call ansno(tname)
call    0 never executed
        -: 2219:      endif
       1*: 2220:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2221:
        -: 2222:C -------------------------------------------------
        -: 2223:
function atan2__ called 1 returned 100% blocks executed 79%
        1: 2224:      subroutine atan2_
        -: 2225:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 2226:      real*8, parameter :: EPS = 1d-15
        -: 2227:      character*24 tname
        -: 2228:      real*8 A(N), B(N)
        -: 2229:      integer erri, i, asize, clock
        1: 2230:      integer, allocatable :: seed(:)
        -: 2231:      real*8 tmp
        -: 2232:
        -: 2233:!dvm$ distribute A(BLOCK)
        -: 2234:
        1: 2235:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2236:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2237:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2238:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2239:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2240:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2241:
        1: 2242:      tname = 'atan_double'
        1: 2243:      erri = ER
        -: 2244:
      257: 2245:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2246:          call random_number(B(i))
call    0 returned 100%
      257: 2247:          B(i) = B(i) * W + S
        -: 2248:      enddo
        -: 2249:
        -: 2250:!dvm$ actual(B)
        -: 2251:!dvm$ region
        -: 2252:!dvm$ parallel (i) on A(i)
      257: 2253:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2254:          A(i) = atan(B(i))
        -: 2255:      enddo
        -: 2256:!dvm$ end region
        -: 2257:!dvm$ get_actual(A)
        -: 2258:
        -: 2259:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2260:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2261:          tmp = atan(B(i))
      257: 2262:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2263:               erri = min(erri, i)
        -: 2264:          endif
        -: 2265:      enddo
        -: 2266:
        1: 2267:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2268:          call ansyes(tname)
call    0 returned 100%
        -: 2269:      else
    #####: 2270:          call ansno(tname)
call    0 never executed
        -: 2271:      endif
       1*: 2272:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2273:
        -: 2274:C -------------------------------------------------
        -: 2275:
function atan3_ called 1 returned 100% blocks executed 79%
        1: 2276:      subroutine atan3
        -: 2277:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 2278:      real*8, parameter :: EPS = 1d-15
        -: 2279:      character*24 tname
        -: 2280:      real*8 A(N), B(N)
        -: 2281:      integer erri, i, asize, clock
        1: 2282:      integer, allocatable :: seed(:)
        -: 2283:      real*8 tmp
        -: 2284:
        -: 2285:!dvm$ distribute A(BLOCK)
        -: 2286:
        1: 2287:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2288:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2289:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2290:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2291:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2292:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2293:
        1: 2294:      tname = 'datan_double'
        1: 2295:      erri = ER
        -: 2296:
      257: 2297:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2298:          call random_number(B(i))
call    0 returned 100%
      257: 2299:          B(i) = B(i) * W + S
        -: 2300:      enddo
        -: 2301:
        -: 2302:!dvm$ actual(B)
        -: 2303:!dvm$ region
        -: 2304:!dvm$ parallel (i) on A(i)
      257: 2305:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2306:          A(i) = datan(B(i))
        -: 2307:      enddo
        -: 2308:!dvm$ end region
        -: 2309:!dvm$ get_actual(A)
        -: 2310:
        -: 2311:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2312:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2313:          tmp = datan(B(i))
      257: 2314:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2315:               erri = min(erri, i)
        -: 2316:          endif
        -: 2317:      enddo
        -: 2318:
        1: 2319:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2320:          call ansyes(tname)
call    0 returned 100%
        -: 2321:      else
    #####: 2322:          call ansno(tname)
call    0 never executed
        -: 2323:      endif
       1*: 2324:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2325:
        -: 2326:C -------------------------------------------------
        -: 2327:
function atan21_ called 1 returned 100% blocks executed 80%
        1: 2328:      subroutine atan21
        -: 2329:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -: 2330:     & = 99, S2 = 1
        -: 2331:      real, parameter :: EPS = 1e-6
        -: 2332:      character*24 tname
        -: 2333:      real A(N), B(N), C(N)
        -: 2334:      integer erri, i, asize, clock
        1: 2335:      integer, allocatable :: seed(:)
        -: 2336:      real tmp
        -: 2337:
        -: 2338:!dvm$ distribute A(BLOCK)
        -: 2339:
        1: 2340:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2341:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2342:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2343:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2344:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2345:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2346:
        1: 2347:      tname = 'atan2_float'
        1: 2348:      erri = ER
        -: 2349:
      257: 2350:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2351:          call random_number(B(i))
call    0 returned 100%
      256: 2352:          call random_number(C(i))
call    0 returned 100%
      256: 2353:          B(i) = B(i) * W1 + S1
      257: 2354:          C(i) = C(i) * W2 + S2
        -: 2355:      enddo
        -: 2356:
        -: 2357:!dvm$ actual(B, C)	  
        -: 2358:!dvm$ region
        -: 2359:!dvm$ parallel (i) on A(i)
      257: 2360:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2361:          A(i) = atan2(B(i), C(i))
        -: 2362:      enddo
        -: 2363:!dvm$ end region
        -: 2364:!dvm$ get_actual(A)
        -: 2365:
        -: 2366:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2367:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2368:          tmp = atan2(B(i), C(i))
      257: 2369:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2370:               erri = min(erri, i)
        -: 2371:          endif
        -: 2372:      enddo
        -: 2373:
        1: 2374:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2375:          call ansyes(tname)
call    0 returned 100%
        -: 2376:      else
    #####: 2377:          call ansno(tname)
call    0 never executed
        -: 2378:      endif
       1*: 2379:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2380:
        -: 2381:C -------------------------------------------------
        -: 2382:
function atan22_ called 1 returned 100% blocks executed 80%
        1: 2383:      subroutine atan22
        -: 2384:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -: 2385:     & = 99, S2 = 1
        -: 2386:      real*8, parameter :: EPS = 1d-15
        -: 2387:      character*24 tname
        -: 2388:      real*8 A(N), B(N), C(N)
        -: 2389:      integer erri, i, asize, clock
        1: 2390:      integer, allocatable :: seed(:)
        -: 2391:      real*8 tmp
        -: 2392:
        -: 2393:!dvm$ distribute A(BLOCK)
        -: 2394:
        1: 2395:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2396:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2397:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2398:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2399:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2400:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2401:
        1: 2402:      tname = 'atan2_double'
        1: 2403:      erri = ER
        -: 2404:
      257: 2405:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2406:          call random_number(B(i))
call    0 returned 100%
      256: 2407:          call random_number(C(i))
call    0 returned 100%
      256: 2408:          B(i) = B(i) * W1 + S1
      257: 2409:          C(i) = C(i) * W2 + S2
        -: 2410:      enddo
        -: 2411:
        -: 2412:!dvm$ actual(B, C)
        -: 2413:!dvm$ region
        -: 2414:!dvm$ parallel (i) on A(i)
      257: 2415:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2416:          A(i) = atan2(B(i), C(i))
        -: 2417:      enddo
        -: 2418:!dvm$ end region
        -: 2419:!dvm$ get_actual(A)
        -: 2420:
        -: 2421:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2422:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2423:          tmp = atan2(B(i), C(i))
      257: 2424:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2425:               erri = min(erri, i)
        -: 2426:          endif
        -: 2427:      enddo
        -: 2428:
        1: 2429:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2430:          call ansyes(tname)
call    0 returned 100%
        -: 2431:      else
    #####: 2432:          call ansno(tname)
call    0 never executed
        -: 2433:      endif
       1*: 2434:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2435:
        -: 2436:C -------------------------------------------------
        -: 2437:
function atan23_ called 1 returned 100% blocks executed 80%
        1: 2438:      subroutine atan23
        -: 2439:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -: 2440:     & = 99, S2 = 1
        -: 2441:      real*8, parameter :: EPS = 1d-15
        -: 2442:      character*24 tname
        -: 2443:      real*8 A(N), B(N), C(N)
        -: 2444:      integer erri, i, asize, clock
        1: 2445:      integer, allocatable :: seed(:)
        -: 2446:      real*8 tmp
        -: 2447:
        -: 2448:!dvm$ distribute A(BLOCK)
        -: 2449:
        1: 2450:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2451:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2452:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2453:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2454:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2455:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2456:
        1: 2457:      tname = 'datan2_double'
        1: 2458:      erri = ER
        -: 2459:
      257: 2460:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2461:          call random_number(B(i))
call    0 returned 100%
      256: 2462:          call random_number(C(i))
call    0 returned 100%
      256: 2463:          B(i) = B(i) * W1 + S1
      257: 2464:          C(i) = C(i) * W2 + S2
        -: 2465:      enddo
        -: 2466:
        -: 2467:!dvm$ actual(B, C)
        -: 2468:!dvm$ region
        -: 2469:!dvm$ parallel (i) on A(i)
      257: 2470:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2471:          A(i) = datan2(B(i), C(i))
        -: 2472:      enddo
        -: 2473:!dvm$ end region
        -: 2474:!dvm$ get_actual(A)
        -: 2475:
        -: 2476:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2477:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2478:          tmp = datan2(B(i), C(i))
      257: 2479:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2480:               erri = min(erri, i)
        -: 2481:          endif
        -: 2482:      enddo
        -: 2483:
        1: 2484:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2485:          call ansyes(tname)
call    0 returned 100%
        -: 2486:      else
    #####: 2487:          call ansno(tname)
call    0 never executed
        -: 2488:      endif
       1*: 2489:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2490:
        -: 2491:C -------------------------------------------------
        -: 2492:
function atanh1_ called 1 returned 100% blocks executed 79%
        1: 2493:      subroutine atanh1
        -: 2494:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 2495:      real, parameter :: EPS = 1e-6
        -: 2496:      character*24 tname
        -: 2497:      real A(N), B(N)
        -: 2498:      integer erri, i, asize, clock
        1: 2499:      integer, allocatable :: seed(:)
        -: 2500:      real tmp
        -: 2501:
        -: 2502:!dvm$ distribute A(BLOCK)
        -: 2503:
        1: 2504:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2505:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2506:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2507:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2508:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2509:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2510:
        1: 2511:      tname = 'atanh_float'
        1: 2512:      erri = ER
        -: 2513:
      257: 2514:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2515:          call random_number(B(i))
call    0 returned 100%
      257: 2516:          B(i) = B(i) * W + S
        -: 2517:      enddo
        -: 2518:
        -: 2519:!dvm$ actual(B)	  
        -: 2520:!dvm$ region
        -: 2521:!dvm$ parallel (i) on A(i)
      257: 2522:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2523:          A(i) = atanh(B(i))
        -: 2524:      enddo
        -: 2525:!dvm$ end region
        -: 2526:!dvm$ get_actual(A)
        -: 2527:
        -: 2528:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2529:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2530:          tmp = atanh(B(i))
      257: 2531:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2532:               erri = min(erri, i)
        -: 2533:          endif
        -: 2534:      enddo
        -: 2535:
        1: 2536:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2537:          call ansyes(tname)
call    0 returned 100%
        -: 2538:      else
    #####: 2539:          call ansno(tname)
call    0 never executed
        -: 2540:      endif 
        -: 2541:      
       1*: 2542:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2543:
        -: 2544:C -------------------------------------------------
        -: 2545:
function atanh2_ called 1 returned 100% blocks executed 79%
        1: 2546:      subroutine atanh2
        -: 2547:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 2548:      real*8, parameter :: EPS = 1d-15
        -: 2549:      character*24 tname
        -: 2550:      real*8 A(N), B(N)
        -: 2551:      integer erri, i, asize, clock
        1: 2552:      integer, allocatable :: seed(:)
        -: 2553:      real*8 tmp
        -: 2554:
        -: 2555:!dvm$ distribute A(BLOCK)
        -: 2556:
        1: 2557:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2558:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2559:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2560:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2561:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2562:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2563:
        1: 2564:      tname = 'atanh_double'
        1: 2565:      erri = ER
        -: 2566:
      257: 2567:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2568:          call random_number(B(i))
call    0 returned 100%
      257: 2569:          B(i) = B(i) * W + S
        -: 2570:      enddo
        -: 2571:
        -: 2572:!dvm$ actual(B)
        -: 2573:!dvm$ region
        -: 2574:!dvm$ parallel (i) on A(i)
      257: 2575:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2576:          A(i) = atanh(B(i))
        -: 2577:      enddo
        -: 2578:!dvm$ end region
        -: 2579:!dvm$ get_actual(A)
        -: 2580:
        -: 2581:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2582:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2583:          tmp = atanh(B(i))
      257: 2584:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2585:               erri = min(erri, i)
        -: 2586:          endif
        -: 2587:      enddo
        -: 2588:
        1: 2589:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2590:          call ansyes(tname)
call    0 returned 100%
        -: 2591:      else
    #####: 2592:          call ansno(tname)
call    0 never executed
        -: 2593:      endif 
        -: 2594:      
       1*: 2595:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2596:
        -: 2597:C -------------------------------------------------
        -: 2598:
function atanh3_ called 1 returned 100% blocks executed 79%
        1: 2599:      subroutine atanh3
        -: 2600:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 2601:      real*8, parameter :: EPS = 1d-15
        -: 2602:      character*24 tname
        -: 2603:      real*8 A(N), B(N)
        -: 2604:      integer erri, i, asize, clock
        1: 2605:      integer, allocatable :: seed(:)
        -: 2606:      real*8 tmp
        -: 2607:
        -: 2608:!dvm$ distribute A(BLOCK)
        -: 2609:
        1: 2610:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2611:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2612:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2613:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2614:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2615:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2616:
        1: 2617:      tname = 'datanh_double'
        1: 2618:      erri = ER
        -: 2619:
      257: 2620:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2621:          call random_number(B(i))
call    0 returned 100%
      257: 2622:          B(i) = B(i) * W + S
        -: 2623:      enddo
        -: 2624:
        -: 2625:!dvm$ actual(B)
        -: 2626:!dvm$ region
        -: 2627:!dvm$ parallel (i) on A(i)
      257: 2628:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2629:          A(i) = datanh(B(i))
        -: 2630:      enddo
        -: 2631:!dvm$ end region
        -: 2632:!dvm$ get_actual(A)
        -: 2633:
        -: 2634:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 2635:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2636:          tmp = datanh(B(i))
      257: 2637:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2638:               erri = min(erri, i)
        -: 2639:          endif
        -: 2640:      enddo
        -: 2641:
        1: 2642:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2643:          call ansyes(tname)
call    0 returned 100%
        -: 2644:      else
    #####: 2645:          call ansno(tname)
call    0 never executed
        -: 2646:      endif 
        -: 2647:      
       1*: 2648:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2649:
        -: 2650:C -------------------------------------------------
        -: 2651:
function bessel_j01_ called 1 returned 100% blocks executed 79%
        1: 2652:      subroutine bessel_j01
        -: 2653:      integer, parameter :: N = 256, ER = N + 1, W = 20, S = -10
        -: 2654:      real, parameter :: EPS = 1e-6
        -: 2655:      character*24 tname
        -: 2656:      real A(N), B(N)
        -: 2657:      integer erri, i, asize, clock
        1: 2658:      integer, allocatable :: seed(:)
        -: 2659:
        -: 2660:!dvm$ distribute A(BLOCK)
        -: 2661:
        1: 2662:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2663:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2664:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2665:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2666:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2667:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2668:
        1: 2669:      tname = 'bessel_j0_float'
        1: 2670:      erri = ER
        -: 2671:
      257: 2672:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2673:          call random_number(B(i))
call    0 returned 100%
      257: 2674:          B(i) = B(i) * W + S
        -: 2675:      enddo
        -: 2676:
        -: 2677:!dvm$ actual(B)
        -: 2678:!dvm$ region
        -: 2679:!dvm$ parallel (i) on A(i)
      257: 2680:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2681:          A(i) = bessel_j0(B(i))
        -: 2682:      enddo
        -: 2683:!dvm$ end region
        -: 2684:!dvm$ get_actual(A)
        -: 2685:
        -: 2686:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 2687:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2688:          if (abs(bessel_j0(B(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2689:               erri = min(erri, i)
        -: 2690:          endif
        -: 2691:      enddo
        -: 2692:
        1: 2693:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2694:          call ansyes(tname)
call    0 returned 100%
        -: 2695:      else
    #####: 2696:          call ansno(tname)
call    0 never executed
        -: 2697:      endif 
        -: 2698:      
       1*: 2699:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2700:
        -: 2701:C -------------------------------------------------
        -: 2702:
function bessel_j02_ called 1 returned 100% blocks executed 79%
        1: 2703:      subroutine bessel_j02
        -: 2704:      integer, parameter :: N = 256, ER = N + 1, W = 20, S = -10
        -: 2705:      real*8, parameter :: EPS = 1d-12
        -: 2706:      character*24 tname
        -: 2707:      real*8 A(N), B(N)
        -: 2708:      integer erri, i, asize, clock
        1: 2709:      integer, allocatable :: seed(:)
        -: 2710:
        -: 2711:!dvm$ distribute A(BLOCK)
        -: 2712:
        1: 2713:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2714:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2715:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2716:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2717:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2718:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2719:
        1: 2720:      tname = 'bessel_j0_double'
        1: 2721:      erri = ER
        -: 2722:
      257: 2723:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2724:          call random_number(B(i))
call    0 returned 100%
      257: 2725:          B(i) = B(i) * W + S
        -: 2726:      enddo
        -: 2727:
        -: 2728:!dvm$ actual(B)
        -: 2729:!dvm$ region
        -: 2730:!dvm$ parallel (i) on A(i)
      257: 2731:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2732:          A(i) = bessel_j0(B(i))
        -: 2733:      enddo
        -: 2734:!dvm$ end region
        -: 2735:!dvm$ get_actual(A)
        -: 2736:
        -: 2737:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 2738:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2739:          if (abs(bessel_j0(B(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2740:               erri = min(erri, i)
        -: 2741:          endif
        -: 2742:      enddo
        -: 2743:
        1: 2744:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2745:          call ansyes(tname)
call    0 returned 100%
        -: 2746:      else
    #####: 2747:          call ansno(tname)
call    0 never executed
        -: 2748:      endif 
        -: 2749:      
       1*: 2750:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2751:
        -: 2752:C -------------------------------------------------
        -: 2753:
function bessel_j11_ called 1 returned 100% blocks executed 79%
        1: 2754:      subroutine bessel_j11
        -: 2755:      integer, parameter :: N = 256, ER = N + 1, W = 20, S = -10
        -: 2756:      real, parameter :: EPS = 1e-6
        -: 2757:      character*24 tname
        -: 2758:      real A(N), B(N)
        -: 2759:      integer erri, i, asize, clock
        1: 2760:      integer, allocatable :: seed(:)
        -: 2761:
        -: 2762:!dvm$ distribute A(BLOCK)
        -: 2763:
        1: 2764:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2765:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2766:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2767:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2768:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2769:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2770:
        1: 2771:      tname = 'bessel_j1_float'
        1: 2772:      erri = ER
        -: 2773:
      257: 2774:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2775:          call random_number(B(i))
call    0 returned 100%
      257: 2776:          B(i) = B(i) * W + S
        -: 2777:      enddo
        -: 2778:
        -: 2779:!dvm$ actual(B)
        -: 2780:!dvm$ region
        -: 2781:!dvm$ parallel (i) on A(i)
      257: 2782:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2783:          A(i) = bessel_j1(B(i))
        -: 2784:      enddo
        -: 2785:!dvm$ end region
        -: 2786:!dvm$ get_actual(A)
        -: 2787:
        -: 2788:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 2789:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2790:          if (abs(bessel_j1(B(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2791:               erri = min(erri, i)
        -: 2792:          endif
        -: 2793:      enddo
        -: 2794:
        1: 2795:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2796:          call ansyes(tname)
call    0 returned 100%
        -: 2797:      else
    #####: 2798:          call ansno(tname)
call    0 never executed
        -: 2799:      endif 
        -: 2800:      
       1*: 2801:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2802:
        -: 2803:C -------------------------------------------------
        -: 2804:
function bessel_j12_ called 1 returned 100% blocks executed 79%
        1: 2805:      subroutine bessel_j12
        -: 2806:      integer, parameter :: N = 256, ER = N + 1, W = 20, S = -10
        -: 2807:      real*8, parameter :: EPS = 1d-12
        -: 2808:      character*24 tname
        -: 2809:      real*8 A(N), B(N)
        -: 2810:      integer erri, i, asize, clock
        1: 2811:      integer, allocatable :: seed(:)
        -: 2812:
        -: 2813:!dvm$ distribute A(BLOCK)
        -: 2814:
        1: 2815:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2816:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2817:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2818:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2819:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2820:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2821:
        1: 2822:      tname = 'bessel_j1_double'
        1: 2823:      erri = ER
        -: 2824:
      257: 2825:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2826:          call random_number(B(i))
call    0 returned 100%
      257: 2827:          B(i) = B(i) * W + S
        -: 2828:      enddo
        -: 2829:
        -: 2830:!dvm$ actual(B)
        -: 2831:!dvm$ region
        -: 2832:!dvm$ parallel (i) on A(i)
      257: 2833:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2834:          A(i) = bessel_j1(B(i))
        -: 2835:      enddo
        -: 2836:!dvm$ end region
        -: 2837:!dvm$ get_actual(A)
        -: 2838:
        -: 2839:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 2840:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2841:          if (abs(bessel_j1(B(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2842:               erri = min(erri, i)
        -: 2843:          endif
        -: 2844:      enddo
        -: 2845:
        1: 2846:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2847:          call ansyes(tname)
call    0 returned 100%
        -: 2848:      else
    #####: 2849:          call ansno(tname)
call    0 never executed
        -: 2850:      endif 
        -: 2851:      
       1*: 2852:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2853:
        -: 2854:C -------------------------------------------------
        -: 2855:
function bessel_jn1_ called 1 returned 100% blocks executed 80%
        1: 2856:      subroutine bessel_jn1
        -: 2857:      integer, parameter :: N = 256, ER = N + 1, W1 = 19, S1 = 1, W2 = 
        -: 2858:     &20, S2 = -10
        -: 2859:      real, parameter :: EPS = 1e-6
        -: 2860:      character*24 tname
        -: 2861:      real A(N), C(N)
        -: 2862:      integer B(N)
        -: 2863:      integer erri, i, asize, clock
        1: 2864:      integer, allocatable :: seed(:)
        -: 2865:
        -: 2866:!dvm$ distribute A(BLOCK)
        -: 2867:
        1: 2868:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2869:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2870:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2871:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2872:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2873:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2874:
        1: 2875:      tname = 'bessel_jn_float'
        1: 2876:      erri = ER
        -: 2877:
      257: 2878:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2879:          call random_number(tmp)
call    0 returned 100%
      256: 2880:          call random_number(C(i))
call    0 returned 100%
      256: 2881:          B(i) = int(tmp * W1 + S1)
      257: 2882:          C(i) = C(i) * W2 + S2
        -: 2883:      enddo
        -: 2884:
        -: 2885:!dvm$ actual(B, C)
        -: 2886:!dvm$ region
        -: 2887:!dvm$ parallel (i) on A(i)
      257: 2888:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2889:          A(i) = bessel_jn(B(i), C(i))
        -: 2890:      enddo
        -: 2891:!dvm$ end region
        -: 2892:!dvm$ get_actual(A)
        -: 2893:
        -: 2894:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 2895:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2896:          if (abs(bessel_jn(B(i), C(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2897:               erri = min(erri, i)
        -: 2898:          endif
        -: 2899:      enddo
        -: 2900:
        1: 2901:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2902:          call ansyes(tname)
call    0 returned 100%
        -: 2903:      else
    #####: 2904:          call ansno(tname)
call    0 never executed
        -: 2905:      endif 
        -: 2906:      
       1*: 2907:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2908:
        -: 2909:C -------------------------------------------------
        -: 2910:
function bessel_jn2_ called 1 returned 100% blocks executed 80%
        1: 2911:      subroutine bessel_jn2
        -: 2912:      integer, parameter :: N = 256, ER = N + 1, W1 = 19, S1 = 1, W2 = 
        -: 2913:     &20, S2 = -10
        -: 2914:      real*8, parameter :: EPS = 1d-12
        -: 2915:      character*24 tname
        -: 2916:      real*8 A(N), C(N)
        -: 2917:      integer B(N)
        -: 2918:      integer erri, i, asize, clock
        1: 2919:      integer, allocatable :: seed(:)
        -: 2920:
        -: 2921:!dvm$ distribute A(BLOCK)
        -: 2922:
        1: 2923:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2924:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2925:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2926:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2927:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2928:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2929:
        1: 2930:      tname = 'bessel_jn_double'
        1: 2931:      erri = ER
        -: 2932:
      257: 2933:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2934:          call random_number(tmp)
call    0 returned 100%
      256: 2935:          call random_number(C(i))
call    0 returned 100%
      256: 2936:          B(i) = int(tmp * W1 + S1)
      257: 2937:          C(i) = C(i) * W2 + S2
        -: 2938:      enddo
        -: 2939:
        -: 2940:!dvm$ actual(B, C)
        -: 2941:!dvm$ region
        -: 2942:!dvm$ parallel (i) on A(i)
      257: 2943:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2944:          A(i) = bessel_jn(B(i), C(i))
        -: 2945:      enddo
        -: 2946:!dvm$ end region
        -: 2947:!dvm$ get_actual(A)
        -: 2948:
        -: 2949:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 2950:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2951:          if (abs(bessel_jn(B(i), C(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 2952:               erri = min(erri, i)
        -: 2953:          endif
        -: 2954:      enddo
        -: 2955:
        1: 2956:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 2957:          call ansyes(tname)
call    0 returned 100%
        -: 2958:      else
    #####: 2959:          call ansno(tname)
call    0 never executed
        -: 2960:      endif 
        -: 2961:      
       1*: 2962:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 2963:
        -: 2964:C -------------------------------------------------
        -: 2965:
function bessel_y01_ called 1 returned 100% blocks executed 79%
        1: 2966:      subroutine bessel_y01
        -: 2967:      integer, parameter :: N = 256, ER = N + 1, W = 10, S = 1
        -: 2968:      real, parameter :: EPS = 1e-6
        -: 2969:      character*24 tname
        -: 2970:      real A(N), B(N)
        -: 2971:      integer erri, i, asize, clock
        1: 2972:      integer, allocatable :: seed(:)
        -: 2973:
        -: 2974:!dvm$ distribute A(BLOCK)
        -: 2975:
        1: 2976:      call random_seed(size = asize)
call    0 returned 100%
       3*: 2977:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 2978:      call system_clock(count = clock)
call    0 returned 100%
      34*: 2979:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 2980:      call random_seed(put = seed)
call    0 returned 100%
       1*: 2981:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 2982:
        1: 2983:      tname = 'bessel_y0_float'
        1: 2984:      erri = ER
        -: 2985:
      257: 2986:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 2987:          call random_number(B(i))
call    0 returned 100%
      257: 2988:          B(i) = B(i) * W + S
        -: 2989:      enddo
        -: 2990:
        -: 2991:!dvm$ actual(B)
        -: 2992:!dvm$ region
        -: 2993:!dvm$ parallel (i) on A(i)
      257: 2994:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 2995:          A(i) = bessel_y0(B(i))
        -: 2996:      enddo
        -: 2997:!dvm$ end region
        -: 2998:!dvm$ get_actual(A)
        -: 2999:
        -: 3000:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3001:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3002:          if (abs(bessel_y0(B(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3003:               erri = min(erri, i)
        -: 3004:          endif
        -: 3005:      enddo
        -: 3006:
        1: 3007:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3008:          call ansyes(tname)
call    0 returned 100%
        -: 3009:      else
    #####: 3010:          call ansno(tname)
call    0 never executed
        -: 3011:      endif 
        -: 3012:      
       1*: 3013:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3014:
        -: 3015:C -------------------------------------------------
        -: 3016:
function bessel_y02_ called 1 returned 100% blocks executed 79%
        1: 3017:      subroutine bessel_y02
        -: 3018:      integer, parameter :: N = 256, ER = N + 1, W = 10, S = 1
        -: 3019:      real*8, parameter :: EPS = 1d-12
        -: 3020:      character*24 tname
        -: 3021:      real*8 A(N), B(N)
        -: 3022:      integer erri, i, asize, clock
        1: 3023:      integer, allocatable :: seed(:)
        -: 3024:
        -: 3025:!dvm$ distribute A(BLOCK)
        -: 3026:
        1: 3027:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3028:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3029:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3030:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3031:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3032:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3033:
        1: 3034:      tname = 'bessel_y0_double'
        1: 3035:      erri = ER
        -: 3036:
      257: 3037:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 3038:          call random_number(B(i))
call    0 returned 100%
      257: 3039:          B(i) = B(i) * W + S
        -: 3040:      enddo
        -: 3041:
        -: 3042:!dvm$ actual(B)
        -: 3043:!dvm$ region
        -: 3044:!dvm$ parallel (i) on A(i)
      257: 3045:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3046:          A(i) = bessel_y0(B(i))
        -: 3047:      enddo
        -: 3048:!dvm$ end region
        -: 3049:!dvm$ get_actual(A)
        -: 3050:
        -: 3051:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3052:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3053:          if (abs(bessel_y0(B(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3054:               erri = min(erri, i)
        -: 3055:          endif
        -: 3056:      enddo
        -: 3057:
        1: 3058:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3059:          call ansyes(tname)
call    0 returned 100%
        -: 3060:      else
    #####: 3061:          call ansno(tname)
call    0 never executed
        -: 3062:      endif 
        -: 3063:      
       1*: 3064:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3065:
        -: 3066:C -------------------------------------------------
        -: 3067:
function bessel_y11_ called 1 returned 100% blocks executed 79%
        1: 3068:      subroutine bessel_y11
        -: 3069:      integer, parameter :: N = 256, ER = N + 1, W = 10, S = 1
        -: 3070:      real, parameter :: EPS = 1e-6
        -: 3071:      character*24 tname
        -: 3072:      real A(N), B(N)
        -: 3073:      integer erri, i, asize, clock
        1: 3074:      integer, allocatable :: seed(:)
        -: 3075:
        -: 3076:!dvm$ distribute A(BLOCK)
        -: 3077:
        1: 3078:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3079:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3080:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3081:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3082:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3083:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3084:
        1: 3085:      tname = 'bessel_y1_float'
        1: 3086:      erri = ER
        -: 3087:
      257: 3088:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 3089:          call random_number(B(i))
call    0 returned 100%
      257: 3090:          B(i) = B(i) * W + S
        -: 3091:      enddo
        -: 3092:
        -: 3093:!dvm$ actual(B)
        -: 3094:!dvm$ region
        -: 3095:!dvm$ parallel (i) on A(i)
      257: 3096:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3097:          A(i) = bessel_y1(B(i))
        -: 3098:      enddo
        -: 3099:!dvm$ end region
        -: 3100:!dvm$ get_actual(A)
        -: 3101:
        -: 3102:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3103:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3104:          if (abs(bessel_y1(B(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3105:               erri = min(erri, i)
        -: 3106:          endif
        -: 3107:      enddo
        -: 3108:
        1: 3109:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3110:          call ansyes(tname)
call    0 returned 100%
        -: 3111:      else
    #####: 3112:          call ansno(tname)
call    0 never executed
        -: 3113:      endif 
        -: 3114:      
       1*: 3115:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3116:
        -: 3117:C -------------------------------------------------
        -: 3118:
function bessel_y12_ called 1 returned 100% blocks executed 79%
        1: 3119:      subroutine bessel_y12
        -: 3120:      integer, parameter :: N = 256, ER = N + 1, W = 10, S = 1
        -: 3121:      real*8, parameter :: EPS = 1d-12
        -: 3122:      character*24 tname
        -: 3123:      real*8 A(N), B(N)
        -: 3124:      integer erri, i, asize, clock
        1: 3125:      integer, allocatable :: seed(:)
        -: 3126:
        -: 3127:!dvm$ distribute A(BLOCK)
        -: 3128:
        1: 3129:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3130:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3131:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3132:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3133:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3134:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3135:
        1: 3136:      tname = 'bessel_y1_double'
        1: 3137:      erri = ER
        -: 3138:
      257: 3139:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 3140:          call random_number(B(i))
call    0 returned 100%
      257: 3141:          B(i) = B(i) * W + S
        -: 3142:      enddo
        -: 3143:
        -: 3144:!dvm$ actual(B)
        -: 3145:!dvm$ region
        -: 3146:!dvm$ parallel (i) on A(i)
      257: 3147:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3148:          A(i) = bessel_y1(B(i))
        -: 3149:      enddo
        -: 3150:!dvm$ end region
        -: 3151:!dvm$ get_actual(A)
        -: 3152:
        -: 3153:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3154:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3155:          if (abs(bessel_y1(B(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3156:               erri = min(erri, i)
        -: 3157:          endif
        -: 3158:      enddo
        -: 3159:
        1: 3160:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3161:          call ansyes(tname)
call    0 returned 100%
        -: 3162:      else
    #####: 3163:          call ansno(tname)
call    0 never executed
        -: 3164:      endif 
        -: 3165:      
       1*: 3166:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3167:
        -: 3168:C -------------------------------------------------
        -: 3169:
function bessel_yn1_ called 1 returned 100% blocks executed 80%
        1: 3170:      subroutine bessel_yn1
        -: 3171:      integer, parameter :: N = 256, ER = N + 1, W1 = 10, S1 = 0, W2 = 
        -: 3172:     &19, S2 = 1
        -: 3173:      real, parameter :: EPS = 1e-6
        -: 3174:      character*24 tname
        -: 3175:      real A(N), C(N)
        -: 3176:      integer B(N)
        -: 3177:      integer erri, i, asize, clock
        1: 3178:      integer, allocatable :: seed(:)
        -: 3179:
        -: 3180:!dvm$ distribute A(BLOCK)
        -: 3181:
        1: 3182:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3183:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3184:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3185:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3186:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3187:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3188:
        1: 3189:      tname = 'bessel_yn_float'
        1: 3190:      erri = ER
        -: 3191:
      257: 3192:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 3193:          call random_number(tmp)
call    0 returned 100%
      256: 3194:          call random_number(C(i))
call    0 returned 100%
      256: 3195:          B(i) = int(tmp * W1 + S1)
      257: 3196:          C(i) = C(i) * W2 + S2 + B(i)
        -: 3197:      enddo
        -: 3198:
        -: 3199:!dvm$ actual(B, C)
        -: 3200:!dvm$ region
        -: 3201:!dvm$ parallel (i) on A(i)
      257: 3202:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3203:          A(i) = bessel_yn(B(i), C(i))
        -: 3204:      enddo
        -: 3205:!dvm$ end region
        -: 3206:!dvm$ get_actual(A)
        -: 3207:
        -: 3208:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3209:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3210:          if (abs(bessel_yn(B(i), C(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3211:               erri = min(erri, i)
        -: 3212:          endif
        -: 3213:      enddo
        -: 3214:
        1: 3215:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3216:          call ansyes(tname)
call    0 returned 100%
        -: 3217:      else
    #####: 3218:          call ansno(tname)
call    0 never executed
        -: 3219:      endif 
        -: 3220:      
       1*: 3221:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3222:
        -: 3223:C -------------------------------------------------
        -: 3224:
function bessel_yn2_ called 1 returned 100% blocks executed 80%
        1: 3225:      subroutine bessel_yn2
        -: 3226:      integer, parameter :: N = 256, ER = N + 1, W1 = 10, S1 = 0, W2 = 
        -: 3227:     &19, S2 = 1
        -: 3228:      real*8, parameter :: EPS = 1d-12
        -: 3229:      character*24 tname
        -: 3230:      real*8 A(N), C(N)
        -: 3231:      integer B(N)
        -: 3232:      integer erri, i, asize, clock
        1: 3233:      integer, allocatable :: seed(:)
        -: 3234:
        -: 3235:!dvm$ distribute A(BLOCK)
        -: 3236:
        1: 3237:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3238:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3239:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3240:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3241:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3242:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3243:
        1: 3244:      tname = 'bessel_yn_double'
        1: 3245:      erri = ER
        -: 3246:
      257: 3247:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 3248:          call random_number(tmp)
call    0 returned 100%
      256: 3249:          call random_number(C(i))
call    0 returned 100%
      256: 3250:          B(i) = int(tmp * W1 + S1)
      257: 3251:          C(i) = C(i) * W2 + S2 + B(i)
        -: 3252:      enddo
        -: 3253:
        -: 3254:!dvm$ actual(B, C)
        -: 3255:!dvm$ region
        -: 3256:!dvm$ parallel (i) on A(i)
      257: 3257:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3258:          A(i) = bessel_yn(B(i), C(i))
        -: 3259:      enddo
        -: 3260:!dvm$ end region
        -: 3261:!dvm$ get_actual(A)
        -: 3262:
        -: 3263:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3264:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3265:          if (abs(bessel_yn(B(i), C(i)) - A(i)) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3266:               erri = min(erri, i)
        -: 3267:          endif
        -: 3268:      enddo
        -: 3269:
        1: 3270:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3271:          call ansyes(tname)
call    0 returned 100%
        -: 3272:      else
    #####: 3273:          call ansno(tname)
call    0 never executed
        -: 3274:      endif 
        -: 3275:      
       1*: 3276:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3277:
        -: 3278:C -------------------------------------------------
        -: 3279:
function btest1_ called 1 returned 100% blocks executed 81%
        1: 3280:      subroutine btest1
        -: 3281:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3282:      character*24 tname
        -: 3283:      logical*1 A(N)
        -: 3284:      integer*1 B(N), C(N)
        -: 3285:      integer erri, i, asize, clock
        1: 3286:      integer, allocatable :: seed(:)
        -: 3287:      real tmp
        -: 3288:
        -: 3289:!dvm$ distribute A(BLOCK)
        -: 3290:
        1: 3291:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3292:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3293:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3294:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3295:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3296:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3297:
        1: 3298:      tname = 'btest_char'
        1: 3299:      erri = ER
        -: 3300:
      257: 3301:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3302:          call random_number(tmp)
call    0 returned 100%
      256: 3303:          B(i) = int(tmp * W + S)
      256: 3304:          call random_number(tmp)
call    0 returned 100%
      257: 3305:          C(i) = int(tmp * bit_size(C(i)))
        -: 3306:      enddo
        -: 3307:
        -: 3308:!dvm$ actual(B, C)
        -: 3309:!dvm$ region
        -: 3310:!dvm$ parallel (i) on A(i)
      257: 3311:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3312:          A(i) = btest(B(i), C(i))
        -: 3313:      enddo
        -: 3314:!dvm$ end region
        -: 3315:!dvm$ get_actual(A)
        -: 3316:
        -: 3317:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3318:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3319:          if (btest(B(i), C(i)) .neqv. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3320:               erri = min(erri, i)
        -: 3321:          endif
        -: 3322:      enddo
        -: 3323:
        1: 3324:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3325:          call ansyes(tname)
call    0 returned 100%
        -: 3326:      else
    #####: 3327:          call ansno(tname)
call    0 never executed
        -: 3328:      endif 
        -: 3329:      
       1*: 3330:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3331:
        -: 3332:C -------------------------------------------------
        -: 3333:
function btest2_ called 1 returned 100% blocks executed 81%
        1: 3334:      subroutine btest2
        -: 3335:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3336:      character*24 tname
        -: 3337:      logical*2 A(N)
        -: 3338:      integer*2 B(N), C(N)
        -: 3339:      integer erri, i, asize, clock
        1: 3340:      integer, allocatable :: seed(:)
        -: 3341:      real tmp
        -: 3342:
        -: 3343:!dvm$ distribute A(BLOCK)
        -: 3344:
        1: 3345:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3346:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3347:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3348:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3349:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3350:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3351:
        1: 3352:      tname = 'btest_short'
        1: 3353:      erri = ER
        -: 3354:
      257: 3355:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3356:          call random_number(tmp)
call    0 returned 100%
      256: 3357:          B(i) = int(tmp * W + S)
      256: 3358:          call random_number(tmp)
call    0 returned 100%
      257: 3359:          C(i) = int(tmp * bit_size(C(i)))
        -: 3360:      enddo
        -: 3361:
        -: 3362:!dvm$ actual(B, C)
        -: 3363:!dvm$ region
        -: 3364:!dvm$ parallel (i) on A(i)
      257: 3365:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3366:          A(i) = btest(B(i), C(i))
        -: 3367:      enddo
        -: 3368:!dvm$ end region
        -: 3369:!dvm$ get_actual(A)
        -: 3370:
        -: 3371:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3372:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3373:          if (btest(B(i), C(i)) .neqv. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3374:               erri = min(erri, i)
        -: 3375:          endif
        -: 3376:      enddo
        -: 3377:
        1: 3378:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3379:          call ansyes(tname)
call    0 returned 100%
        -: 3380:      else
    #####: 3381:          call ansno(tname)
call    0 never executed
        -: 3382:      endif 
        -: 3383:      
       1*: 3384:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3385:
        -: 3386:C -------------------------------------------------
        -: 3387:
function btest3_ called 1 returned 100% blocks executed 81%
        1: 3388:      subroutine btest3
        -: 3389:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3390:      character*24 tname
        -: 3391:      logical*4 A(N)
        -: 3392:      integer*4 B(N), C(N)
        -: 3393:      integer erri, i, asize, clock
        1: 3394:      integer, allocatable :: seed(:)
        -: 3395:      real tmp
        -: 3396:
        -: 3397:!dvm$ distribute A(BLOCK)
        -: 3398:
        1: 3399:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3400:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3401:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3402:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3403:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3404:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3405:
        1: 3406:      tname = 'btest_long'
        1: 3407:      erri = ER
        -: 3408:
      257: 3409:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3410:          call random_number(tmp)
call    0 returned 100%
      256: 3411:          B(i) = int(tmp * W + S)
      256: 3412:          call random_number(tmp)
call    0 returned 100%
      257: 3413:          C(i) = int(tmp * bit_size(C(i)))
        -: 3414:      enddo
        -: 3415:
        -: 3416:!dvm$ actual(B, C)
        -: 3417:!dvm$ region
        -: 3418:!dvm$ parallel (i) on A(i)
      257: 3419:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3420:          A(i) = btest(B(i), C(i))
        -: 3421:      enddo
        -: 3422:!dvm$ end region
        -: 3423:!dvm$ get_actual(A)
        -: 3424:
        -: 3425:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3426:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3427:          if (btest(B(i), C(i)) .neqv. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3428:              erri = min(erri, i)
        -: 3429:          endif
        -: 3430:      enddo
        -: 3431:
        1: 3432:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3433:          call ansyes(tname)
call    0 returned 100%
        -: 3434:      else
    #####: 3435:          call ansno(tname)
call    0 never executed
        -: 3436:      endif 
        -: 3437:      
       1*: 3438:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3439:
        -: 3440:C -------------------------------------------------
        -: 3441:
function btest4_ called 1 returned 100% blocks executed 81%
        1: 3442:      subroutine btest4
        -: 3443:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3444:      character*24 tname
        -: 3445:      logical*8 A(N)
        -: 3446:      integer*8 B(N), C(N)
        -: 3447:      integer erri, i, asize, clock
        1: 3448:      integer, allocatable :: seed(:)
        -: 3449:      real tmp
        -: 3450:
        -: 3451:!dvm$ distribute A(BLOCK)
        -: 3452:
        1: 3453:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3454:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3455:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3456:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3457:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3458:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3459:
        1: 3460:      tname = 'btest_longlong'
        1: 3461:      erri = ER
        -: 3462:
      257: 3463:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3464:          call random_number(tmp)
call    0 returned 100%
      256: 3465:          B(i) = int(tmp * W + S)
      256: 3466:          call random_number(tmp)
call    0 returned 100%
      257: 3467:          C(i) = int(tmp * bit_size(C(i)))
        -: 3468:      enddo
        -: 3469:
        -: 3470:!dvm$ actual(B, C)
        -: 3471:!dvm$ region
        -: 3472:!dvm$ parallel (i) on A(i)
      257: 3473:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3474:          A(i) = btest(B(i), C(i))
        -: 3475:      enddo
        -: 3476:!dvm$ end region
        -: 3477:!dvm$ get_actual(A)
        -: 3478:
        -: 3479:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3480:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3481:          if (btest(B(i), C(i)) .neqv. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3482:              erri = min(erri, i)
        -: 3483:          endif
        -: 3484:      enddo
        -: 3485:
        1: 3486:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3487:          call ansyes(tname)
call    0 returned 100%
        -: 3488:      else
    #####: 3489:          call ansno(tname)
call    0 never executed
        -: 3490:      endif 
        -: 3491:      
       1*: 3492:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3493:
        -: 3494:C -------------------------------------------------
        -: 3495:
function cmplx1_ called 1 returned 100% blocks executed 80%
        1: 3496:      subroutine cmplx1
        -: 3497:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3498:      character*24 tname
        -: 3499:      complex A(N)
        -: 3500:      integer B(N)
        -: 3501:      integer erri, i, asize, clock
        1: 3502:      integer, allocatable :: seed(:)
        -: 3503:      real tmp
        -: 3504:
        -: 3505:!dvm$ distribute A(BLOCK)
        -: 3506:
        1: 3507:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3508:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3509:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3510:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3511:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3512:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3513:
        1: 3514:      tname = 'cmplx_long'
        1: 3515:      erri = ER
        -: 3516:
      257: 3517:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3518:          call random_number(tmp)
call    0 returned 100%
      257: 3519:          B(i) = int(tmp * W + S)
        -: 3520:      enddo
        -: 3521:
        -: 3522:!dvm$ actual(B)
        -: 3523:!dvm$ region
        -: 3524:!dvm$ parallel (i) on A(i)
      257: 3525:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3526:          A(i) = cmplx(B(i))
        -: 3527:      enddo
        -: 3528:!dvm$ end region
        -: 3529:!dvm$ get_actual(A)
        -: 3530:
        -: 3531:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3532:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3533:          if (cmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3534:               erri = min(erri, i)
        -: 3535:          endif
        -: 3536:      enddo
        -: 3537:
        1: 3538:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3539:          call ansyes(tname)
call    0 returned 100%
        -: 3540:      else
    #####: 3541:          call ansno(tname)
call    0 never executed
        -: 3542:      endif 
        -: 3543:      
       1*: 3544:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3545:
        -: 3546:C -------------------------------------------------
        -: 3547:
function cmplx2_ called 1 returned 100% blocks executed 80%
        1: 3548:      subroutine cmplx2
        -: 3549:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3550:      character*24 tname
        -: 3551:      complex A(N)
        -: 3552:      real B(N)
        -: 3553:      integer erri, i, asize, clock
        1: 3554:      integer, allocatable :: seed(:)
        -: 3555:
        -: 3556:!dvm$ distribute A(BLOCK)
        -: 3557:
        1: 3558:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3559:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3560:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3561:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3562:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3563:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3564:
        1: 3565:      tname = 'cmplx_float'
        1: 3566:      erri = ER
        -: 3567:
      257: 3568:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3569:          call random_number(B(i))
call    0 returned 100%
      257: 3570:          B(i) = B(i) * W + S
        -: 3571:      enddo
        -: 3572:
        -: 3573:!dvm$ actual(B)
        -: 3574:!dvm$ region
        -: 3575:!dvm$ parallel (i) on A(i)
      257: 3576:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3577:          A(i) = cmplx(B(i))
        -: 3578:      enddo
        -: 3579:!dvm$ end region
        -: 3580:!dvm$ get_actual(A)
        -: 3581:
        -: 3582:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3583:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3584:          if (cmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3585:               erri = min(erri, i)
        -: 3586:          endif
        -: 3587:      enddo
        -: 3588:
        1: 3589:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3590:          call ansyes(tname)
call    0 returned 100%
        -: 3591:      else
    #####: 3592:          call ansno(tname)
call    0 never executed
        -: 3593:      endif 
        -: 3594:      
       1*: 3595:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3596:
        -: 3597:C -------------------------------------------------
        -: 3598:
function cmplx3_ called 1 returned 100% blocks executed 80%
        1: 3599:      subroutine cmplx3
        -: 3600:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3601:      character*24 tname
        -: 3602:      complex A(N)
        -: 3603:      real*8 B(N)
        -: 3604:      integer erri, i, asize, clock
        1: 3605:      integer, allocatable :: seed(:)
        -: 3606:
        -: 3607:!dvm$ distribute A(BLOCK)
        -: 3608:
        1: 3609:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3610:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3611:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3612:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3613:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3614:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3615:
        1: 3616:      tname = 'cmplx_double'
        1: 3617:      erri = ER
        -: 3618:
      257: 3619:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3620:          call random_number(B(i))
call    0 returned 100%
      257: 3621:          B(i) = B(i) * W + S
        -: 3622:      enddo
        -: 3623:
        -: 3624:!dvm$ actual(B)
        -: 3625:!dvm$ region
        -: 3626:!dvm$ parallel (i) on A(i)
      257: 3627:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3628:          A(i) = cmplx(B(i))
        -: 3629:      enddo
        -: 3630:!dvm$ end region
        -: 3631:!dvm$ get_actual(A)
        -: 3632:
        -: 3633:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3634:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3635:          if (cmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3636:               erri = min(erri, i)
        -: 3637:          endif
        -: 3638:      enddo
        -: 3639:
        1: 3640:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3641:          call ansyes(tname)
call    0 returned 100%
        -: 3642:      else
    #####: 3643:          call ansno(tname)
call    0 never executed
        -: 3644:      endif 
        -: 3645:      
       1*: 3646:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3647:
        -: 3648:C -------------------------------------------------
        -: 3649:
function cmplx4_ called 1 returned 100% blocks executed 81%
        1: 3650:      subroutine cmplx4
        -: 3651:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3652:      character*24 tname
        -: 3653:      complex A(N), B(N)
        -: 3654:      integer erri, i, asize, clock
        1: 3655:      integer, allocatable :: seed(:)
        -: 3656:      real x, y
        -: 3657:
        -: 3658:!dvm$ distribute A(BLOCK)
        -: 3659:
        1: 3660:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3661:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3662:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3663:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3664:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3665:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3666:
        1: 3667:      tname = 'cmplx_complexf'
        1: 3668:      erri = ER
        -: 3669:
      257: 3670:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3671:          call random_number(x)
call    0 returned 100%
      256: 3672:          call random_number(y)
call    0 returned 100%
      257: 3673:          B(i) = cmplx(x * W + S, y * W + S)
        -: 3674:      enddo
        -: 3675:
        -: 3676:!dvm$ actual(B)
        -: 3677:!dvm$ region
        -: 3678:!dvm$ parallel (i) on A(i)
      257: 3679:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3680:          A(i) = cmplx(B(i))
        -: 3681:      enddo
        -: 3682:!dvm$ end region
        -: 3683:!dvm$ get_actual(A)
        -: 3684:
        -: 3685:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3686:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3687:          if (cmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3688:               erri = min(erri, i)
        -: 3689:          endif
        -: 3690:      enddo
        -: 3691:
        1: 3692:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3693:          call ansyes(tname)
call    0 returned 100%
        -: 3694:      else
    #####: 3695:          call ansno(tname)
call    0 never executed
        -: 3696:      endif 
        -: 3697:      
       1*: 3698:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3699:
        -: 3700:C -------------------------------------------------
        -: 3701:
function cmplx5_ called 1 returned 100% blocks executed 81%
        1: 3702:      subroutine cmplx5
        -: 3703:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3704:      character*24 tname
        -: 3705:      complex A(N)
        -: 3706:      double complex B(N)
        -: 3707:      integer erri, i, asize, clock
        1: 3708:      integer, allocatable :: seed(:)
        -: 3709:      real x, y
        -: 3710:
        -: 3711:!dvm$ distribute A(BLOCK)
        -: 3712:
        1: 3713:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3714:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3715:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3716:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3717:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3718:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3719:
        1: 3720:      tname = 'cmplx_complexd'
        1: 3721:      erri = ER
        -: 3722:
      257: 3723:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3724:          call random_number(x)
call    0 returned 100%
      256: 3725:          call random_number(y)
call    0 returned 100%
      257: 3726:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 3727:      enddo
        -: 3728:
        -: 3729:!dvm$ actual(B)
        -: 3730:!dvm$ region
        -: 3731:!dvm$ parallel (i) on A(i)
      257: 3732:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3733:          A(i) = cmplx(B(i))
        -: 3734:      enddo
        -: 3735:!dvm$ end region
        -: 3736:!dvm$ get_actual(A)
        -: 3737:
        -: 3738:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3739:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3740:          if (cmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3741:               erri = min(erri, i)
        -: 3742:          endif
        -: 3743:      enddo
        -: 3744:
        1: 3745:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3746:          call ansyes(tname)
call    0 returned 100%
        -: 3747:      else
    #####: 3748:          call ansno(tname)
call    0 never executed
        -: 3749:      endif 
        -: 3750:      
       1*: 3751:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3752:
        -: 3753:C -------------------------------------------------
        -: 3754:
function cmplx6_ called 1 returned 100% blocks executed 81%
        1: 3755:      subroutine cmplx6
        -: 3756:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3757:      character*24 tname
        -: 3758:      complex A(N)
        -: 3759:      integer B(N), C(N)
        -: 3760:      integer erri, i, asize, clock
        1: 3761:      integer, allocatable :: seed(:)
        -: 3762:      real tmp
        -: 3763:
        -: 3764:!dvm$ distribute A(BLOCK)
        -: 3765:
        1: 3766:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3767:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3768:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3769:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3770:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3771:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3772:
        1: 3773:      tname = 'cmplx_long_long'
        1: 3774:      erri = ER
        -: 3775:
      257: 3776:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3777:          call random_number(tmp)
call    0 returned 100%
      256: 3778:          B(i) = int(tmp * W + S)
      256: 3779:          call random_number(tmp)
call    0 returned 100%
      257: 3780:          C(i) = int(tmp * W + S)
        -: 3781:      enddo
        -: 3782:
        -: 3783:!dvm$ actual(B, C)
        -: 3784:!dvm$ region
        -: 3785:!dvm$ parallel (i) on A(i)
      257: 3786:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3787:          A(i) = cmplx(B(i), C(i))
        -: 3788:      enddo
        -: 3789:!dvm$ end region
        -: 3790:!dvm$ get_actual(A)
        -: 3791:
        -: 3792:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3793:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3794:          if (cmplx(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3795:               erri = min(erri, i)
        -: 3796:          endif
        -: 3797:      enddo
        -: 3798:
        1: 3799:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3800:          call ansyes(tname)
call    0 returned 100%
        -: 3801:      else
    #####: 3802:          call ansno(tname)
call    0 never executed
        -: 3803:      endif 
        -: 3804:      
       1*: 3805:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3806:
        -: 3807:C -------------------------------------------------
        -: 3808:
function cmplx7_ called 1 returned 100% blocks executed 81%
        1: 3809:      subroutine cmplx7
        -: 3810:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3811:      character*24 tname
        -: 3812:      complex A(N)
        -: 3813:      real B(N), C(N)
        -: 3814:      integer erri, i, asize, clock
        1: 3815:      integer, allocatable :: seed(:)
        -: 3816:
        -: 3817:!dvm$ distribute A(BLOCK)
        -: 3818:
        1: 3819:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3820:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3821:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3822:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3823:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3824:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3825:
        1: 3826:      tname = 'cmplx_float_float'
        1: 3827:      erri = ER
        -: 3828:
      257: 3829:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3830:          call random_number(B(i))
call    0 returned 100%
      256: 3831:          call random_number(C(i))
call    0 returned 100%
      256: 3832:          B(i) = B(i) * W + S
      257: 3833:          C(i) = C(i) * W + S
        -: 3834:      enddo
        -: 3835:
        -: 3836:!dvm$ actual(B, C)
        -: 3837:!dvm$ region
        -: 3838:!dvm$ parallel (i) on A(i)
      257: 3839:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3840:          A(i) = cmplx(B(i), C(i))
        -: 3841:      enddo
        -: 3842:!dvm$ end region
        -: 3843:!dvm$ get_actual(A)
        -: 3844:
        -: 3845:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3846:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3847:          if (cmplx(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3848:               erri = min(erri, i)
        -: 3849:          endif
        -: 3850:      enddo
        -: 3851:
        1: 3852:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3853:          call ansyes(tname)
call    0 returned 100%
        -: 3854:      else
    #####: 3855:          call ansno(tname)
call    0 never executed
        -: 3856:      endif 
        -: 3857:      
       1*: 3858:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3859:
        -: 3860:C -------------------------------------------------
        -: 3861:
function cmplx8_ called 1 returned 100% blocks executed 81%
        1: 3862:      subroutine cmplx8
        -: 3863:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3864:      character*24 tname
        -: 3865:      complex A(N)
        -: 3866:      real*8 B(N), C(N)
        -: 3867:      integer erri, i, asize, clock
        1: 3868:      integer, allocatable :: seed(:)
        -: 3869:
        -: 3870:!dvm$ distribute A(BLOCK)
        -: 3871:
        1: 3872:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3873:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3874:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3875:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3876:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3877:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3878:
        1: 3879:      tname = 'cmplx_double_double'
        1: 3880:      erri = ER
        -: 3881:
      257: 3882:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3883:          call random_number(B(i))
call    0 returned 100%
      256: 3884:          call random_number(C(i))
call    0 returned 100%
      256: 3885:          B(i) = B(i) * W + S
      257: 3886:          C(i) = C(i) * W + S
        -: 3887:      enddo
        -: 3888:
        -: 3889:!dvm$ actual(B, C)
        -: 3890:!dvm$ region
        -: 3891:!dvm$ parallel (i) on A(i)
      257: 3892:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3893:          A(i) = cmplx(B(i), C(i))
        -: 3894:      enddo
        -: 3895:!dvm$ end region
        -: 3896:!dvm$ get_actual(A)
        -: 3897:
        -: 3898:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3899:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3900:          if (cmplx(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3901:               erri = min(erri, i)
        -: 3902:          endif
        -: 3903:      enddo
        -: 3904:
        1: 3905:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3906:          call ansyes(tname)
call    0 returned 100%
        -: 3907:      else
    #####: 3908:          call ansno(tname)
call    0 never executed
        -: 3909:      endif 
        -: 3910:      
       1*: 3911:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3912:
        -: 3913:C -------------------------------------------------
        -: 3914:
function cmplx9_ called 1 returned 100% blocks executed 81%
        1: 3915:      subroutine cmplx9
        -: 3916:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3917:      character*24 tname
        -: 3918:      complex A(N)
        -: 3919:      integer B(N), C(N)
        -: 3920:      integer erri, i, asize, clock
        1: 3921:      integer, allocatable :: seed(:)
        -: 3922:      real tmp
        -: 3923:
        -: 3924:!dvm$ distribute A(BLOCK)
        -: 3925:
        1: 3926:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3927:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3928:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3929:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3930:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3931:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3932:
        1: 3933:      tname = 'cmplx_long_long_4'
        1: 3934:      erri = ER
        -: 3935:
      257: 3936:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3937:          call random_number(tmp)
call    0 returned 100%
      256: 3938:          B(i) = int(tmp * W + S)
      256: 3939:          call random_number(tmp)
call    0 returned 100%
      257: 3940:          C(i) = int(tmp * W + S)
        -: 3941:      enddo
        -: 3942:
        -: 3943:!dvm$ actual(B, C)
        -: 3944:!dvm$ region
        -: 3945:!dvm$ parallel (i) on A(i)
      257: 3946:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 3947:          A(i) = cmplx(B(i), C(i), 4)
        -: 3948:      enddo
        -: 3949:!dvm$ end region
        -: 3950:!dvm$ get_actual(A)
        -: 3951:
        -: 3952:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 3953:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 3954:          if (cmplx(B(i), C(i), 4) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 3955:               erri = min(erri, i)
        -: 3956:          endif
        -: 3957:      enddo
        -: 3958:
        1: 3959:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 3960:          call ansyes(tname)
call    0 returned 100%
        -: 3961:      else
    #####: 3962:          call ansno(tname)
call    0 never executed
        -: 3963:      endif 
        -: 3964:      
       1*: 3965:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 3966:
        -: 3967:C -------------------------------------------------
        -: 3968:
function cmplx10_ called 1 returned 100% blocks executed 81%
        1: 3969:      subroutine cmplx10
        -: 3970:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 3971:      character*24 tname
        -: 3972:      complex A(N)
        -: 3973:      real B(N), C(N)
        -: 3974:      integer erri, i, asize, clock
        1: 3975:      integer, allocatable :: seed(:)
        -: 3976:
        -: 3977:!dvm$ distribute A(BLOCK)
        -: 3978:
        1: 3979:      call random_seed(size = asize)
call    0 returned 100%
       3*: 3980:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 3981:      call system_clock(count = clock)
call    0 returned 100%
      34*: 3982:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 3983:      call random_seed(put = seed)
call    0 returned 100%
       1*: 3984:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 3985:
        1: 3986:      tname = 'cmplx_float_float_4'
        1: 3987:      erri = ER
        -: 3988:
      257: 3989:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 3990:          call random_number(B(i))
call    0 returned 100%
      256: 3991:          call random_number(C(i))
call    0 returned 100%
      256: 3992:          B(i) = B(i) * W + S
      257: 3993:          C(i) = C(i) * W + S
        -: 3994:      enddo
        -: 3995:
        -: 3996:!dvm$ actual(B, C)
        -: 3997:!dvm$ region
        -: 3998:!dvm$ parallel (i) on A(i)
      257: 3999:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4000:          A(i) = cmplx(B(i), C(i), 4)
        -: 4001:      enddo
        -: 4002:!dvm$ end region
        -: 4003:!dvm$ get_actual(A)
        -: 4004:
        -: 4005:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4006:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4007:          if (cmplx(B(i), C(i), 4) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4008:               erri = min(erri, i)
        -: 4009:          endif
        -: 4010:      enddo
        -: 4011:
        1: 4012:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4013:          call ansyes(tname)
call    0 returned 100%
        -: 4014:      else
    #####: 4015:          call ansno(tname)
call    0 never executed
        -: 4016:      endif 
        -: 4017:      
       1*: 4018:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4019:
        -: 4020:C -------------------------------------------------
        -: 4021:
function cmplx11_ called 1 returned 100% blocks executed 81%
        1: 4022:      subroutine cmplx11
        -: 4023:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4024:      character*24 tname
        -: 4025:      complex A(N)
        -: 4026:      real*8 B(N), C(N)
        -: 4027:      integer erri, i, asize, clock
        1: 4028:      integer, allocatable :: seed(:)
        -: 4029:
        -: 4030:!dvm$ distribute A(BLOCK)
        -: 4031:
        1: 4032:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4033:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4034:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4035:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4036:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4037:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4038:
        1: 4039:      tname = 'cmplx_double_double_4'
        1: 4040:      erri = ER
        -: 4041:
      257: 4042:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4043:          call random_number(B(i))
call    0 returned 100%
      256: 4044:          call random_number(C(i))
call    0 returned 100%
      256: 4045:          B(i) = B(i) * W + S
      257: 4046:          C(i) = C(i) * W + S
        -: 4047:      enddo
        -: 4048:
        -: 4049:!dvm$ actual(B, C)
        -: 4050:!dvm$ region
        -: 4051:!dvm$ parallel (i) on A(i)
      257: 4052:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4053:          A(i) = cmplx(B(i), C(i), 4)
        -: 4054:      enddo
        -: 4055:!dvm$ end region
        -: 4056:!dvm$ get_actual(A)
        -: 4057:
        -: 4058:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4059:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4060:          if (cmplx(B(i), C(i), 4) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4061:               erri = min(erri, i)
        -: 4062:          endif
        -: 4063:      enddo
        -: 4064:
        1: 4065:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4066:          call ansyes(tname)
call    0 returned 100%
        -: 4067:      else
    #####: 4068:          call ansno(tname)
call    0 never executed
        -: 4069:      endif 
        -: 4070:      
       1*: 4071:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4072:
        -: 4073:C -------------------------------------------------
        -: 4074:
function cmplx12_ called 1 returned 100% blocks executed 81%
        1: 4075:      subroutine cmplx12
        -: 4076:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4077:      character*24 tname
        -: 4078:      double complex A(N)
        -: 4079:      integer B(N), C(N)
        -: 4080:      integer erri, i, asize, clock
        1: 4081:      integer, allocatable :: seed(:)
        -: 4082:      real tmp
        -: 4083:
        -: 4084:!dvm$ distribute A(BLOCK)
        -: 4085:
        1: 4086:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4087:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4088:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4089:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4090:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4091:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4092:
        1: 4093:      tname = 'cmplx_long_long_8'
        1: 4094:      erri = ER
        -: 4095:
      257: 4096:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4097:          call random_number(tmp)
call    0 returned 100%
      256: 4098:          B(i) = int(tmp * W + S)
      256: 4099:          call random_number(tmp)
call    0 returned 100%
      257: 4100:          C(i) = int(tmp * W + S)
        -: 4101:      enddo
        -: 4102:
        -: 4103:!dvm$ actual(B, C)
        -: 4104:!dvm$ region
        -: 4105:!dvm$ parallel (i) on A(i)
      257: 4106:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4107:          A(i) = cmplx(B(i), C(i), 8)
        -: 4108:      enddo
        -: 4109:!dvm$ end region
        -: 4110:!dvm$ get_actual(A)
        -: 4111:
        -: 4112:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4113:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4114:          if (cmplx(B(i), C(i), 8) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4115:               erri = min(erri, i)
        -: 4116:          endif
        -: 4117:      enddo
        -: 4118:
        1: 4119:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4120:          call ansyes(tname)
call    0 returned 100%
        -: 4121:      else
    #####: 4122:          call ansno(tname)
call    0 never executed
        -: 4123:      endif 
        -: 4124:      
       1*: 4125:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4126:
        -: 4127:C -------------------------------------------------
        -: 4128:
function cmplx13_ called 1 returned 100% blocks executed 81%
        1: 4129:      subroutine cmplx13
        -: 4130:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4131:      character*24 tname
        -: 4132:      double complex A(N)
        -: 4133:      real B(N), C(N)
        -: 4134:      integer erri, i, asize, clock
        1: 4135:      integer, allocatable :: seed(:)
        -: 4136:
        -: 4137:!dvm$ distribute A(BLOCK)
        -: 4138:
        1: 4139:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4140:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4141:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4142:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4143:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4144:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4145:
        1: 4146:      tname = 'cmplx_float_float_8'
        1: 4147:      erri = ER
        -: 4148:
      257: 4149:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4150:          call random_number(B(i))
call    0 returned 100%
      256: 4151:          call random_number(C(i))
call    0 returned 100%
      256: 4152:          B(i) = B(i) * W + S
      257: 4153:          C(i) = C(i) * W + S
        -: 4154:      enddo
        -: 4155:
        -: 4156:!dvm$ actual(B, C)
        -: 4157:!dvm$ region
        -: 4158:!dvm$ parallel (i) on A(i)
      257: 4159:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4160:          A(i) = cmplx(B(i), C(i), 8)
        -: 4161:      enddo
        -: 4162:!dvm$ end region
        -: 4163:!dvm$ get_actual(A)
        -: 4164:
        -: 4165:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4166:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4167:          if (cmplx(B(i), C(i), 8) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4168:               erri = min(erri, i)
        -: 4169:          endif
        -: 4170:      enddo
        -: 4171:
        1: 4172:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4173:          call ansyes(tname)
call    0 returned 100%
        -: 4174:      else
    #####: 4175:          call ansno(tname)
call    0 never executed
        -: 4176:      endif 
        -: 4177:      
       1*: 4178:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4179:
        -: 4180:C -------------------------------------------------
        -: 4181:
function cmplx14_ called 1 returned 100% blocks executed 81%
        1: 4182:      subroutine cmplx14
        -: 4183:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4184:      character*24 tname
        -: 4185:      double complex A(N)
        -: 4186:      real*8 B(N), C(N)
        -: 4187:      integer erri, i, asize, clock
        1: 4188:      integer, allocatable :: seed(:)
        -: 4189:
        -: 4190:!dvm$ distribute A(BLOCK)
        -: 4191:
        1: 4192:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4193:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4194:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4195:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4196:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4197:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4198:
        1: 4199:      tname = 'cmplx_double_double_8'
        1: 4200:      erri = ER
        -: 4201:
      257: 4202:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4203:          call random_number(B(i))
call    0 returned 100%
      256: 4204:          call random_number(C(i))
call    0 returned 100%
      256: 4205:          B(i) = B(i) * W + S
      257: 4206:          C(i) = C(i) * W + S
        -: 4207:      enddo
        -: 4208:
        -: 4209:!dvm$ actual(B, C)
        -: 4210:!dvm$ region
        -: 4211:!dvm$ parallel (i) on A(i)
      257: 4212:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4213:          A(i) = cmplx(B(i), C(i), 8)
        -: 4214:      enddo
        -: 4215:!dvm$ end region
        -: 4216:!dvm$ get_actual(A)
        -: 4217:
        -: 4218:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4219:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4220:          if (cmplx(B(i), C(i), 8) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4221:               erri = min(erri, i)
        -: 4222:          endif
        -: 4223:      enddo
        -: 4224:
        1: 4225:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4226:          call ansyes(tname)
call    0 returned 100%
        -: 4227:      else
    #####: 4228:          call ansno(tname)
call    0 never executed
        -: 4229:      endif 
        -: 4230:      
       1*: 4231:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4232:
        -: 4233:C -------------------------------------------------
        -: 4234:
function cmplx15_ called 1 returned 100% blocks executed 80%
        1: 4235:      subroutine cmplx15
        -: 4236:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4237:      character*24 tname
        -: 4238:      double complex A(N)
        -: 4239:      integer B(N)
        -: 4240:      integer erri, i, asize, clock
        1: 4241:      integer, allocatable :: seed(:)
        -: 4242:      real tmp
        -: 4243:
        -: 4244:!dvm$ distribute A(BLOCK)
        -: 4245:
        1: 4246:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4247:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4248:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4249:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4250:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4251:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4252:
        1: 4253:      tname = 'dcmplx_long'
        1: 4254:      erri = ER
        -: 4255:
      257: 4256:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4257:          call random_number(tmp)
call    0 returned 100%
      257: 4258:          B(i) = int(tmp * W + S)
        -: 4259:      enddo
        -: 4260:
        -: 4261:!dvm$ actual(B)
        -: 4262:!dvm$ region
        -: 4263:!dvm$ parallel (i) on A(i)
      257: 4264:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4265:          A(i) = dcmplx(B(i))
        -: 4266:      enddo
        -: 4267:!dvm$ end region
        -: 4268:!dvm$ get_actual(A)
        -: 4269:
        -: 4270:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4271:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4272:          if (dcmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4273:               erri = min(erri, i)
        -: 4274:          endif
        -: 4275:      enddo
        -: 4276:
        1: 4277:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4278:          call ansyes(tname)
call    0 returned 100%
        -: 4279:      else
    #####: 4280:          call ansno(tname)
call    0 never executed
        -: 4281:      endif 
        -: 4282:      
       1*: 4283:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4284:
        -: 4285:C -------------------------------------------------
        -: 4286:
function cmplx16_ called 1 returned 100% blocks executed 80%
        1: 4287:      subroutine cmplx16
        -: 4288:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4289:      character*24 tname
        -: 4290:      double complex A(N)
        -: 4291:      real B(N)
        -: 4292:      integer erri, i, asize, clock
        1: 4293:      integer, allocatable :: seed(:)
        -: 4294:
        -: 4295:!dvm$ distribute A(BLOCK)
        -: 4296:
        1: 4297:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4298:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4299:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4300:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4301:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4302:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4303:
        1: 4304:      tname = 'dcmplx_float'
        1: 4305:      erri = ER
        -: 4306:
      257: 4307:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4308:          call random_number(B(i))
call    0 returned 100%
      257: 4309:          B(i) = B(i) * W + S
        -: 4310:      enddo
        -: 4311:
        -: 4312:!dvm$ actual(B)
        -: 4313:!dvm$ region
        -: 4314:!dvm$ parallel (i) on A(i)
      257: 4315:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4316:          A(i) = dcmplx(B(i))
        -: 4317:      enddo
        -: 4318:!dvm$ end region
        -: 4319:!dvm$ get_actual(A)
        -: 4320:
        -: 4321:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4322:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4323:          if (dcmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4324:               erri = min(erri, i)
        -: 4325:          endif
        -: 4326:      enddo
        -: 4327:
        1: 4328:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4329:          call ansyes(tname)
call    0 returned 100%
        -: 4330:      else
    #####: 4331:          call ansno(tname)
call    0 never executed
        -: 4332:      endif 
        -: 4333:      
       1*: 4334:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4335:
        -: 4336:C -------------------------------------------------
        -: 4337:
function cmplx17_ called 1 returned 100% blocks executed 80%
        1: 4338:      subroutine cmplx17
        -: 4339:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4340:      character*24 tname
        -: 4341:      double complex A(N)
        -: 4342:      real*8 B(N)
        -: 4343:      integer erri, i, asize, clock
        1: 4344:      integer, allocatable :: seed(:)
        -: 4345:
        -: 4346:!dvm$ distribute A(BLOCK)
        -: 4347:
        1: 4348:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4349:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4350:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4351:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4352:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4353:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4354:
        1: 4355:      tname = 'dcmplx_double'
        1: 4356:      erri = ER
        -: 4357:
      257: 4358:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4359:          call random_number(B(i))
call    0 returned 100%
      257: 4360:          B(i) = B(i) * W + S
        -: 4361:      enddo
        -: 4362:
        -: 4363:!dvm$ actual(B)
        -: 4364:!dvm$ region
        -: 4365:!dvm$ parallel (i) on A(i)
      257: 4366:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4367:          A(i) = dcmplx(B(i))
        -: 4368:      enddo
        -: 4369:!dvm$ end region
        -: 4370:!dvm$ get_actual(A)
        -: 4371:
        -: 4372:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4373:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4374:          if (dcmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4375:               erri = min(erri, i)
        -: 4376:          endif
        -: 4377:      enddo
        -: 4378:
        1: 4379:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4380:          call ansyes(tname)
call    0 returned 100%
        -: 4381:      else
    #####: 4382:          call ansno(tname)
call    0 never executed
        -: 4383:      endif 
        -: 4384:      
       1*: 4385:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4386:
        -: 4387:C -------------------------------------------------
        -: 4388:
function cmplx18_ called 1 returned 100% blocks executed 81%
        1: 4389:      subroutine cmplx18
        -: 4390:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4391:      character*24 tname
        -: 4392:      double complex A(N)
        -: 4393:      complex B(N)
        -: 4394:      integer erri, i, asize, clock
        1: 4395:      integer, allocatable :: seed(:)
        -: 4396:      real x, y
        -: 4397:
        -: 4398:!dvm$ distribute A(BLOCK)
        -: 4399:
        1: 4400:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4401:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4402:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4403:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4404:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4405:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4406:
        1: 4407:      tname = 'dcmplx_complexf'
        1: 4408:      erri = ER
        -: 4409:
      257: 4410:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4411:          call random_number(x)
call    0 returned 100%
      256: 4412:          call random_number(y)
call    0 returned 100%
      257: 4413:          B(i) = cmplx(x * W + S, y * W + S)
        -: 4414:      enddo
        -: 4415:
        -: 4416:!dvm$ actual(B)
        -: 4417:!dvm$ region
        -: 4418:!dvm$ parallel (i) on A(i)
      257: 4419:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4420:          A(i) = dcmplx(B(i))
        -: 4421:      enddo
        -: 4422:!dvm$ end region
        -: 4423:!dvm$ get_actual(A)
        -: 4424:
        -: 4425:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4426:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4427:          if (dcmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4428:               erri = min(erri, i)
        -: 4429:          endif
        -: 4430:      enddo
        -: 4431:
        1: 4432:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4433:          call ansyes(tname)
call    0 returned 100%
        -: 4434:      else
    #####: 4435:          call ansno(tname)
call    0 never executed
        -: 4436:      endif 
        -: 4437:      
       1*: 4438:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4439:
        -: 4440:C -------------------------------------------------
        -: 4441:
function cmplx19_ called 1 returned 100% blocks executed 81%
        1: 4442:      subroutine cmplx19
        -: 4443:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4444:      character*24 tname
        -: 4445:      double complex A(N), B(N)
        -: 4446:      integer erri, i, asize, clock
        1: 4447:      integer, allocatable :: seed(:)
        -: 4448:      real x, y
        -: 4449:
        -: 4450:!dvm$ distribute A(BLOCK)
        -: 4451:
        1: 4452:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4453:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4454:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4455:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4456:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4457:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4458:
        1: 4459:      tname = 'dcmplx_complexd'
        1: 4460:      erri = ER
        -: 4461:
      257: 4462:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4463:          call random_number(x)
call    0 returned 100%
      256: 4464:          call random_number(y)
call    0 returned 100%
      257: 4465:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 4466:      enddo
        -: 4467:
        -: 4468:!dvm$ actual(B)
        -: 4469:!dvm$ region
        -: 4470:!dvm$ parallel (i) on A(i)
      257: 4471:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4472:          A(i) = dcmplx(B(i))
        -: 4473:      enddo
        -: 4474:!dvm$ end region
        -: 4475:!dvm$ get_actual(A)
        -: 4476:
        -: 4477:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4478:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4479:          if (dcmplx(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4480:               erri = min(erri, i)
        -: 4481:          endif
        -: 4482:      enddo
        -: 4483:
        1: 4484:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4485:          call ansyes(tname)
call    0 returned 100%
        -: 4486:      else
    #####: 4487:          call ansno(tname)
call    0 never executed
        -: 4488:      endif 
        -: 4489:      
       1*: 4490:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4491:
        -: 4492:C -------------------------------------------------
        -: 4493:
function cmplx20_ called 1 returned 100% blocks executed 81%
        1: 4494:      subroutine cmplx20
        -: 4495:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4496:      character*24 tname
        -: 4497:      double complex A(N)
        -: 4498:      integer B(N), C(N)
        -: 4499:      integer erri, i, asize, clock
        1: 4500:      integer, allocatable :: seed(:)
        -: 4501:      real tmp
        -: 4502:
        -: 4503:!dvm$ distribute A(BLOCK)
        -: 4504:
        1: 4505:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4506:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4507:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4508:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4509:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4510:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4511:
        1: 4512:      tname = 'dcmplx_long_long'
        1: 4513:      erri = ER
        -: 4514:
      257: 4515:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4516:          call random_number(tmp)
call    0 returned 100%
      256: 4517:          B(i) = int(tmp * W + S)
      256: 4518:          call random_number(tmp)
call    0 returned 100%
      257: 4519:          C(i) = int(tmp * W + S)
        -: 4520:      enddo
        -: 4521:
        -: 4522:!dvm$ actual(B, C)
        -: 4523:!dvm$ region
        -: 4524:!dvm$ parallel (i) on A(i)
      257: 4525:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4526:          A(i) = dcmplx(B(i), C(i))
        -: 4527:      enddo
        -: 4528:!dvm$ end region
        -: 4529:!dvm$ get_actual(A)
        -: 4530:
        -: 4531:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4532:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4533:          if (dcmplx(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4534:               erri = min(erri, i)
        -: 4535:          endif
        -: 4536:      enddo
        -: 4537:
        1: 4538:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4539:          call ansyes(tname)
call    0 returned 100%
        -: 4540:      else
    #####: 4541:          call ansno(tname)
call    0 never executed
        -: 4542:      endif 
        -: 4543:      
       1*: 4544:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4545:
        -: 4546:C -------------------------------------------------
        -: 4547:
function cmplx21_ called 1 returned 100% blocks executed 81%
        1: 4548:      subroutine cmplx21
        -: 4549:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4550:      character*24 tname
        -: 4551:      double complex A(N)
        -: 4552:      real B(N), C(N)
        -: 4553:      integer erri, i, asize, clock
        1: 4554:      integer, allocatable :: seed(:)
        -: 4555:
        -: 4556:!dvm$ distribute A(BLOCK)
        -: 4557:
        1: 4558:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4559:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4560:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4561:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4562:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4563:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4564:
        1: 4565:      tname = 'dcmplx_float_float'
        1: 4566:      erri = ER
        -: 4567:
      257: 4568:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4569:          call random_number(B(i))
call    0 returned 100%
      256: 4570:          call random_number(C(i))
call    0 returned 100%
      256: 4571:          B(i) = B(i) * W + S
      257: 4572:          C(i) = C(i) * W + S
        -: 4573:      enddo
        -: 4574:
        -: 4575:!dvm$ actual(B, C)
        -: 4576:!dvm$ region
        -: 4577:!dvm$ parallel (i) on A(i)
      257: 4578:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4579:          A(i) = dcmplx(B(i), C(i))
        -: 4580:      enddo
        -: 4581:!dvm$ end region
        -: 4582:!dvm$ get_actual(A)
        -: 4583:
        -: 4584:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4585:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4586:          if (dcmplx(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4587:               erri = min(erri, i)
        -: 4588:          endif
        -: 4589:      enddo
        -: 4590:
        1: 4591:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4592:          call ansyes(tname)
call    0 returned 100%
        -: 4593:      else
    #####: 4594:          call ansno(tname)
call    0 never executed
        -: 4595:      endif 
        -: 4596:      
       1*: 4597:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4598:
        -: 4599:C -------------------------------------------------
        -: 4600:
function cmplx22_ called 1 returned 100% blocks executed 81%
        1: 4601:      subroutine cmplx22
        -: 4602:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4603:      character*24 tname
        -: 4604:      double complex A(N)
        -: 4605:      real*8 B(N), C(N)
        -: 4606:      integer erri, i, asize, clock
        1: 4607:      integer, allocatable :: seed(:)
        -: 4608:
        -: 4609:!dvm$ distribute A(BLOCK)
        -: 4610:
        1: 4611:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4612:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4613:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4614:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4615:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4616:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4617:
        1: 4618:      tname = 'dcmplx_double_double'
        1: 4619:      erri = ER
        -: 4620:
      257: 4621:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4622:          call random_number(B(i))
call    0 returned 100%
      256: 4623:          call random_number(C(i))
call    0 returned 100%
      256: 4624:          B(i) = B(i) * W + S
      257: 4625:          C(i) = C(i) * W + S
        -: 4626:      enddo
        -: 4627:
        -: 4628:!dvm$ actual(B, C)
        -: 4629:!dvm$ region
        -: 4630:!dvm$ parallel (i) on A(i)
      257: 4631:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4632:          A(i) = dcmplx(B(i), C(i))
        -: 4633:      enddo
        -: 4634:!dvm$ end region
        -: 4635:!dvm$ get_actual(A)
        -: 4636:
        -: 4637:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4638:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4639:          if (dcmplx(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4640:               erri = min(erri, i)
        -: 4641:          endif
        -: 4642:      enddo
        -: 4643:
        1: 4644:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4645:          call ansyes(tname)
call    0 returned 100%
        -: 4646:      else
    #####: 4647:          call ansno(tname)
call    0 never executed
        -: 4648:      endif 
        -: 4649:      
       1*: 4650:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4651:
        -: 4652:C -------------------------------------------------
        -: 4653:
function conjg1_ called 1 returned 100% blocks executed 81%
        1: 4654:      subroutine conjg1
        -: 4655:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4656:      character*24 tname
        -: 4657:      complex A(N), B(N)
        -: 4658:      integer erri, i, asize, clock
        1: 4659:      integer, allocatable :: seed(:)
        -: 4660:      real x, y
        -: 4661:
        -: 4662:!dvm$ distribute A(BLOCK)
        -: 4663:
        1: 4664:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4665:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4666:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4667:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4668:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4669:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4670:
        1: 4671:      tname = 'conjg_complexf'
        1: 4672:      erri = ER
        -: 4673:
      257: 4674:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4675:          call random_number(x)
call    0 returned 100%
      256: 4676:          call random_number(y)
call    0 returned 100%
      257: 4677:          B(i) = cmplx(x * W + S, y * W + S)
        -: 4678:      enddo
        -: 4679:
        -: 4680:!dvm$ actual(B)
        -: 4681:!dvm$ region
        -: 4682:!dvm$ parallel (i) on A(i)
      257: 4683:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4684:          A(i) = conjg(B(i))
        -: 4685:      enddo
        -: 4686:!dvm$ end region
        -: 4687:!dvm$ get_actual(A)
        -: 4688:
        -: 4689:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4690:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4691:          if (conjg(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4692:               erri = min(erri, i)
        -: 4693:          endif
        -: 4694:      enddo
        -: 4695:
        1: 4696:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4697:          call ansyes(tname)
call    0 returned 100%
        -: 4698:      else
    #####: 4699:          call ansno(tname)
call    0 never executed
        -: 4700:      endif 
        -: 4701:      
       1*: 4702:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4703:
        -: 4704:C -------------------------------------------------
        -: 4705:
function conjg2_ called 1 returned 100% blocks executed 81%
        1: 4706:      subroutine conjg2
        -: 4707:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4708:      character*24 tname
        -: 4709:      double complex A(N), B(N)
        -: 4710:      integer erri, i, asize, clock
        1: 4711:      integer, allocatable :: seed(:)
        -: 4712:      real x, y
        -: 4713:
        -: 4714:!dvm$ distribute A(BLOCK)
        -: 4715:
        1: 4716:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4717:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4718:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4719:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4720:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4721:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4722:
        1: 4723:      tname = 'conjg_complexd'
        1: 4724:      erri = ER
        -: 4725:
      257: 4726:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4727:          call random_number(x)
call    0 returned 100%
      256: 4728:          call random_number(y)
call    0 returned 100%
      257: 4729:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 4730:      enddo
        -: 4731:
        -: 4732:!dvm$ actual(B)
        -: 4733:!dvm$ region
        -: 4734:!dvm$ parallel (i) on A(i)
      257: 4735:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4736:          A(i) = conjg(B(i))
        -: 4737:      enddo
        -: 4738:!dvm$ end region
        -: 4739:!dvm$ get_actual(A)
        -: 4740:
        -: 4741:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4742:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4743:          if (conjg(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4744:               erri = min(erri, i)
        -: 4745:          endif
        -: 4746:      enddo
        -: 4747:
        1: 4748:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4749:          call ansyes(tname)
call    0 returned 100%
        -: 4750:      else
    #####: 4751:          call ansno(tname)
call    0 never executed
        -: 4752:      endif 
        -: 4753:      
       1*: 4754:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4755:
        -: 4756:C -------------------------------------------------
        -: 4757:
function conjg3_ called 1 returned 100% blocks executed 81%
        1: 4758:      subroutine conjg3
        -: 4759:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4760:      character*24 tname
        -: 4761:      double complex A(N), B(N)
        -: 4762:      integer erri, i, asize, clock
        1: 4763:      integer, allocatable :: seed(:)
        -: 4764:      real x, y
        -: 4765:
        -: 4766:!dvm$ distribute A(BLOCK)
        -: 4767:
        1: 4768:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4769:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4770:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4771:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4772:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4773:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4774:
        1: 4775:      tname = 'dconjg_complexd'
        1: 4776:      erri = ER
        -: 4777:
      257: 4778:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 4779:          call random_number(x)
call    0 returned 100%
      256: 4780:          call random_number(y)
call    0 returned 100%
      257: 4781:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 4782:      enddo
        -: 4783:
        -: 4784:!dvm$ actual(B)
        -: 4785:!dvm$ region
        -: 4786:!dvm$ parallel (i) on A(i)
      257: 4787:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 4788:          A(i) = dconjg(B(i))
        -: 4789:      enddo
        -: 4790:!dvm$ end region
        -: 4791:!dvm$ get_actual(A)
        -: 4792:
        -: 4793:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 4794:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4795:          if (dconjg(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4796:               erri = min(erri, i)
        -: 4797:          endif
        -: 4798:      enddo
        -: 4799:
        1: 4800:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4801:          call ansyes(tname)
call    0 returned 100%
        -: 4802:      else
    #####: 4803:          call ansno(tname)
call    0 never executed
        -: 4804:      endif 
        -: 4805:      
       1*: 4806:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4807:
        -: 4808:C -------------------------------------------------
        -: 4809:
function cos1_ called 1 returned 100% blocks executed 79%
        1: 4810:      subroutine cos1
        -: 4811:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4812:      real, parameter :: EPS = 1e-6
        -: 4813:      character*24 tname
        -: 4814:      real A(N), B(N)
        -: 4815:      integer erri, i, asize, clock
        1: 4816:      integer, allocatable :: seed(:)
        -: 4817:      real tmp
        -: 4818:
        -: 4819:!dvm$ distribute A(BLOCK)
        -: 4820:
        1: 4821:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4822:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4823:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4824:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4825:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4826:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4827:
        1: 4828:      tname = 'cos_float'
        1: 4829:      erri = ER
        -: 4830:
      257: 4831:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 4832:          call random_number(B(i))
call    0 returned 100%
      257: 4833:          B(i) = B(i) * W + S
        -: 4834:      enddo
        -: 4835:
        -: 4836:!dvm$ actual(B)	  
        -: 4837:!dvm$ region
        -: 4838:!dvm$ parallel (i) on A(i)
      257: 4839:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4840:          A(i) = cos(B(i))
        -: 4841:      enddo
        -: 4842:!dvm$ end region
        -: 4843:!dvm$ get_actual(A)
        -: 4844:
        -: 4845:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 4846:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 4847:          tmp = cos(B(i))
      257: 4848:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4849:               erri = min(erri, i)
        -: 4850:          endif
        -: 4851:      enddo
        -: 4852:
        1: 4853:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4854:          call ansyes(tname)
call    0 returned 100%
        -: 4855:      else
    #####: 4856:          call ansno(tname)
call    0 never executed
        -: 4857:      endif 
        -: 4858:      
       1*: 4859:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4860:
        -: 4861:C -------------------------------------------------
        -: 4862:
function cos2_ called 1 returned 100% blocks executed 79%
        1: 4863:      subroutine cos2
        -: 4864:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 4865:      real*8, parameter :: EPS = 1d-15
        -: 4866:      character*24 tname
        -: 4867:      real*8 A(N), B(N)
        -: 4868:      integer erri, i, asize, clock
        1: 4869:      integer, allocatable :: seed(:)
        -: 4870:      real*8 tmp
        -: 4871:
        -: 4872:!dvm$ distribute A(BLOCK)
        -: 4873:
        1: 4874:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4875:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4876:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4877:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4878:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4879:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4880:
        1: 4881:      tname = 'cos_double'
        1: 4882:      erri = ER
        -: 4883:
      257: 4884:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 4885:          call random_number(B(i))
call    0 returned 100%
      257: 4886:          B(i) = B(i) * W + S
        -: 4887:      enddo
        -: 4888:
        -: 4889:!dvm$ actual(B)
        -: 4890:!dvm$ region
        -: 4891:!dvm$ parallel (i) on A(i)
      257: 4892:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4893:          A(i) = cos(B(i))
        -: 4894:      enddo
        -: 4895:!dvm$ end region
        -: 4896:!dvm$ get_actual(A)
        -: 4897:
        -: 4898:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 4899:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 4900:          tmp = cos(B(i))
      257: 4901:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4902:               erri = min(erri, i)
        -: 4903:          endif
        -: 4904:      enddo
        -: 4905:
        1: 4906:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4907:          call ansyes(tname)
call    0 returned 100%
        -: 4908:      else
    #####: 4909:          call ansno(tname)
call    0 never executed
        -: 4910:      endif 
        -: 4911:      
       1*: 4912:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4913:
        -: 4914:C -------------------------------------------------
        -: 4915:
function cos3_ called 1 returned 100% blocks executed 80%
        1: 4916:      subroutine cos3
        -: 4917:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 4918:      real*8, parameter :: EPS = 1e-6
        -: 4919:      character*24 tname
        -: 4920:      complex A(N), B(N)
        -: 4921:      real x, y
        -: 4922:      complex tmp
        -: 4923:      integer erri, i, asize, clock
        1: 4924:      integer, allocatable :: seed(:)
        -: 4925:
        -: 4926:!dvm$ distribute A(BLOCK)
        -: 4927:
        1: 4928:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4929:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4930:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4931:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4932:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4933:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4934:
        1: 4935:      tname = 'cos_complexf'
        1: 4936:      erri = ER
        -: 4937:
      257: 4938:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 4939:          call random_number(x)
call    0 returned 100%
      256: 4940:          call random_number(y)
call    0 returned 100%
      257: 4941:          B(i) = cmplx(x * W + S, y * W + S)
        -: 4942:      enddo
        -: 4943:
        -: 4944:!dvm$ actual(B)
        -: 4945:!dvm$ region
        -: 4946:!dvm$ parallel (i) on A(i)
      257: 4947:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 4948:          A(i) = cos(B(i))
        -: 4949:      enddo
        -: 4950:!dvm$ end region
        -: 4951:!dvm$ get_actual(A)
        -: 4952:
        -: 4953:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 4954:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 4955:          tmp = cos(B(i))
      257: 4956:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 4957:               erri = min(erri, i)
        -: 4958:          endif
        -: 4959:      enddo
        -: 4960:
        1: 4961:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 4962:          call ansyes(tname)
call    0 returned 100%
        -: 4963:      else
    #####: 4964:          call ansno(tname)
call    0 never executed
        -: 4965:      endif 
        -: 4966:      
       1*: 4967:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 4968:
        -: 4969:C -------------------------------------------------
        -: 4970:
function cos4_ called 1 returned 100% blocks executed 80%
        1: 4971:      subroutine cos4
        -: 4972:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 4973:      real*8, parameter :: EPS = 1d-15
        -: 4974:      character*24 tname
        -: 4975:      double complex A(N), B(N)
        -: 4976:      real*8 x, y
        -: 4977:      integer erri, i, asize, clock
        1: 4978:      integer, allocatable :: seed(:)
        -: 4979:      double complex tmp
        -: 4980:
        -: 4981:!dvm$ distribute A(BLOCK)
        -: 4982:
        1: 4983:      call random_seed(size = asize)
call    0 returned 100%
       3*: 4984:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 4985:      call system_clock(count = clock)
call    0 returned 100%
      34*: 4986:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 4987:      call random_seed(put = seed)
call    0 returned 100%
       1*: 4988:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 4989:
        1: 4990:      tname = 'cos_complexd'
        1: 4991:      erri = ER
        -: 4992:
      257: 4993:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 4994:          call random_number(x)
call    0 returned 100%
      256: 4995:          call random_number(y)
call    0 returned 100%
      257: 4996:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 4997:      enddo
        -: 4998:
        -: 4999:!dvm$ actual(B)
        -: 5000:!dvm$ region
        -: 5001:!dvm$ parallel (i) on A(i)
      257: 5002:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5003:          A(i) = cos(B(i))
        -: 5004:      enddo
        -: 5005:!dvm$ end region
        -: 5006:!dvm$ get_actual(A)
        -: 5007:
        -: 5008:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 5009:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5010:          tmp = cos(B(i))
      257: 5011:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5012:               erri = min(erri, i)
        -: 5013:          endif
        -: 5014:      enddo
        -: 5015:
        1: 5016:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5017:          call ansyes(tname)
call    0 returned 100%
        -: 5018:      else
    #####: 5019:          call ansno(tname)
call    0 never executed
        -: 5020:      endif 
        -: 5021:      
       1*: 5022:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5023:
        -: 5024:C -------------------------------------------------
        -: 5025:
function cos5_ called 1 returned 100% blocks executed 79%
        1: 5026:      subroutine cos5
        -: 5027:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5028:      real*8, parameter :: EPS = 1d-15
        -: 5029:      character*24 tname
        -: 5030:      real*8 A(N), B(N)
        -: 5031:      integer erri, i, asize, clock
        1: 5032:      integer, allocatable :: seed(:)
        -: 5033:      real*8 tmp
        -: 5034:
        -: 5035:!dvm$ distribute A(BLOCK)
        -: 5036:
        1: 5037:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5038:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5039:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5040:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5041:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5042:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5043:
        1: 5044:      tname = 'dcos_double'
        1: 5045:      erri = ER
        -: 5046:
      257: 5047:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5048:          call random_number(B(i))
call    0 returned 100%
      257: 5049:          B(i) = B(i) * W + S
        -: 5050:      enddo
        -: 5051:
        -: 5052:!dvm$ actual(B)
        -: 5053:!dvm$ region
        -: 5054:!dvm$ parallel (i) on A(i)
      257: 5055:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5056:          A(i) = dcos(B(i))
        -: 5057:      enddo
        -: 5058:!dvm$ end region
        -: 5059:!dvm$ get_actual(A)
        -: 5060:
        -: 5061:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 5062:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5063:          tmp = dcos(B(i))
      257: 5064:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5065:               erri = min(erri, i)
        -: 5066:          endif
        -: 5067:      enddo
        -: 5068:
        1: 5069:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5070:          call ansyes(tname)
call    0 returned 100%
        -: 5071:      else
    #####: 5072:          call ansno(tname)
call    0 never executed
        -: 5073:      endif 
        -: 5074:      
       1*: 5075:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5076:
        -: 5077:C -------------------------------------------------
        -: 5078:
function cos6_ called 1 returned 100% blocks executed 80%
        1: 5079:      subroutine cos6
        -: 5080:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 5081:      real, parameter :: EPS = 1e-6
        -: 5082:      character*24 tname
        -: 5083:      complex A(N), B(N)
        -: 5084:      real x, y
        -: 5085:      integer erri, i, asize, clock
        1: 5086:      integer, allocatable :: seed(:)
        -: 5087:      complex tmp
        -: 5088:
        -: 5089:!dvm$ distribute A(BLOCK)
        -: 5090:
        1: 5091:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5092:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5093:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5094:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5095:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5096:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5097:
        1: 5098:      tname = 'ccos_complexf'
        1: 5099:      erri = ER
        -: 5100:
      257: 5101:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5102:          call random_number(x)
call    0 returned 100%
      256: 5103:          call random_number(y)
call    0 returned 100%
      257: 5104:          B(i) = cmplx(x * W + S, y * W + S)
        -: 5105:      enddo
        -: 5106:
        -: 5107:!dvm$ actual(B)
        -: 5108:!dvm$ region
        -: 5109:!dvm$ parallel (i) on A(i)
      257: 5110:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5111:          A(i) = ccos(B(i))
        -: 5112:      enddo
        -: 5113:!dvm$ end region
        -: 5114:!dvm$ get_actual(A)
        -: 5115:
        -: 5116:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 5117:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5118:          tmp = ccos(B(i))
      257: 5119:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5120:               erri = min(erri, i)
        -: 5121:          endif
        -: 5122:      enddo
        -: 5123:
        1: 5124:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5125:          call ansyes(tname)
call    0 returned 100%
        -: 5126:      else
    #####: 5127:          call ansno(tname)
call    0 never executed
        -: 5128:      endif 
        -: 5129:      
       1*: 5130:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5131:
        -: 5132:C -------------------------------------------------
        -: 5133:
function cos7_ called 1 returned 100% blocks executed 80%
        1: 5134:      subroutine cos7
        -: 5135:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 5136:      real*8, parameter :: EPS = 1d-15
        -: 5137:      character*24 tname
        -: 5138:      double complex A(N), B(N)
        -: 5139:      real*8 x, y
        -: 5140:      integer erri, i, asize, clock
        1: 5141:      integer, allocatable :: seed(:)
        -: 5142:      double complex tmp
        -: 5143:
        -: 5144:!dvm$ distribute A(BLOCK)
        -: 5145:
        1: 5146:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5147:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5148:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5149:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5150:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5151:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5152:
        1: 5153:      tname = 'cdcos_complexd'
        1: 5154:      erri = ER
        -: 5155:
      257: 5156:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5157:          call random_number(x)
call    0 returned 100%
      256: 5158:          call random_number(y)
call    0 returned 100%
      257: 5159:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 5160:      enddo
        -: 5161:
        -: 5162:!dvm$ actual(B)
        -: 5163:!dvm$ region
        -: 5164:!dvm$ parallel (i) on A(i)
      257: 5165:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5166:          A(i) = cdcos(B(i))
        -: 5167:      enddo
        -: 5168:!dvm$ end region
        -: 5169:!dvm$ get_actual(A)
        -: 5170:
        -: 5171:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 5172:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5173:          tmp = cdcos(B(i))
      257: 5174:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5175:              erri = min(erri, i)
        -: 5176:          endif
        -: 5177:      enddo
        -: 5178:
        1: 5179:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5180:          call ansyes(tname)
call    0 returned 100%
        -: 5181:      else
    #####: 5182:          call ansno(tname)
call    0 never executed
        -: 5183:      endif 
        -: 5184:      
       1*: 5185:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5186:
        -: 5187:C -------------------------------------------------
        -: 5188:
function cos8_ called 1 returned 100% blocks executed 80%
        1: 5189:      subroutine cos8
        -: 5190:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 5191:      real*8, parameter :: EPS = 1d-15
        -: 5192:      character*24 tname
        -: 5193:      double complex A(N), B(N)
        -: 5194:      real*8 x, y
        -: 5195:      integer erri, i, asize, clock
        1: 5196:      integer, allocatable :: seed(:)
        -: 5197:      double complex tmp
        -: 5198:
        -: 5199:!dvm$ distribute A(BLOCK)
        -: 5200:
        1: 5201:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5202:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5203:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5204:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5205:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5206:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5207:
        1: 5208:      tname = 'zcos_complexd'
        1: 5209:      erri = ER
        -: 5210:
      257: 5211:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5212:          call random_number(x)
call    0 returned 100%
      256: 5213:          call random_number(y)
call    0 returned 100%
      257: 5214:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 5215:      enddo
        -: 5216:
        -: 5217:!dvm$ actual(B)
        -: 5218:!dvm$ region
        -: 5219:!dvm$ parallel (i) on A(i)
      257: 5220:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5221:          A(i) = zcos(B(i))
        -: 5222:      enddo
        -: 5223:!dvm$ end region
        -: 5224:!dvm$ get_actual(A)
        -: 5225:
        -: 5226:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 5227:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5228:          tmp = zcos(B(i))
      257: 5229:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5230:              erri = min(erri, i)
        -: 5231:          endif
        -: 5232:      enddo
        -: 5233:
        1: 5234:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5235:          call ansyes(tname)
call    0 returned 100%
        -: 5236:      else
    #####: 5237:          call ansno(tname)
call    0 never executed
        -: 5238:      endif 
        -: 5239:      
       1*: 5240:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5241:
        -: 5242:C -------------------------------------------------
        -: 5243:
function cosh1_ called 1 returned 100% blocks executed 79%
        1: 5244:      subroutine cosh1
        -: 5245:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 5246:      real, parameter :: EPS = 1e-6
        -: 5247:      character*24 tname
        -: 5248:      real A(N), B(N)
        -: 5249:      integer erri, i, asize, clock
        1: 5250:      integer, allocatable :: seed(:)
        -: 5251:      real tmp
        -: 5252:
        -: 5253:!dvm$ distribute A(BLOCK)
        -: 5254:
        1: 5255:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5256:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5257:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5258:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5259:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5260:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5261:
        1: 5262:      tname = 'cosh_float'
        1: 5263:      erri = ER
        -: 5264:
      257: 5265:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5266:          call random_number(B(i))
call    0 returned 100%
      257: 5267:          B(i) = B(i) * W + S
        -: 5268:      enddo
        -: 5269:
        -: 5270:!dvm$ actual(B)	  
        -: 5271:!dvm$ region
        -: 5272:!dvm$ parallel (i) on A(i)
      257: 5273:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5274:          A(i) = cosh(B(i))
        -: 5275:      enddo
        -: 5276:!dvm$ end region
        -: 5277:!dvm$ get_actual(A)
        -: 5278:
        -: 5279:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 5280:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5281:          tmp = cosh(B(i))
      257: 5282:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5283:              erri = min(erri, i)
        -: 5284:          endif
        -: 5285:      enddo
        -: 5286:
        1: 5287:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5288:          call ansyes(tname)
call    0 returned 100%
        -: 5289:      else
    #####: 5290:          call ansno(tname)
call    0 never executed
        -: 5291:      endif 
        -: 5292:      
       1*: 5293:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5294:
        -: 5295:C -------------------------------------------------
        -: 5296:
function cosh2_ called 1 returned 100% blocks executed 79%
        1: 5297:      subroutine cosh2
        -: 5298:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 5299:      real*8, parameter :: EPS = 1d-15
        -: 5300:      character*24 tname
        -: 5301:      real*8 A(N), B(N)
        -: 5302:      integer erri, i, asize, clock
        1: 5303:      integer, allocatable :: seed(:)
        -: 5304:      real*8 tmp
        -: 5305:
        -: 5306:!dvm$ distribute A(BLOCK)
        -: 5307:
        1: 5308:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5309:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5310:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5311:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5312:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5313:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5314:
        1: 5315:      tname = 'cosh_double'
        1: 5316:      erri = ER
        -: 5317:
      257: 5318:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5319:          call random_number(B(i))
call    0 returned 100%
      257: 5320:          B(i) = B(i) * W + S
        -: 5321:      enddo
        -: 5322:
        -: 5323:!dvm$ actual(B)
        -: 5324:!dvm$ region
        -: 5325:!dvm$ parallel (i) on A(i)
      257: 5326:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5327:          A(i) = cosh(B(i))
        -: 5328:      enddo
        -: 5329:!dvm$ end region
        -: 5330:!dvm$ get_actual(A)
        -: 5331:
        -: 5332:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 5333:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5334:          tmp = cosh(B(i))
      257: 5335:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5336:              erri = min(erri, i)
        -: 5337:          endif
        -: 5338:      enddo
        -: 5339:
        1: 5340:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5341:          call ansyes(tname)
call    0 returned 100%
        -: 5342:      else
    #####: 5343:          call ansno(tname)
call    0 never executed
        -: 5344:      endif 
        -: 5345:      
       1*: 5346:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5347:
        -: 5348:C -------------------------------------------------
        -: 5349:
function cosh3_ called 1 returned 100% blocks executed 79%
        1: 5350:      subroutine cosh3
        -: 5351:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 5352:      real*8, parameter :: EPS = 1d-15
        -: 5353:      character*24 tname
        -: 5354:      real*8 A(N), B(N)
        -: 5355:      integer erri, i, asize, clock
        1: 5356:      integer, allocatable :: seed(:)
        -: 5357:      real*8 tmp
        -: 5358:
        -: 5359:!dvm$ distribute A(BLOCK)
        -: 5360:
        1: 5361:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5362:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5363:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5364:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5365:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5366:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5367:
        1: 5368:      tname = 'dcosh_double'
        1: 5369:      erri = ER
        -: 5370:
      257: 5371:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5372:          call random_number(B(i))
call    0 returned 100%
      257: 5373:          B(i) = B(i) * W + S
        -: 5374:      enddo
        -: 5375:
        -: 5376:!dvm$ actual(B)
        -: 5377:!dvm$ region
        -: 5378:!dvm$ parallel (i) on A(i)
      257: 5379:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5380:          A(i) = dcosh(B(i))
        -: 5381:      enddo
        -: 5382:!dvm$ end region
        -: 5383:!dvm$ get_actual(A)
        -: 5384:
        -: 5385:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 5386:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 5387:          tmp = dcosh(B(i))
      257: 5388:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5389:              erri = min(erri, i)
        -: 5390:          endif
        -: 5391:      enddo
        -: 5392:
        1: 5393:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5394:          call ansyes(tname)
call    0 returned 100%
        -: 5395:      else
    #####: 5396:          call ansno(tname)
call    0 never executed
        -: 5397:      endif 
        -: 5398:      
       1*: 5399:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5400:
        -: 5401:C -------------------------------------------------
        -: 5402:
function dble1_ called 1 returned 100% blocks executed 80%
        1: 5403:      subroutine dble1
        -: 5404:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5405:      character*24 tname
        -: 5406:      real*8 A(N)
        -: 5407:      integer*1 B(N)
        -: 5408:      integer erri, i, asize, clock
        1: 5409:      integer, allocatable :: seed(:)
        -: 5410:      real tmp
        -: 5411:
        -: 5412:!dvm$ distribute A(BLOCK)
        -: 5413:
        1: 5414:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5415:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5416:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5417:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5418:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5419:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5420:
        1: 5421:      tname = 'dble_char'
        1: 5422:      erri = ER
        -: 5423:
      257: 5424:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5425:          call random_number(tmp)
call    0 returned 100%
      257: 5426:          B(i) = int(tmp * W + S)
        -: 5427:      enddo
        -: 5428:
        -: 5429:!dvm$ actual(B)
        -: 5430:!dvm$ region
        -: 5431:!dvm$ parallel (i) on A(i)
      257: 5432:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5433:          A(i) = dble(B(i))
        -: 5434:      enddo
        -: 5435:!dvm$ end region
        -: 5436:!dvm$ get_actual(A)
        -: 5437:
        -: 5438:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5439:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5440:          if (dble(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5441:              erri = min(erri, i)
        -: 5442:          endif
        -: 5443:      enddo
        -: 5444:
        1: 5445:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5446:          call ansyes(tname)
call    0 returned 100%
        -: 5447:      else
    #####: 5448:          call ansno(tname)
call    0 never executed
        -: 5449:      endif 
        -: 5450:      
       1*: 5451:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5452:
        -: 5453:C -------------------------------------------------
        -: 5454:
function dble2_ called 1 returned 100% blocks executed 80%
        1: 5455:      subroutine dble2
        -: 5456:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5457:      character*24 tname
        -: 5458:      real*8 A(N)
        -: 5459:      integer*2 B(N)
        -: 5460:      integer erri, i, asize, clock
        1: 5461:      integer, allocatable :: seed(:)
        -: 5462:      real tmp
        -: 5463:
        -: 5464:!dvm$ distribute A(BLOCK)
        -: 5465:
        1: 5466:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5467:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5468:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5469:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5470:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5471:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5472:
        1: 5473:      tname = 'dble_short'
        1: 5474:      erri = ER
        -: 5475:
      257: 5476:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5477:          call random_number(tmp)
call    0 returned 100%
      257: 5478:          B(i) = int(tmp * W + S)
        -: 5479:      enddo
        -: 5480:
        -: 5481:!dvm$ actual(B)
        -: 5482:!dvm$ region
        -: 5483:!dvm$ parallel (i) on A(i)
      257: 5484:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5485:          A(i) = dble(B(i))
        -: 5486:      enddo
        -: 5487:!dvm$ end region
        -: 5488:!dvm$ get_actual(A)
        -: 5489:
        -: 5490:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5491:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5492:          if (dble(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5493:              erri = min(erri, i)
        -: 5494:          endif
        -: 5495:      enddo
        -: 5496:
        1: 5497:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5498:          call ansyes(tname)
call    0 returned 100%
        -: 5499:      else
    #####: 5500:          call ansno(tname)
call    0 never executed
        -: 5501:      endif 
        -: 5502:      
       1*: 5503:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5504:
        -: 5505:C -------------------------------------------------
        -: 5506:
function dble3_ called 1 returned 100% blocks executed 80%
        1: 5507:      subroutine dble3
        -: 5508:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5509:      character*24 tname
        -: 5510:      real*8 A(N)
        -: 5511:      integer*4 B(N)
        -: 5512:      integer erri, i, asize, clock
        1: 5513:      integer, allocatable :: seed(:)
        -: 5514:      real tmp
        -: 5515:
        -: 5516:!dvm$ distribute A(BLOCK)
        -: 5517:
        1: 5518:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5519:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5520:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5521:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5522:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5523:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5524:
        1: 5525:      tname = 'dble_long'
        1: 5526:      erri = ER
        -: 5527:
      257: 5528:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5529:          call random_number(tmp)
call    0 returned 100%
      257: 5530:          B(i) = int(tmp * W + S)
        -: 5531:      enddo
        -: 5532:
        -: 5533:!dvm$ actual(B)
        -: 5534:!dvm$ region
        -: 5535:!dvm$ parallel (i) on A(i)
      257: 5536:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5537:          A(i) = dble(B(i))
        -: 5538:      enddo
        -: 5539:!dvm$ end region
        -: 5540:!dvm$ get_actual(A)
        -: 5541:
        -: 5542:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5543:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5544:          if (dble(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5545:              erri = min(erri, i)
        -: 5546:          endif
        -: 5547:      enddo
        -: 5548:
        1: 5549:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5550:          call ansyes(tname)
call    0 returned 100%
        -: 5551:      else
    #####: 5552:          call ansno(tname)
call    0 never executed
        -: 5553:      endif 
        -: 5554:      
       1*: 5555:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5556:
        -: 5557:C -------------------------------------------------
        -: 5558:
function dble4_ called 1 returned 100% blocks executed 80%
        1: 5559:      subroutine dble4
        -: 5560:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5561:      character*24 tname
        -: 5562:      real*8 A(N)
        -: 5563:      integer*8 B(N)
        -: 5564:      integer erri, i, asize, clock
        1: 5565:      integer, allocatable :: seed(:)
        -: 5566:      real tmp
        -: 5567:
        -: 5568:!dvm$ distribute A(BLOCK)
        -: 5569:
        1: 5570:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5571:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5572:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5573:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5574:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5575:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5576:
        1: 5577:      tname = 'dble_longlong'
        1: 5578:      erri = ER
        -: 5579:
      257: 5580:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5581:          call random_number(tmp)
call    0 returned 100%
      257: 5582:          B(i) = int(tmp * W + S)
        -: 5583:      enddo
        -: 5584:
        -: 5585:!dvm$ actual(B)
        -: 5586:!dvm$ region
        -: 5587:!dvm$ parallel (i) on A(i)
      257: 5588:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5589:          A(i) = dble(B(i))
        -: 5590:      enddo
        -: 5591:!dvm$ end region
        -: 5592:!dvm$ get_actual(A)
        -: 5593:
        -: 5594:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5595:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5596:          if (dble(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5597:              erri = min(erri, i)
        -: 5598:          endif
        -: 5599:      enddo
        -: 5600:
        1: 5601:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5602:          call ansyes(tname)
call    0 returned 100%
        -: 5603:      else
    #####: 5604:          call ansno(tname)
call    0 never executed
        -: 5605:      endif 
        -: 5606:      
       1*: 5607:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5608:
        -: 5609:C -------------------------------------------------
        -: 5610:
function dble5_ called 1 returned 100% blocks executed 80%
        1: 5611:      subroutine dble5
        -: 5612:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5613:      character*24 tname
        -: 5614:      real*8 A(N)
        -: 5615:      real B(N)
        -: 5616:      integer erri, i, asize, clock
        1: 5617:      integer, allocatable :: seed(:)
        -: 5618:
        -: 5619:!dvm$ distribute A(BLOCK)
        -: 5620:
        1: 5621:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5622:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5623:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5624:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5625:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5626:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5627:
        1: 5628:      tname = 'dble_float'
        1: 5629:      erri = ER
        -: 5630:
      257: 5631:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5632:          call random_number(B(i))
call    0 returned 100%
      257: 5633:          B(i) = B(i) * W + S
        -: 5634:      enddo
        -: 5635:
        -: 5636:!dvm$ actual(B)
        -: 5637:!dvm$ region
        -: 5638:!dvm$ parallel (i) on A(i)
      257: 5639:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5640:          A(i) = dble(B(i))
        -: 5641:      enddo
        -: 5642:!dvm$ end region
        -: 5643:!dvm$ get_actual(A)
        -: 5644:
        -: 5645:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5646:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5647:          if (dble(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5648:              erri = min(erri, i)
        -: 5649:          endif
        -: 5650:      enddo
        -: 5651:
        1: 5652:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5653:          call ansyes(tname)
call    0 returned 100%
        -: 5654:      else
    #####: 5655:          call ansno(tname)
call    0 never executed
        -: 5656:      endif 
        -: 5657:      
       1*: 5658:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5659:
        -: 5660:C -------------------------------------------------
        -: 5661:
function dble6_ called 1 returned 100% blocks executed 80%
        1: 5662:      subroutine dble6
        -: 5663:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5664:      character*24 tname
        -: 5665:      real*8 A(N), B(N)
        -: 5666:      integer erri, i, asize, clock
        1: 5667:      integer, allocatable :: seed(:)
        -: 5668:
        -: 5669:!dvm$ distribute A(BLOCK)
        -: 5670:
        1: 5671:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5672:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5673:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5674:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5675:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5676:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5677:
        1: 5678:      tname = 'dble_double'
        1: 5679:      erri = ER
        -: 5680:
      257: 5681:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5682:          call random_number(B(i))
call    0 returned 100%
      257: 5683:          B(i) = B(i) * W + S
        -: 5684:      enddo
        -: 5685:
        -: 5686:!dvm$ actual(B)
        -: 5687:!dvm$ region
        -: 5688:!dvm$ parallel (i) on A(i)
      257: 5689:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5690:          A(i) = dble(B(i))
        -: 5691:      enddo
        -: 5692:!dvm$ end region
        -: 5693:!dvm$ get_actual(A)
        -: 5694:
        -: 5695:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5696:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5697:          if (dble(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5698:              erri = min(erri, i)
        -: 5699:          endif
        -: 5700:      enddo
        -: 5701:
        1: 5702:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5703:          call ansyes(tname)
call    0 returned 100%
        -: 5704:      else
    #####: 5705:          call ansno(tname)
call    0 never executed
        -: 5706:      endif 
        -: 5707:      
       1*: 5708:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5709:
        -: 5710:C -------------------------------------------------
        -: 5711:
function dble7_ called 1 returned 100% blocks executed 81%
        1: 5712:      subroutine dble7
        -: 5713:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5714:      character*24 tname
        -: 5715:      real*8 A(N)
        -: 5716:      complex B(N)
        -: 5717:      integer erri, i, asize, clock
        1: 5718:      integer, allocatable :: seed(:)
        -: 5719:
        -: 5720:!dvm$ distribute A(BLOCK)
        -: 5721:
        1: 5722:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5723:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5724:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5725:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5726:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5727:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5728:
        1: 5729:      tname = 'dble_complexf'
        1: 5730:      erri = ER
        -: 5731:
      257: 5732:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5733:          call random_number(x)
call    0 returned 100%
      256: 5734:          call random_number(y)
call    0 returned 100%
      257: 5735:          B(i) = cmplx(x * W + S, y * W + S)
        -: 5736:      enddo
        -: 5737:
        -: 5738:!dvm$ actual(B)
        -: 5739:!dvm$ region
        -: 5740:!dvm$ parallel (i) on A(i)
      257: 5741:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5742:          A(i) = dble(B(i))
        -: 5743:      enddo
        -: 5744:!dvm$ end region
        -: 5745:!dvm$ get_actual(A)
        -: 5746:
        -: 5747:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5748:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5749:          if (dble(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5750:              erri = min(erri, i)
        -: 5751:          endif
        -: 5752:      enddo
        -: 5753:
        1: 5754:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5755:          call ansyes(tname)
call    0 returned 100%
        -: 5756:      else
    #####: 5757:          call ansno(tname)
call    0 never executed
        -: 5758:      endif 
        -: 5759:      
       1*: 5760:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5761:
        -: 5762:C -------------------------------------------------
        -: 5763:
function dble8_ called 1 returned 100% blocks executed 81%
        1: 5764:      subroutine dble8
        -: 5765:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5766:      character*24 tname
        -: 5767:      real*8 A(N)
        -: 5768:      double complex B(N)
        -: 5769:      integer erri, i, asize, clock
        1: 5770:      integer, allocatable :: seed(:)
        -: 5771:      real*8 x, y
        -: 5772:
        -: 5773:!dvm$ distribute A(BLOCK)
        -: 5774:
        1: 5775:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5776:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5777:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5778:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5779:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5780:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5781:
        1: 5782:      tname = 'dble_complexd'
        1: 5783:      erri = ER
        -: 5784:
      257: 5785:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5786:          call random_number(x)
call    0 returned 100%
      256: 5787:          call random_number(y)
call    0 returned 100%
      257: 5788:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 5789:      enddo
        -: 5790:
        -: 5791:!dvm$ actual(B)
        -: 5792:!dvm$ region
        -: 5793:!dvm$ parallel (i) on A(i)
      257: 5794:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5795:          A(i) = dble(B(i))
        -: 5796:      enddo
        -: 5797:!dvm$ end region
        -: 5798:!dvm$ get_actual(A)
        -: 5799:
        -: 5800:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5801:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5802:          if (dble(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5803:              erri = min(erri, i)
        -: 5804:          endif
        -: 5805:      enddo
        -: 5806:
        1: 5807:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5808:          call ansyes(tname)
call    0 returned 100%
        -: 5809:      else
    #####: 5810:          call ansno(tname)
call    0 never executed
        -: 5811:      endif 
        -: 5812:      
       1*: 5813:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5814:
        -: 5815:C -------------------------------------------------
        -: 5816:
function dfloat1_ called 1 returned 100% blocks executed 80%
        1: 5817:      subroutine dfloat1
        -: 5818:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5819:      character*24 tname
        -: 5820:      real*8 A(N)
        -: 5821:      integer*1 B(N)
        -: 5822:      integer erri, i, asize, clock
        1: 5823:      integer, allocatable :: seed(:)
        -: 5824:      real tmp
        -: 5825:
        -: 5826:!dvm$ distribute A(BLOCK)
        -: 5827:
        1: 5828:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5829:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5830:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5831:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5832:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5833:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5834:
        1: 5835:      tname = 'dfloat_char'
        1: 5836:      erri = ER
        -: 5837:
      257: 5838:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5839:          call random_number(tmp)
call    0 returned 100%
      257: 5840:          B(i) = int(tmp * W + S)
        -: 5841:      enddo
        -: 5842:
        -: 5843:!dvm$ actual(B)
        -: 5844:!dvm$ region
        -: 5845:!dvm$ parallel (i) on A(i)
      257: 5846:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5847:          A(i) = dfloat(B(i))
        -: 5848:      enddo
        -: 5849:!dvm$ end region
        -: 5850:!dvm$ get_actual(A)
        -: 5851:
        -: 5852:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5853:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5854:          if (dfloat(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5855:              erri = min(erri, i)
        -: 5856:          endif
        -: 5857:      enddo
        -: 5858:
        1: 5859:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5860:          call ansyes(tname)
call    0 returned 100%
        -: 5861:      else
    #####: 5862:          call ansno(tname)
call    0 never executed
        -: 5863:      endif 
        -: 5864:      
       1*: 5865:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5866:
        -: 5867:C -------------------------------------------------
        -: 5868:
function dfloat2_ called 1 returned 100% blocks executed 80%
        1: 5869:      subroutine dfloat2
        -: 5870:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5871:      character*24 tname
        -: 5872:      real*8 A(N)
        -: 5873:      integer*2 B(N)
        -: 5874:      integer erri, i, asize, clock
        1: 5875:      integer, allocatable :: seed(:)
        -: 5876:      real tmp
        -: 5877:
        -: 5878:!dvm$ distribute A(BLOCK)
        -: 5879:
        1: 5880:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5881:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5882:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5883:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5884:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5885:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5886:
        1: 5887:      tname = 'dfloat_short'
        1: 5888:      erri = ER
        -: 5889:
      257: 5890:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5891:          call random_number(tmp)
call    0 returned 100%
      257: 5892:          B(i) = int(tmp * W + S)
        -: 5893:      enddo
        -: 5894:
        -: 5895:!dvm$ actual(B)
        -: 5896:!dvm$ region
        -: 5897:!dvm$ parallel (i) on A(i)
      257: 5898:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5899:          A(i) = dfloat(B(i))
        -: 5900:      enddo
        -: 5901:!dvm$ end region
        -: 5902:!dvm$ get_actual(A)
        -: 5903:
        -: 5904:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5905:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5906:          if (dfloat(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5907:              erri = min(erri, i)
        -: 5908:          endif
        -: 5909:      enddo
        -: 5910:
        1: 5911:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5912:          call ansyes(tname)
call    0 returned 100%
        -: 5913:      else
    #####: 5914:          call ansno(tname)
call    0 never executed
        -: 5915:      endif 
        -: 5916:      
       1*: 5917:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5918:
        -: 5919:C -------------------------------------------------
        -: 5920:
function dfloat3_ called 1 returned 100% blocks executed 80%
        1: 5921:      subroutine dfloat3
        -: 5922:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5923:      character*24 tname
        -: 5924:      real*8 A(N)
        -: 5925:      integer*4 B(N)
        -: 5926:      integer erri, i, asize, clock
        1: 5927:      integer, allocatable :: seed(:)
        -: 5928:      real tmp
        -: 5929:
        -: 5930:!dvm$ distribute A(BLOCK)
        -: 5931:
        1: 5932:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5933:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5934:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5935:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5936:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5937:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5938:
        1: 5939:      tname = 'dfloat_long'
        1: 5940:      erri = ER
        -: 5941:
      257: 5942:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5943:          call random_number(tmp)
call    0 returned 100%
      257: 5944:          B(i) = int(tmp * W + S)
        -: 5945:      enddo
        -: 5946:
        -: 5947:!dvm$ actual(B)
        -: 5948:!dvm$ region
        -: 5949:!dvm$ parallel (i) on A(i)
      257: 5950:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 5951:          A(i) = dfloat(B(i))
        -: 5952:      enddo
        -: 5953:!dvm$ end region
        -: 5954:!dvm$ get_actual(A)
        -: 5955:
        -: 5956:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 5957:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 5958:          if (dfloat(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 5959:              erri = min(erri, i)
        -: 5960:          endif
        -: 5961:      enddo
        -: 5962:
        1: 5963:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 5964:          call ansyes(tname)
call    0 returned 100%
        -: 5965:      else
    #####: 5966:          call ansno(tname)
call    0 never executed
        -: 5967:      endif 
        -: 5968:      
       1*: 5969:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 5970:
        -: 5971:C -------------------------------------------------
        -: 5972:
function dfloat4_ called 1 returned 100% blocks executed 80%
        1: 5973:      subroutine dfloat4
        -: 5974:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 5975:      character*24 tname
        -: 5976:      real*8 A(N)
        -: 5977:      integer*8 B(N)
        -: 5978:      integer erri, i, asize, clock
        1: 5979:      integer, allocatable :: seed(:)
        -: 5980:      real tmp
        -: 5981:
        -: 5982:!dvm$ distribute A(BLOCK)
        -: 5983:
        1: 5984:      call random_seed(size = asize)
call    0 returned 100%
       3*: 5985:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 5986:      call system_clock(count = clock)
call    0 returned 100%
      34*: 5987:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 5988:      call random_seed(put = seed)
call    0 returned 100%
       1*: 5989:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 5990:
        1: 5991:      tname = 'dfloat_longlong'
        1: 5992:      erri = ER
        -: 5993:
      257: 5994:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 5995:          call random_number(tmp)
call    0 returned 100%
      257: 5996:          B(i) = int(tmp * W + S)
        -: 5997:      enddo
        -: 5998:
        -: 5999:!dvm$ actual(B)
        -: 6000:!dvm$ region
        -: 6001:!dvm$ parallel (i) on A(i)
      257: 6002:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6003:          A(i) = dfloat(B(i))
        -: 6004:      enddo
        -: 6005:!dvm$ end region
        -: 6006:!dvm$ get_actual(A)
        -: 6007:
        -: 6008:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6009:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6010:          if (dfloat(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6011:              erri = min(erri, i)
        -: 6012:          endif
        -: 6013:      enddo
        -: 6014:
        1: 6015:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6016:          call ansyes(tname)
call    0 returned 100%
        -: 6017:      else
    #####: 6018:          call ansno(tname)
call    0 never executed
        -: 6019:      endif 
        -: 6020:      
       1*: 6021:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6022:
        -: 6023:C -------------------------------------------------
        -: 6024:
function dim1_ called 1 returned 100% blocks executed 81%
        1: 6025:      subroutine dim1
        -: 6026:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6027:      character*24 tname
        -: 6028:      integer*1 A(N), B(N), C(N)
        -: 6029:      integer erri, i, asize, clock
        1: 6030:      integer, allocatable :: seed(:)
        -: 6031:      real tmp
        -: 6032:
        -: 6033:!dvm$ distribute A(BLOCK)
        -: 6034:
        1: 6035:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6036:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6037:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6038:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6039:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6040:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6041:
        1: 6042:      tname = 'dim_char'
        1: 6043:      erri = ER
        -: 6044:
      257: 6045:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6046:          call random_number(tmp)
call    0 returned 100%
      256: 6047:          B(i) = int(tmp * W + S)
      256: 6048:          call random_number(tmp)
call    0 returned 100%
      257: 6049:          C(i) = int(tmp * W + S)
        -: 6050:      enddo
        -: 6051:
        -: 6052:!dvm$ actual(B, C)
        -: 6053:!dvm$ region
        -: 6054:!dvm$ parallel (i) on A(i)
      257: 6055:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6056:          A(i) = dim(B(i), C(i))
        -: 6057:      enddo
        -: 6058:!dvm$ end region
        -: 6059:!dvm$ get_actual(A)
        -: 6060:
        -: 6061:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6062:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6063:          if (dim(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6064:              erri = min(erri, i)
        -: 6065:          endif
        -: 6066:      enddo
        -: 6067:
        1: 6068:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6069:          call ansyes(tname)
call    0 returned 100%
        -: 6070:      else
    #####: 6071:          call ansno(tname)
call    0 never executed
        -: 6072:      endif 
        -: 6073:      
       1*: 6074:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6075:
        -: 6076:C -------------------------------------------------
        -: 6077:
function dim2_ called 1 returned 100% blocks executed 81%
        1: 6078:      subroutine dim2
        -: 6079:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6080:      character*24 tname
        -: 6081:      integer*2 A(N), B(N), C(N)
        -: 6082:      integer erri, i, asize, clock
        1: 6083:      integer, allocatable :: seed(:)
        -: 6084:      real tmp
        -: 6085:
        -: 6086:!dvm$ distribute A(BLOCK)
        -: 6087:
        1: 6088:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6089:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6090:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6091:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6092:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6093:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6094:
        1: 6095:      tname = 'dim_short'
        1: 6096:      erri = ER
        -: 6097:
      257: 6098:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6099:          call random_number(tmp)
call    0 returned 100%
      256: 6100:          B(i) = int(tmp * W + S)
      256: 6101:          call random_number(tmp)
call    0 returned 100%
      257: 6102:          C(i) = int(tmp * W + S)
        -: 6103:      enddo
        -: 6104:
        -: 6105:!dvm$ actual(B, C)
        -: 6106:!dvm$ region
        -: 6107:!dvm$ parallel (i) on A(i)
      257: 6108:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6109:          A(i) = dim(B(i), C(i))
        -: 6110:      enddo
        -: 6111:!dvm$ end region
        -: 6112:!dvm$ get_actual(A)
        -: 6113:
        -: 6114:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6115:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6116:          if (dim(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6117:              erri = min(erri, i)
        -: 6118:          endif
        -: 6119:      enddo
        -: 6120:
        1: 6121:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6122:          call ansyes(tname)
call    0 returned 100%
        -: 6123:      else
    #####: 6124:          call ansno(tname)
call    0 never executed
        -: 6125:      endif 
        -: 6126:      
       1*: 6127:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6128:
        -: 6129:C -------------------------------------------------
        -: 6130:
function dim3_ called 1 returned 100% blocks executed 81%
        1: 6131:      subroutine dim3
        -: 6132:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6133:      character*24 tname
        -: 6134:      integer*4 A(N), B(N), C(N)
        -: 6135:      integer erri, i, asize, clock
        1: 6136:      integer, allocatable :: seed(:)
        -: 6137:      real tmp
        -: 6138:
        -: 6139:!dvm$ distribute A(BLOCK)
        -: 6140:
        1: 6141:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6142:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6143:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6144:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6145:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6146:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6147:
        1: 6148:      tname = 'dim_long'
        1: 6149:      erri = ER
        -: 6150:
      257: 6151:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6152:          call random_number(tmp)
call    0 returned 100%
      256: 6153:          B(i) = int(tmp * W + S)
      256: 6154:          call random_number(tmp)
call    0 returned 100%
      257: 6155:          C(i) = int(tmp * W + S)
        -: 6156:      enddo
        -: 6157:
        -: 6158:!dvm$ actual(B, C)
        -: 6159:!dvm$ region
        -: 6160:!dvm$ parallel (i) on A(i)
      257: 6161:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6162:          A(i) = dim(B(i), C(i))
        -: 6163:      enddo
        -: 6164:!dvm$ end region
        -: 6165:!dvm$ get_actual(A)
        -: 6166:
        -: 6167:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6168:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6169:          if (dim(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6170:              erri = min(erri, i)
        -: 6171:          endif
        -: 6172:      enddo
        -: 6173:
        1: 6174:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6175:          call ansyes(tname)
call    0 returned 100%
        -: 6176:      else
    #####: 6177:          call ansno(tname)
call    0 never executed
        -: 6178:      endif 
        -: 6179:      
       1*: 6180:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6181:
        -: 6182:C -------------------------------------------------
        -: 6183:
function dim4_ called 1 returned 100% blocks executed 81%
        1: 6184:      subroutine dim4
        -: 6185:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6186:      character*24 tname
        -: 6187:      integer*8 A(N), B(N), C(N)
        -: 6188:      integer erri, i, asize, clock
        1: 6189:      integer, allocatable :: seed(:)
        -: 6190:      real tmp
        -: 6191:
        -: 6192:!dvm$ distribute A(BLOCK)
        -: 6193:
        1: 6194:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6195:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6196:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6197:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6198:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6199:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6200:
        1: 6201:      tname = 'dim_longlong'
        1: 6202:      erri = ER
        -: 6203:
      257: 6204:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6205:          call random_number(tmp)
call    0 returned 100%
      256: 6206:          B(i) = int(tmp * W + S)
      256: 6207:          call random_number(tmp)
call    0 returned 100%
      257: 6208:          C(i) = int(tmp * W + S)
        -: 6209:      enddo
        -: 6210:
        -: 6211:!dvm$ actual(B, C)
        -: 6212:!dvm$ region
        -: 6213:!dvm$ parallel (i) on A(i)
      257: 6214:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6215:          A(i) = dim(B(i), C(i))
        -: 6216:      enddo
        -: 6217:!dvm$ end region
        -: 6218:!dvm$ get_actual(A)
        -: 6219:
        -: 6220:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6221:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6222:          if (dim(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6223:              erri = min(erri, i)
        -: 6224:          endif
        -: 6225:      enddo
        -: 6226:
        1: 6227:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6228:          call ansyes(tname)
call    0 returned 100%
        -: 6229:      else
    #####: 6230:          call ansno(tname)
call    0 never executed
        -: 6231:      endif 
        -: 6232:      
       1*: 6233:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6234:
        -: 6235:C -------------------------------------------------
        -: 6236:
function dim5_ called 1 returned 100% blocks executed 81%
        1: 6237:      subroutine dim5
        -: 6238:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6239:      character*24 tname
        -: 6240:      real A(N), B(N), C(N)
        -: 6241:      integer erri, i, asize, clock
        1: 6242:      integer, allocatable :: seed(:)
        -: 6243:
        -: 6244:!dvm$ distribute A(BLOCK)
        -: 6245:
        1: 6246:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6247:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6248:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6249:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6250:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6251:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6252:
        1: 6253:      tname = 'dim_float'
        1: 6254:      erri = ER
        -: 6255:
      257: 6256:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6257:          call random_number(B(i))
call    0 returned 100%
      256: 6258:          B(i) = B(i) * W + S
      256: 6259:          call random_number(C(i))
call    0 returned 100%
      257: 6260:          C(i) = C(i) * W + S
        -: 6261:      enddo
        -: 6262:
        -: 6263:!dvm$ actual(B, C)
        -: 6264:!dvm$ region
        -: 6265:!dvm$ parallel (i) on A(i)
      257: 6266:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6267:          A(i) = dim(B(i), C(i))
        -: 6268:      enddo
        -: 6269:!dvm$ end region
        -: 6270:!dvm$ get_actual(A)
        -: 6271:
        -: 6272:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6273:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6274:          if (dim(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6275:              erri = min(erri, i)
        -: 6276:          endif
        -: 6277:      enddo
        -: 6278:
        1: 6279:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6280:          call ansyes(tname)
call    0 returned 100%
        -: 6281:      else
    #####: 6282:          call ansno(tname)
call    0 never executed
        -: 6283:      endif 
        -: 6284:      
       1*: 6285:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6286:
        -: 6287:C -------------------------------------------------
        -: 6288:
function dim6_ called 1 returned 100% blocks executed 81%
        1: 6289:      subroutine dim6
        -: 6290:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6291:      character*24 tname
        -: 6292:      real*8 A(N), B(N), C(N)
        -: 6293:      integer erri, i, asize, clock
        1: 6294:      integer, allocatable :: seed(:)
        -: 6295:
        -: 6296:!dvm$ distribute A(BLOCK)
        -: 6297:
        1: 6298:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6299:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6300:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6301:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6302:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6303:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6304:
        1: 6305:      tname = 'dim_double'
        1: 6306:      erri = ER
        -: 6307:
      257: 6308:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6309:          call random_number(B(i))
call    0 returned 100%
      256: 6310:          B(i) = B(i) * W + S
      256: 6311:          call random_number(C(i))
call    0 returned 100%
      257: 6312:          C(i) = C(i) * W + S
        -: 6313:      enddo
        -: 6314:
        -: 6315:!dvm$ actual(B, C)
        -: 6316:!dvm$ region
        -: 6317:!dvm$ parallel (i) on A(i)
      257: 6318:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6319:          A(i) = dim(B(i), C(i))
        -: 6320:      enddo
        -: 6321:!dvm$ end region
        -: 6322:!dvm$ get_actual(A)
        -: 6323:
        -: 6324:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6325:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6326:          if (dim(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6327:              erri = min(erri, i)
        -: 6328:          endif
        -: 6329:      enddo
        -: 6330:
        1: 6331:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6332:          call ansyes(tname)
call    0 returned 100%
        -: 6333:      else
    #####: 6334:          call ansno(tname)
call    0 never executed
        -: 6335:      endif 
        -: 6336:      
       1*: 6337:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6338:
        -: 6339:C -------------------------------------------------
        -: 6340:
function dim13_ called 1 returned 100% blocks executed 81%
        1: 6341:      subroutine dim13
        -: 6342:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6343:      character*24 tname
        -: 6344:      real*8 A(N), B(N), C(N)
        -: 6345:      integer erri, i, asize, clock
        1: 6346:      integer, allocatable :: seed(:)
        -: 6347:
        -: 6348:!dvm$ distribute A(BLOCK)
        -: 6349:
        1: 6350:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6351:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6352:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6353:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6354:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6355:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6356:
        1: 6357:      tname = 'ddim_double'
        1: 6358:      erri = ER
        -: 6359:
      257: 6360:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6361:          call random_number(B(i))
call    0 returned 100%
      256: 6362:          B(i) = B(i) * W + S
      256: 6363:          call random_number(C(i))
call    0 returned 100%
      257: 6364:          C(i) = C(i) * W + S
        -: 6365:      enddo
        -: 6366:
        -: 6367:!dvm$ actual(B, C)
        -: 6368:!dvm$ region
        -: 6369:!dvm$ parallel (i) on A(i)
      257: 6370:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6371:          A(i) = ddim(B(i), C(i))
        -: 6372:      enddo
        -: 6373:!dvm$ end region
        -: 6374:!dvm$ get_actual(A)
        -: 6375:
        -: 6376:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6377:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6378:          if (ddim(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6379:              erri = min(erri, i)
        -: 6380:          endif
        -: 6381:      enddo
        -: 6382:
        1: 6383:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6384:          call ansyes(tname)
call    0 returned 100%
        -: 6385:      else
    #####: 6386:          call ansno(tname)
call    0 never executed
        -: 6387:      endif 
        -: 6388:      
       1*: 6389:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6390:
        -: 6391:C -------------------------------------------------
        -: 6392:
function dprod1_ called 1 returned 100% blocks executed 81%
        1: 6393:      subroutine dprod1
        -: 6394:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6395:      real*8, parameter :: EPS = 1d-15
        -: 6396:      character*24 tname
        -: 6397:      real*8 A(N)
        -: 6398:      real B(N), C(N)
        -: 6399:      integer erri, i, asize, clock
        1: 6400:      integer, allocatable :: seed(:)
        -: 6401:      real*8 tmp
        -: 6402:
        -: 6403:!dvm$ distribute A(BLOCK)
        -: 6404:
        1: 6405:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6406:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6407:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6408:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6409:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6410:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6411:
        1: 6412:      tname = 'dprod_float'
        1: 6413:      erri = ER
        -: 6414:
      257: 6415:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6416:          call random_number(B(i))
call    0 returned 100%
      256: 6417:          B(i) = B(i) * W + S
      256: 6418:          call random_number(C(i))
call    0 returned 100%
      257: 6419:          C(i) = C(i) * W + S
        -: 6420:      enddo
        -: 6421:
        -: 6422:!dvm$ actual(B, C)
        -: 6423:!dvm$ region
        -: 6424:!dvm$ parallel (i) on A(i)
      257: 6425:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6426:          A(i) = dprod(B(i), C(i))
        -: 6427:      enddo
        -: 6428:!dvm$ end region
        -: 6429:!dvm$ get_actual(A)
        -: 6430:
        -: 6431:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 6432:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6433:          tmp = dprod(B(i), C(i))
      257: 6434:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6435:              erri = min(erri, i)
        -: 6436:          endif
        -: 6437:      enddo
        -: 6438:
        1: 6439:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6440:          call ansyes(tname)
call    0 returned 100%
        -: 6441:      else
    #####: 6442:          call ansno(tname)
call    0 never executed
        -: 6443:      endif 
        -: 6444:      
       1*: 6445:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6446:
        -: 6447:C -------------------------------------------------
        -: 6448:
function dreal1_ called 1 returned 100% blocks executed 81%
        1: 6449:      subroutine dreal1
        -: 6450:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6451:      character*24 tname
        -: 6452:      real*8 A(N)
        -: 6453:      double complex B(N)
        -: 6454:      integer erri, i, asize, clock
        1: 6455:      integer, allocatable :: seed(:)
        -: 6456:
        -: 6457:!dvm$ distribute A(BLOCK)
        -: 6458:
        1: 6459:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6460:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6461:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6462:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6463:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6464:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6465:
        1: 6466:      tname = 'dreal_complexd'
        1: 6467:      erri = ER
        -: 6468:
      257: 6469:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6470:          call random_number(x)
call    0 returned 100%
      256: 6471:          call random_number(y)
call    0 returned 100%
      257: 6472:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 6473:      enddo
        -: 6474:
        -: 6475:!dvm$ actual(B)
        -: 6476:!dvm$ region
        -: 6477:!dvm$ parallel (i) on A(i)
      257: 6478:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6479:          A(i) = dreal(B(i))
        -: 6480:      enddo
        -: 6481:!dvm$ end region
        -: 6482:!dvm$ get_actual(A)
        -: 6483:
        -: 6484:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6485:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6486:          if (dreal(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6487:              erri = min(erri, i)
        -: 6488:          endif
        -: 6489:      enddo
        -: 6490:
        1: 6491:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6492:          call ansyes(tname)
call    0 returned 100%
        -: 6493:      else
    #####: 6494:          call ansno(tname)
call    0 never executed
        -: 6495:      endif 
        -: 6496:      
       1*: 6497:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6498:
        -: 6499:C -------------------------------------------------
        -: 6500:!! it does not work with D(i) == 0 && 64 with Intel 2015
function dshiftl1_ called 1 returned 100% blocks executed 83%
        1: 6501:      subroutine dshiftl1
        -: 6502:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6503:      character*24 tname
        -: 6504:      integer*8 A(N), B(N), C(N), D(N)
        -: 6505:      integer erri, i, asize, clock
        1: 6506:      integer, allocatable :: seed(:)
        -: 6507:      real tmp
        -: 6508:
        -: 6509:!dvm$ distribute A(BLOCK)
        -: 6510:
        1: 6511:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6512:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6513:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6514:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6515:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6516:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6517:
        1: 6518:      tname = 'dshiftl_longlong'
        1: 6519:      erri = ER
        -: 6520:
      257: 6521:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6522:          call random_number(tmp)
call    0 returned 100%
      256: 6523:          B(i) = int(tmp * W + S)
      256: 6524:          call random_number(tmp)
call    0 returned 100%
      256: 6525:          C(i) = int(tmp * W + S)
      256: 6526:          call random_number(tmp)
call    0 returned 100%
      257: 6527:          D(i) = 1 + int(tmp * 62)  !!! HERE
        -: 6528:      enddo
        -: 6529:
        -: 6530:!dvm$ actual(B, C, D)
        -: 6531:!dvm$ region
        -: 6532:!dvm$ parallel (i) on A(i)
      257: 6533:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6534:          A(i) = dshiftl(B(i), C(i), D(i))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 6535:      enddo
        -: 6536:!dvm$ end region
        -: 6537:!dvm$ get_actual(A)
        -: 6538:
        -: 6539:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6540:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6541:          if (dshiftl(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 6542:              erri = min(erri, i)
        -: 6543:          endif
        -: 6544:      enddo
        -: 6545:
        1: 6546:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6547:          call ansyes(tname)
call    0 returned 100%
        -: 6548:      else
    #####: 6549:          call ansno(tname)
call    0 never executed
        -: 6550:      endif 
        -: 6551:      
       1*: 6552:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6553:
        -: 6554:C -------------------------------------------------
        -: 6555:!! it does not work with D(i) == 0 && 64 with Intel 2015
function dshiftr1_ called 1 returned 100% blocks executed 83%
        1: 6556:      subroutine dshiftr1
        -: 6557:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6558:      character*24 tname
        -: 6559:      integer*8 A(N), B(N), C(N), D(N)
        -: 6560:      integer erri, i, asize, clock
        1: 6561:      integer, allocatable :: seed(:)
        -: 6562:      real tmp
        -: 6563:
        -: 6564:!dvm$ distribute A(BLOCK)
        -: 6565:
        1: 6566:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6567:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6568:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6569:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6570:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6571:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6572:
        1: 6573:      tname = 'dshiftr_longlong'
        1: 6574:      erri = ER
        -: 6575:
      257: 6576:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 6577:          call random_number(tmp)
call    0 returned 100%
      256: 6578:          B(i) = int(tmp * W + S)
      256: 6579:          call random_number(tmp)
call    0 returned 100%
      256: 6580:          C(i) = int(tmp * W + S)
      256: 6581:          call random_number(tmp)
call    0 returned 100%
      257: 6582:          D(i) = 1 + int(tmp * 62)  !!! HERE
        -: 6583:      enddo
        -: 6584:
        -: 6585:!dvm$ actual(B, C, D)
        -: 6586:!dvm$ region
        -: 6587:!dvm$ parallel (i) on A(i)
      257: 6588:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 6589:          A(i) = dshiftr(B(i), C(i), D(i))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 6590:      enddo
        -: 6591:!dvm$ end region
        -: 6592:!dvm$ get_actual(A)
        -: 6593:
        -: 6594:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 6595:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6596:          if (dshiftr(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 6597:              erri = min(erri, i)
        -: 6598:          endif
        -: 6599:      enddo
        -: 6600:
        1: 6601:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6602:          call ansyes(tname)
call    0 returned 100%
        -: 6603:      else
    #####: 6604:          call ansno(tname)
call    0 never executed
        -: 6605:      endif 
        -: 6606:      
       1*: 6607:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6608:
        -: 6609:C -------------------------------------------------
        -: 6610:
function erf1_ called 1 returned 100% blocks executed 79%
        1: 6611:      subroutine erf1
        -: 6612:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6613:      real, parameter :: EPS = 1e-6
        -: 6614:      character*24 tname
        -: 6615:      real A(N), B(N)
        -: 6616:      integer erri, i, asize, clock
        1: 6617:      integer, allocatable :: seed(:)
        -: 6618:      real tmp
        -: 6619:
        -: 6620:!dvm$ distribute A(BLOCK)
        -: 6621:
        1: 6622:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6623:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6624:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6625:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6626:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6627:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6628:
        1: 6629:      tname = 'erf_float'
        1: 6630:      erri = ER
        -: 6631:
      257: 6632:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6633:          call random_number(B(i))
call    0 returned 100%
      257: 6634:          B(i) = B(i) * W + S
        -: 6635:      enddo
        -: 6636:
        -: 6637:!dvm$ actual(B)
        -: 6638:!dvm$ region
        -: 6639:!dvm$ parallel (i) on A(i)
      257: 6640:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6641:          A(i) = erf(B(i))
        -: 6642:      enddo
        -: 6643:!dvm$ end region
        -: 6644:!dvm$ get_actual(A)
        -: 6645:
        -: 6646:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 6647:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6648:          tmp = erf(B(i))
      257: 6649:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6650:              erri = min(erri, i)
        -: 6651:          endif
        -: 6652:      enddo
        -: 6653:
        1: 6654:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6655:          call ansyes(tname)
call    0 returned 100%
        -: 6656:      else
    #####: 6657:          call ansno(tname)
call    0 never executed
        -: 6658:      endif 
        -: 6659:      
       1*: 6660:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6661:
        -: 6662:C -------------------------------------------------
        -: 6663:
function erf2_ called 1 returned 100% blocks executed 79%
        1: 6664:      subroutine erf2
        -: 6665:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6666:      real*8, parameter :: EPS = 1d-15
        -: 6667:      character*24 tname
        -: 6668:      real*8 A(N), B(N)
        -: 6669:      integer erri, i, asize, clock
        1: 6670:      integer, allocatable :: seed(:)
        -: 6671:      real*8 tmp
        -: 6672:
        -: 6673:!dvm$ distribute A(BLOCK)
        -: 6674:
        1: 6675:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6676:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6677:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6678:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6679:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6680:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6681:
        1: 6682:      tname = 'erf_double'
        1: 6683:      erri = ER
        -: 6684:
      257: 6685:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6686:          call random_number(B(i))
call    0 returned 100%
      257: 6687:          B(i) = B(i) * W + S
        -: 6688:      enddo
        -: 6689:
        -: 6690:!dvm$ actual(B)
        -: 6691:!dvm$ region
        -: 6692:!dvm$ parallel (i) on A(i)
      257: 6693:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6694:          A(i) = erf(B(i))
        -: 6695:      enddo
        -: 6696:!dvm$ end region
        -: 6697:!dvm$ get_actual(A)
        -: 6698:
        -: 6699:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 6700:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6701:          tmp = erf(B(i))
      257: 6702:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6703:              erri = min(erri, i)
        -: 6704:          endif
        -: 6705:      enddo
        -: 6706:
        1: 6707:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6708:          call ansyes(tname)
call    0 returned 100%
        -: 6709:      else
    #####: 6710:          call ansno(tname)
call    0 never executed
        -: 6711:      endif 
        -: 6712:      
       1*: 6713:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6714:
        -: 6715:C -------------------------------------------------
        -: 6716:
function erf3_ called 1 returned 100% blocks executed 79%
        1: 6717:      subroutine erf3
        -: 6718:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6719:      real*8, parameter :: EPS = 1d-15
        -: 6720:      character*24 tname
        -: 6721:      real*8 A(N), B(N)
        -: 6722:      integer erri, i, asize, clock
        1: 6723:      integer, allocatable :: seed(:)
        -: 6724:      real*8 tmp
        -: 6725:
        -: 6726:!dvm$ distribute A(BLOCK)
        -: 6727:
        1: 6728:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6729:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6730:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6731:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6732:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6733:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6734:
        1: 6735:      tname = 'derf_double'
        1: 6736:      erri = ER
        -: 6737:
      257: 6738:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6739:          call random_number(B(i))
call    0 returned 100%
      257: 6740:          B(i) = B(i) * W + S
        -: 6741:      enddo
        -: 6742:
        -: 6743:!dvm$ actual(B)
        -: 6744:!dvm$ region
        -: 6745:!dvm$ parallel (i) on A(i)
      257: 6746:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6747:          A(i) = derf(B(i))
        -: 6748:      enddo
        -: 6749:!dvm$ end region
        -: 6750:!dvm$ get_actual(A)
        -: 6751:
        -: 6752:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 6753:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6754:          tmp = derf(B(i))
      257: 6755:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6756:              erri = min(erri, i)
        -: 6757:          endif
        -: 6758:      enddo
        -: 6759:
        1: 6760:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6761:          call ansyes(tname)
call    0 returned 100%
        -: 6762:      else
    #####: 6763:          call ansno(tname)
call    0 never executed
        -: 6764:      endif 
        -: 6765:      
       1*: 6766:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6767:
        -: 6768:C -------------------------------------------------
        -: 6769:
function erfc1_ called 1 returned 100% blocks executed 79%
        1: 6770:      subroutine erfc1
        -: 6771:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6772:      real, parameter :: EPS = 1e-6
        -: 6773:      character*24 tname
        -: 6774:      real A(N), B(N)
        -: 6775:      integer erri, i, asize, clock
        1: 6776:      integer, allocatable :: seed(:)
        -: 6777:      real tmp
        -: 6778:
        -: 6779:!dvm$ distribute A(BLOCK)
        -: 6780:
        1: 6781:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6782:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6783:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6784:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6785:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6786:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6787:
        1: 6788:      tname = 'erfc_float'
        1: 6789:      erri = ER
        -: 6790:
      257: 6791:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6792:          call random_number(B(i))
call    0 returned 100%
      257: 6793:          B(i) = B(i) * W + S
        -: 6794:      enddo
        -: 6795:
        -: 6796:!dvm$ actual(B)
        -: 6797:!dvm$ region
        -: 6798:!dvm$ parallel (i) on A(i)
      257: 6799:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6800:          A(i) = erfc(B(i))
        -: 6801:      enddo
        -: 6802:!dvm$ end region
        -: 6803:!dvm$ get_actual(A)
        -: 6804:
        -: 6805:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 6806:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6807:          tmp = erfc(B(i))
      257: 6808:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6809:              erri = min(erri, i)
        -: 6810:          endif
        -: 6811:      enddo
        -: 6812:
        1: 6813:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6814:          call ansyes(tname)
call    0 returned 100%
        -: 6815:      else
    #####: 6816:          call ansno(tname)
call    0 never executed
        -: 6817:      endif 
        -: 6818:      
       1*: 6819:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6820:
        -: 6821:C -------------------------------------------------
        -: 6822:
function erfc2_ called 1 returned 100% blocks executed 79%
        1: 6823:      subroutine erfc2
        -: 6824:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6825:      real*8, parameter :: EPS = 1d-15
        -: 6826:      character*24 tname
        -: 6827:      real*8 A(N), B(N)
        -: 6828:      integer erri, i, asize, clock
        1: 6829:      integer, allocatable :: seed(:)
        -: 6830:      real*8 tmp
        -: 6831:
        -: 6832:!dvm$ distribute A(BLOCK)
        -: 6833:
        1: 6834:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6835:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6836:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6837:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6838:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6839:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6840:
        1: 6841:      tname = 'erfc_double'
        1: 6842:      erri = ER
        -: 6843:
      257: 6844:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6845:          call random_number(B(i))
call    0 returned 100%
      257: 6846:          B(i) = B(i) * W + S
        -: 6847:      enddo
        -: 6848:
        -: 6849:!dvm$ actual(B)
        -: 6850:!dvm$ region
        -: 6851:!dvm$ parallel (i) on A(i)
      257: 6852:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6853:          A(i) = erfc(B(i))
        -: 6854:      enddo
        -: 6855:!dvm$ end region
        -: 6856:!dvm$ get_actual(A)
        -: 6857:
        -: 6858:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 6859:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6860:          tmp = erfc(B(i))
      257: 6861:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6862:              erri = min(erri, i)
        -: 6863:          endif
        -: 6864:      enddo
        -: 6865:
        1: 6866:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6867:          call ansyes(tname)
call    0 returned 100%
        -: 6868:      else
    #####: 6869:          call ansno(tname)
call    0 never executed
        -: 6870:      endif 
        -: 6871:      
       1*: 6872:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6873:
        -: 6874:C -------------------------------------------------
        -: 6875:
function erfc3_ called 1 returned 100% blocks executed 79%
        1: 6876:      subroutine erfc3
        -: 6877:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 6878:      real*8, parameter :: EPS = 1d-15
        -: 6879:      character*24 tname
        -: 6880:      real*8 A(N), B(N)
        -: 6881:      integer erri, i, asize, clock
        1: 6882:      integer, allocatable :: seed(:)
        -: 6883:      real*8 tmp
        -: 6884:
        -: 6885:!dvm$ distribute A(BLOCK)
        -: 6886:
        1: 6887:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6888:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6889:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6890:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6891:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6892:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6893:
        1: 6894:      tname = 'derfc_double'
        1: 6895:      erri = ER
        -: 6896:
      257: 6897:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6898:          call random_number(B(i))
call    0 returned 100%
      257: 6899:          B(i) = B(i) * W + S
        -: 6900:      enddo
        -: 6901:
        -: 6902:!dvm$ actual(B)
        -: 6903:!dvm$ region
        -: 6904:!dvm$ parallel (i) on A(i)
      257: 6905:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6906:          A(i) = derfc(B(i))
        -: 6907:      enddo
        -: 6908:!dvm$ end region
        -: 6909:!dvm$ get_actual(A)
        -: 6910:
        -: 6911:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 6912:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6913:          tmp = derfc(B(i))
      257: 6914:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6915:              erri = min(erri, i)
        -: 6916:          endif
        -: 6917:      enddo
        -: 6918:
        1: 6919:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6920:          call ansyes(tname)
call    0 returned 100%
        -: 6921:      else
    #####: 6922:          call ansno(tname)
call    0 never executed
        -: 6923:      endif 
        -: 6924:      
       1*: 6925:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6926:
        -: 6927:C -------------------------------------------------
        -: 6928:
function erfc_scaled1_ called 1 returned 100% blocks executed 79%
        1: 6929:      subroutine erfc_scaled1
        -: 6930:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 6931:      real, parameter :: EPS = 1e-6
        -: 6932:      character*24 tname
        -: 6933:      real A(N), B(N)
        -: 6934:      integer erri, i, asize, clock
        1: 6935:      integer, allocatable :: seed(:)
        -: 6936:      real tmp
        -: 6937:
        -: 6938:!dvm$ distribute A(BLOCK)
        -: 6939:
        1: 6940:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6941:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6942:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6943:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6944:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6945:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6946:
        1: 6947:      tname = 'erfc_scaled_float'
        1: 6948:      erri = ER
        -: 6949:
      257: 6950:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6951:          call random_number(B(i))
call    0 returned 100%
      257: 6952:          B(i) = B(i) * W + S
        -: 6953:      enddo
        -: 6954:
        -: 6955:!dvm$ actual(B)
        -: 6956:!dvm$ region
        -: 6957:!dvm$ parallel (i) on A(i)
      257: 6958:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 6959:          A(i) = erfc_scaled(B(i))
        -: 6960:      enddo
        -: 6961:!dvm$ end region
        -: 6962:!dvm$ get_actual(A)
        -: 6963:
        -: 6964:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 6965:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 6966:          tmp = erfc_scaled(B(i))
      257: 6967:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 6968:              erri = min(erri, i)
        -: 6969:          endif
        -: 6970:      enddo
        -: 6971:
        1: 6972:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 6973:          call ansyes(tname)
call    0 returned 100%
        -: 6974:      else
    #####: 6975:          call ansno(tname)
call    0 never executed
        -: 6976:      endif 
        -: 6977:      
       1*: 6978:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 6979:
        -: 6980:C -------------------------------------------------
        -: 6981:
function erfc_scaled2_ called 1 returned 100% blocks executed 79%
        1: 6982:      subroutine erfc_scaled2
        -: 6983:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -: 6984:      real*8, parameter :: EPS = 1d-15
        -: 6985:      character*24 tname
        -: 6986:      real*8 A(N), B(N)
        -: 6987:      integer erri, i, asize, clock
        1: 6988:      integer, allocatable :: seed(:)
        -: 6989:      real*8 tmp
        -: 6990:
        -: 6991:!dvm$ distribute A(BLOCK)
        -: 6992:
        1: 6993:      call random_seed(size = asize)
call    0 returned 100%
       3*: 6994:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 6995:      call system_clock(count = clock)
call    0 returned 100%
      34*: 6996:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 6997:      call random_seed(put = seed)
call    0 returned 100%
       1*: 6998:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 6999:
        1: 7000:      tname = 'erfc_scaled_double'
        1: 7001:      erri = ER
        -: 7002:
      257: 7003:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7004:          call random_number(B(i))
call    0 returned 100%
      257: 7005:          B(i) = B(i) * W + S
        -: 7006:      enddo
        -: 7007:
        -: 7008:!dvm$ actual(B)
        -: 7009:!dvm$ region
        -: 7010:!dvm$ parallel (i) on A(i)
      257: 7011:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7012:          A(i) = erfc_scaled(B(i))
        -: 7013:      enddo
        -: 7014:!dvm$ end region
        -: 7015:!dvm$ get_actual(A)
        -: 7016:
        -: 7017:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7018:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7019:          tmp = erfc_scaled(B(i))
      257: 7020:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7021:              erri = min(erri, i)
        -: 7022:          endif
        -: 7023:      enddo
        -: 7024:
        1: 7025:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7026:          call ansyes(tname)
call    0 returned 100%
        -: 7027:      else
    #####: 7028:          call ansno(tname)
call    0 never executed
        -: 7029:      endif 
        -: 7030:      
       1*: 7031:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7032:
        -: 7033:C -------------------------------------------------
        -: 7034:
function exp1_ called 1 returned 100% blocks executed 79%
        1: 7035:      subroutine exp1
        -: 7036:      integer, parameter :: N = 256, ER = N + 1, W = 4, S = -2
        -: 7037:      real, parameter :: EPS = 1e-6
        -: 7038:      character*24 tname
        -: 7039:      real A(N), B(N)
        -: 7040:      integer erri, i, asize, clock
        1: 7041:      integer, allocatable :: seed(:)
        -: 7042:      real tmp
        -: 7043:
        -: 7044:!dvm$ distribute A(BLOCK)
        -: 7045:
        1: 7046:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7047:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7048:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7049:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7050:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7051:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7052:
        1: 7053:      tname = 'exp_float'
        1: 7054:      erri = ER
        -: 7055:
      257: 7056:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7057:          call random_number(B(i))
call    0 returned 100%
      257: 7058:          B(i) = B(i) * W + S
        -: 7059:      enddo
        -: 7060:
        -: 7061:!dvm$ actual(B)
        -: 7062:!dvm$ region
        -: 7063:!dvm$ parallel (i) on A(i)
      257: 7064:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7065:          A(i) = exp(B(i))
        -: 7066:      enddo
        -: 7067:!dvm$ end region
        -: 7068:!dvm$ get_actual(A)
        -: 7069:
        -: 7070:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7071:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7072:          tmp = exp(B(i))
      257: 7073:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7074:              erri = min(erri, i)
        -: 7075:          endif
        -: 7076:      enddo
        -: 7077:
        1: 7078:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7079:          call ansyes(tname)
call    0 returned 100%
        -: 7080:      else
    #####: 7081:          call ansno(tname)
call    0 never executed
        -: 7082:      endif 
        -: 7083:      
       1*: 7084:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7085:
        -: 7086:C -------------------------------------------------
        -: 7087:
function exp2_ called 1 returned 100% blocks executed 79%
        1: 7088:      subroutine exp2
        -: 7089:      integer, parameter :: N = 256, ER = N + 1, W = 4, S = -2
        -: 7090:      real*8, parameter :: EPS = 1d-15
        -: 7091:      character*24 tname
        -: 7092:      real*8 A(N), B(N)
        -: 7093:      integer erri, i, asize, clock
        1: 7094:      integer, allocatable :: seed(:)
        -: 7095:      real*8 tmp
        -: 7096:
        -: 7097:!dvm$ distribute A(BLOCK)
        -: 7098:
        1: 7099:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7100:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7101:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7102:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7103:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7104:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7105:
        1: 7106:      tname = 'exp_double'
        1: 7107:      erri = ER
        -: 7108:
      257: 7109:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7110:          call random_number(B(i))
call    0 returned 100%
      257: 7111:          B(i) = B(i) * W + S
        -: 7112:      enddo
        -: 7113:
        -: 7114:!dvm$ actual(B)
        -: 7115:!dvm$ region
        -: 7116:!dvm$ parallel (i) on A(i)
      257: 7117:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7118:          A(i) = exp(B(i))
        -: 7119:      enddo
        -: 7120:!dvm$ end region
        -: 7121:!dvm$ get_actual(A)
        -: 7122:
        -: 7123:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7124:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7125:          tmp = exp(B(i))
      257: 7126:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7127:              erri = min(erri, i)
        -: 7128:          endif
        -: 7129:      enddo
        -: 7130:
        1: 7131:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7132:          call ansyes(tname)
call    0 returned 100%
        -: 7133:      else
    #####: 7134:          call ansno(tname)
call    0 never executed
        -: 7135:      endif 
        -: 7136:      
       1*: 7137:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7138:
        -: 7139:C -------------------------------------------------
        -: 7140:
function exp3_ called 1 returned 100% blocks executed 80%
        1: 7141:      subroutine exp3
        -: 7142:      integer, parameter :: N = 256, ER = N + 1, W = 4, S = -2
        -: 7143:      real, parameter :: EPS = 1e-6
        -: 7144:      character*24 tname
        -: 7145:      complex A(N), B(N)
        -: 7146:      integer erri, i, asize, clock
        1: 7147:      integer, allocatable :: seed(:)
        -: 7148:      real x, y
        -: 7149:      complex tmp
        -: 7150:
        -: 7151:!dvm$ distribute A(BLOCK)
        -: 7152:
        1: 7153:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7154:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7155:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7156:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7157:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7158:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7159:
        1: 7160:      tname = 'exp_complexf'
        1: 7161:      erri = ER
        -: 7162:
      257: 7163:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7164:          call random_number(x)
call    0 returned 100%
      256: 7165:          call random_number(y)
call    0 returned 100%
      257: 7166:          B(i) = cmplx(x * W + S, y * W + S)
        -: 7167:      enddo
        -: 7168:
        -: 7169:!dvm$ actual(B)
        -: 7170:!dvm$ region
        -: 7171:!dvm$ parallel (i) on A(i)
      257: 7172:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7173:          A(i) = exp(B(i))
        -: 7174:      enddo
        -: 7175:!dvm$ end region
        -: 7176:!dvm$ get_actual(A)
        -: 7177:
        -: 7178:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7179:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7180:          tmp = exp(B(i))
      257: 7181:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7182:              erri = min(erri, i)
        -: 7183:          endif
        -: 7184:      enddo
        -: 7185:
        1: 7186:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7187:          call ansyes(tname)
call    0 returned 100%
        -: 7188:      else
    #####: 7189:          call ansno(tname)
call    0 never executed
        -: 7190:      endif 
        -: 7191:      
       1*: 7192:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7193:
        -: 7194:C -------------------------------------------------
        -: 7195:
function exp4_ called 1 returned 100% blocks executed 80%
        1: 7196:      subroutine exp4
        -: 7197:      integer, parameter :: N = 256, ER = N + 1, W = 4, S = -2
        -: 7198:      real*8, parameter :: EPS = 1d-15
        -: 7199:      character*24 tname
        -: 7200:      double complex A(N), B(N)
        -: 7201:      integer erri, i, asize, clock
        1: 7202:      integer, allocatable :: seed(:)
        -: 7203:      real*8 x, y
        -: 7204:      double complex tmp
        -: 7205:
        -: 7206:!dvm$ distribute A(BLOCK)
        -: 7207:
        1: 7208:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7209:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7210:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7211:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7212:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7213:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7214:
        1: 7215:      tname = 'exp_complexd'
        1: 7216:      erri = ER
        -: 7217:
      257: 7218:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7219:          call random_number(x)
call    0 returned 100%
      256: 7220:          call random_number(y)
call    0 returned 100%
      257: 7221:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 7222:      enddo
        -: 7223:
        -: 7224:!dvm$ actual(B)
        -: 7225:!dvm$ region
        -: 7226:!dvm$ parallel (i) on A(i)
      257: 7227:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7228:          A(i) = exp(B(i))
        -: 7229:      enddo
        -: 7230:!dvm$ end region
        -: 7231:!dvm$ get_actual(A)
        -: 7232:
        -: 7233:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7234:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7235:          tmp = exp(B(i))
      257: 7236:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7237:              erri = min(erri, i)
        -: 7238:          endif
        -: 7239:      enddo
        -: 7240:
        1: 7241:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7242:          call ansyes(tname)
call    0 returned 100%
        -: 7243:      else
    #####: 7244:          call ansno(tname)
call    0 never executed
        -: 7245:      endif 
        -: 7246:      
       1*: 7247:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7248:
        -: 7249:C -------------------------------------------------
        -: 7250:
function exp5_ called 1 returned 100% blocks executed 79%
        1: 7251:      subroutine exp5
        -: 7252:      integer, parameter :: N = 256, ER = N + 1, W = 4, S = -2
        -: 7253:      real*8, parameter :: EPS = 1d-15
        -: 7254:      character*24 tname
        -: 7255:      real*8 A(N), B(N)
        -: 7256:      integer erri, i, asize, clock
        1: 7257:      integer, allocatable :: seed(:)
        -: 7258:      real*8 tmp
        -: 7259:
        -: 7260:!dvm$ distribute A(BLOCK)
        -: 7261:
        1: 7262:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7263:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7264:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7265:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7266:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7267:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7268:
        1: 7269:      tname = 'dexp_double'
        1: 7270:      erri = ER
        -: 7271:
      257: 7272:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7273:          call random_number(B(i))
call    0 returned 100%
      257: 7274:          B(i) = B(i) * W + S
        -: 7275:      enddo
        -: 7276:
        -: 7277:!dvm$ actual(B)
        -: 7278:!dvm$ region
        -: 7279:!dvm$ parallel (i) on A(i)
      257: 7280:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7281:          A(i) = dexp(B(i))
        -: 7282:      enddo
        -: 7283:!dvm$ end region
        -: 7284:!dvm$ get_actual(A)
        -: 7285:
        -: 7286:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7287:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7288:          tmp = dexp(B(i))
      257: 7289:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7290:              erri = min(erri, i)
        -: 7291:          endif
        -: 7292:      enddo
        -: 7293:
        1: 7294:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7295:          call ansyes(tname)
call    0 returned 100%
        -: 7296:      else
    #####: 7297:          call ansno(tname)
call    0 never executed
        -: 7298:      endif 
        -: 7299:      
       1*: 7300:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7301:
        -: 7302:C -------------------------------------------------
        -: 7303:
function exp6_ called 1 returned 100% blocks executed 80%
        1: 7304:      subroutine exp6
        -: 7305:      integer, parameter :: N = 256, ER = N + 1, W = 4, S = -2
        -: 7306:      real, parameter :: EPS = 1e-6
        -: 7307:      character*24 tname
        -: 7308:      complex A(N), B(N)
        -: 7309:      integer erri, i, asize, clock
        1: 7310:      integer, allocatable :: seed(:)
        -: 7311:      real x, y
        -: 7312:      complex tmp
        -: 7313:
        -: 7314:!dvm$ distribute A(BLOCK)
        -: 7315:
        1: 7316:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7317:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7318:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7319:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7320:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7321:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7322:
        1: 7323:      tname = 'cexp_complexf'
        1: 7324:      erri = ER
        -: 7325:
      257: 7326:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7327:          call random_number(x)
call    0 returned 100%
      256: 7328:          call random_number(y)
call    0 returned 100%
      257: 7329:          B(i) = cmplx(x * W + S, y * W + S)
        -: 7330:      enddo
        -: 7331:
        -: 7332:!dvm$ actual(B)
        -: 7333:!dvm$ region
        -: 7334:!dvm$ parallel (i) on A(i)
      257: 7335:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7336:          A(i) = cexp(B(i))
        -: 7337:      enddo
        -: 7338:!dvm$ end region
        -: 7339:!dvm$ get_actual(A)
        -: 7340:
        -: 7341:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7342:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7343:          tmp = cexp(B(i))
      257: 7344:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7345:              erri = min(erri, i)
        -: 7346:          endif
        -: 7347:      enddo
        -: 7348:
        1: 7349:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7350:          call ansyes(tname)
call    0 returned 100%
        -: 7351:      else
    #####: 7352:          call ansno(tname)
call    0 never executed
        -: 7353:      endif 
        -: 7354:      
       1*: 7355:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7356:
        -: 7357:C -------------------------------------------------
        -: 7358:
function exp7_ called 1 returned 100% blocks executed 80%
        1: 7359:      subroutine exp7
        -: 7360:      integer, parameter :: N = 256, ER = N + 1, W = 4, S = -2
        -: 7361:      real*8, parameter :: EPS = 1d-15
        -: 7362:      character*24 tname
        -: 7363:      double complex A(N), B(N)
        -: 7364:      integer erri, i, asize, clock
        1: 7365:      integer, allocatable :: seed(:)
        -: 7366:      real*8 x, y
        -: 7367:      double complex tmp
        -: 7368:
        -: 7369:!dvm$ distribute A(BLOCK)
        -: 7370:
        1: 7371:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7372:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7373:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7374:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7375:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7376:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7377:
        1: 7378:      tname = 'cdexp_complexd'
        1: 7379:      erri = ER
        -: 7380:
      257: 7381:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7382:          call random_number(x)
call    0 returned 100%
      256: 7383:          call random_number(y)
call    0 returned 100%
      257: 7384:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 7385:      enddo
        -: 7386:
        -: 7387:!dvm$ actual(B)
        -: 7388:!dvm$ region
        -: 7389:!dvm$ parallel (i) on A(i)
      257: 7390:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7391:          A(i) = cdexp(B(i))
        -: 7392:      enddo
        -: 7393:!dvm$ end region
        -: 7394:!dvm$ get_actual(A)
        -: 7395:
        -: 7396:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7397:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7398:          tmp = cdexp(B(i))
      257: 7399:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7400:              erri = min(erri, i)
        -: 7401:          endif
        -: 7402:      enddo
        -: 7403:
        1: 7404:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7405:          call ansyes(tname)
call    0 returned 100%
        -: 7406:      else
    #####: 7407:          call ansno(tname)
call    0 never executed
        -: 7408:      endif 
        -: 7409:      
       1*: 7410:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7411:
        -: 7412:C -------------------------------------------------
        -: 7413:
function exp8_ called 1 returned 100% blocks executed 80%
        1: 7414:      subroutine exp8
        -: 7415:      integer, parameter :: N = 256, ER = N + 1, W = 4, S = -2
        -: 7416:      real*8, parameter :: EPS = 1d-15
        -: 7417:      character*24 tname
        -: 7418:      double complex A(N), B(N)
        -: 7419:      integer erri, i, asize, clock
        1: 7420:      integer, allocatable :: seed(:)
        -: 7421:      real*8 x, y
        -: 7422:      double complex tmp
        -: 7423:
        -: 7424:!dvm$ distribute A(BLOCK)
        -: 7425:
        1: 7426:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7427:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7428:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7429:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7430:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7431:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7432:
        1: 7433:      tname = 'zexp_complexd'
        1: 7434:      erri = ER
        -: 7435:
      257: 7436:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7437:          call random_number(x)
call    0 returned 100%
      256: 7438:          call random_number(y)
call    0 returned 100%
      257: 7439:          B(i) = dcmplx(x * W + S, y * W + S)
        -: 7440:      enddo
        -: 7441:
        -: 7442:!dvm$ actual(B)
        -: 7443:!dvm$ region
        -: 7444:!dvm$ parallel (i) on A(i)
      257: 7445:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7446:          A(i) = zexp(B(i))
        -: 7447:      enddo
        -: 7448:!dvm$ end region
        -: 7449:!dvm$ get_actual(A)
        -: 7450:
        -: 7451:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7452:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7453:          tmp = zexp(B(i))
      257: 7454:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7455:              erri = min(erri, i)
        -: 7456:          endif
        -: 7457:      enddo
        -: 7458:
        1: 7459:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7460:          call ansyes(tname)
call    0 returned 100%
        -: 7461:      else
    #####: 7462:          call ansno(tname)
call    0 never executed
        -: 7463:      endif 
        -: 7464:      
       1*: 7465:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7466:
        -: 7467:C -------------------------------------------------
        -: 7468:
function gamma1_ called 1 returned 100% blocks executed 79%
        1: 7469:      subroutine gamma1
        -: 7470:      integer, parameter :: N = 256, ER = N + 1, W = 3, S = 1
        -: 7471:      real, parameter :: EPS = 1e-6
        -: 7472:      character*24 tname
        -: 7473:      real A(N), B(N)
        -: 7474:      integer erri, i, asize, clock
        1: 7475:      integer, allocatable :: seed(:)
        -: 7476:      real tmp
        -: 7477:
        -: 7478:!dvm$ distribute A(BLOCK)
        -: 7479:
        1: 7480:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7481:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7482:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7483:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7484:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7485:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7486:
        1: 7487:      tname = 'gamma_float'
        1: 7488:      erri = ER
        -: 7489:
      257: 7490:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7491:          call random_number(B(i))
call    0 returned 100%
      257: 7492:          B(i) = B(i) * W + S
        -: 7493:      enddo
        -: 7494:
        -: 7495:!dvm$ actual(B)
        -: 7496:!dvm$ region
        -: 7497:!dvm$ parallel (i) on A(i)
      257: 7498:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7499:          A(i) = gamma(B(i))
        -: 7500:      enddo
        -: 7501:!dvm$ end region
        -: 7502:!dvm$ get_actual(A)
        -: 7503:
        -: 7504:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7505:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7506:          tmp = gamma(B(i))
      257: 7507:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7508:              erri = min(erri, i)
        -: 7509:          endif
        -: 7510:      enddo
        -: 7511:
        1: 7512:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7513:          call ansyes(tname)
call    0 returned 100%
        -: 7514:      else
    #####: 7515:          call ansno(tname)
call    0 never executed
        -: 7516:      endif 
        -: 7517:      
       1*: 7518:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7519:
        -: 7520:C -------------------------------------------------
        -: 7521:
function gamma2_ called 1 returned 100% blocks executed 79%
        1: 7522:      subroutine gamma2
        -: 7523:      integer, parameter :: N = 256, ER = N + 1, W = 3, S = 1
        -: 7524:      real*8, parameter :: EPS = 1d-15
        -: 7525:      character*24 tname
        -: 7526:      real*8 A(N), B(N)
        -: 7527:      integer erri, i, asize, clock
        1: 7528:      integer, allocatable :: seed(:)
        -: 7529:      real*8 tmp
        -: 7530:
        -: 7531:!dvm$ distribute A(BLOCK)
        -: 7532:
        1: 7533:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7534:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7535:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7536:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7537:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7538:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7539:
        1: 7540:      tname = 'gamma_double'
        1: 7541:      erri = ER
        -: 7542:
      257: 7543:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7544:          call random_number(B(i))
call    0 returned 100%
      257: 7545:          B(i) = B(i) * W + S
        -: 7546:      enddo
        -: 7547:
        -: 7548:!dvm$ actual(B)
        -: 7549:!dvm$ region
        -: 7550:!dvm$ parallel (i) on A(i)
      257: 7551:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7552:          A(i) = gamma(B(i))
        -: 7553:      enddo
        -: 7554:!dvm$ end region
        -: 7555:!dvm$ get_actual(A)
        -: 7556:
        -: 7557:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7558:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7559:          tmp = gamma(B(i))
      257: 7560:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7561:              erri = min(erri, i)
        -: 7562:          endif
        -: 7563:      enddo
        -: 7564:
        1: 7565:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7566:          call ansyes(tname)
call    0 returned 100%
        -: 7567:      else
    #####: 7568:          call ansno(tname)
call    0 never executed
        -: 7569:      endif 
        -: 7570:      
       1*: 7571:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7572:
        -: 7573:C -------------------------------------------------
        -: 7574:
function hypot1_ called 1 returned 100% blocks executed 80%
        1: 7575:      subroutine hypot1
        -: 7576:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 7577:      real, parameter :: EPS = 1e-6
        -: 7578:      character*24 tname
        -: 7579:      real A(N), B(N), C(N)
        -: 7580:      integer erri, i, asize, clock
        1: 7581:      integer, allocatable :: seed(:)
        -: 7582:      real tmp
        -: 7583:
        -: 7584:!dvm$ distribute A(BLOCK)
        -: 7585:
        1: 7586:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7587:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7588:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7589:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7590:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7591:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7592:
        1: 7593:      tname = 'hypot_float'
        1: 7594:      erri = ER
        -: 7595:
      257: 7596:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7597:          call random_number(B(i))
call    0 returned 100%
      256: 7598:          B(i) = B(i) * W + S
      256: 7599:          call random_number(C(i))
call    0 returned 100%
      257: 7600:          C(i) = C(i) * W + S
        -: 7601:      enddo
        -: 7602:
        -: 7603:!dvm$ actual(B, C)
        -: 7604:!dvm$ region
        -: 7605:!dvm$ parallel (i) on A(i)
      257: 7606:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7607:          A(i) = hypot(B(i), C(i))
        -: 7608:      enddo
        -: 7609:!dvm$ end region
        -: 7610:!dvm$ get_actual(A)
        -: 7611:
        -: 7612:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7613:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7614:          tmp = hypot(B(i), C(i))
      257: 7615:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7616:              erri = min(erri, i)
        -: 7617:          endif
        -: 7618:      enddo
        -: 7619:
        1: 7620:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7621:          call ansyes(tname)
call    0 returned 100%
        -: 7622:      else
    #####: 7623:          call ansno(tname)
call    0 never executed
        -: 7624:      endif 
        -: 7625:      
       1*: 7626:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7627:
        -: 7628:C -------------------------------------------------
        -: 7629:
function hypot2_ called 1 returned 100% blocks executed 80%
        1: 7630:      subroutine hypot2
        -: 7631:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 7632:      real*8, parameter :: EPS = 1d-15
        -: 7633:      character*24 tname
        -: 7634:      real*8 A(N), B(N), C(N)
        -: 7635:      integer erri, i, asize, clock
        1: 7636:      integer, allocatable :: seed(:)
        -: 7637:      real*8 tmp
        -: 7638:
        -: 7639:!dvm$ distribute A(BLOCK)
        -: 7640:
        1: 7641:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7642:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7643:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7644:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7645:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7646:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7647:
        1: 7648:      tname = 'hypot_double'
        1: 7649:      erri = ER
        -: 7650:
      257: 7651:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7652:          call random_number(B(i))
call    0 returned 100%
      256: 7653:          B(i) = B(i) * W + S
      256: 7654:          call random_number(C(i))
call    0 returned 100%
      257: 7655:          C(i) = C(i) * W + S
        -: 7656:      enddo
        -: 7657:
        -: 7658:!dvm$ actual(B, C)
        -: 7659:!dvm$ region
        -: 7660:!dvm$ parallel (i) on A(i)
      257: 7661:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7662:          A(i) = hypot(B(i), C(i))
        -: 7663:      enddo
        -: 7664:!dvm$ end region
        -: 7665:!dvm$ get_actual(A)
        -: 7666:
        -: 7667:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257: 7668:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256: 7669:          tmp = hypot(B(i), C(i))
      257: 7670:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7671:              erri = min(erri, i)
        -: 7672:          endif
        -: 7673:      enddo
        -: 7674:
        1: 7675:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7676:          call ansyes(tname)
call    0 returned 100%
        -: 7677:      else
    #####: 7678:          call ansno(tname)
call    0 never executed
        -: 7679:      endif 
        -: 7680:      
       1*: 7681:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7682:
        -: 7683:C -------------------------------------------------
        -: 7684:
function iand1_ called 1 returned 100% blocks executed 81%
        1: 7685:      subroutine iand1
        -: 7686:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 7687:      character*24 tname
        -: 7688:      integer*1 A(N), B(N), C(N)
        -: 7689:      integer erri, i, asize, clock
        1: 7690:      integer, allocatable :: seed(:)
        -: 7691:      real tmp
        -: 7692:
        -: 7693:!dvm$ distribute A(BLOCK)
        -: 7694:
        1: 7695:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7696:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7697:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7698:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7699:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7700:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7701:
        1: 7702:      tname = 'iand_char'
        1: 7703:      erri = ER
        -: 7704:
      257: 7705:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 7706:          call random_number(tmp)
call    0 returned 100%
      256: 7707:          B(i) = int(tmp * W + S)
      256: 7708:          call random_number(tmp)
call    0 returned 100%
      257: 7709:          C(i) = int(tmp * W + S)
        -: 7710:      enddo
        -: 7711:
        -: 7712:!dvm$ actual(B, C)
        -: 7713:!dvm$ region
        -: 7714:!dvm$ parallel (i) on A(i)
      257: 7715:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 7716:          A(i) = iand(B(i), C(i))
        -: 7717:      enddo
        -: 7718:!dvm$ end region
        -: 7719:!dvm$ get_actual(A)
        -: 7720:
        -: 7721:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 7722:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7723:          if (iand(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7724:              erri = min(erri, i)
        -: 7725:          endif
        -: 7726:      enddo
        -: 7727:
        1: 7728:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7729:          call ansyes(tname)
call    0 returned 100%
        -: 7730:      else
    #####: 7731:          call ansno(tname)
call    0 never executed
        -: 7732:      endif 
        -: 7733:      
       1*: 7734:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7735:
        -: 7736:C -------------------------------------------------
        -: 7737:
function iand2_ called 1 returned 100% blocks executed 81%
        1: 7738:      subroutine iand2
        -: 7739:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 7740:      character*24 tname
        -: 7741:      integer*2 A(N), B(N), C(N)
        -: 7742:      integer erri, i, asize, clock
        1: 7743:      integer, allocatable :: seed(:)
        -: 7744:      real tmp
        -: 7745:
        -: 7746:!dvm$ distribute A(BLOCK)
        -: 7747:
        1: 7748:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7749:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7750:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7751:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7752:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7753:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7754:
        1: 7755:      tname = 'iand_short'
        1: 7756:      erri = ER
        -: 7757:
      257: 7758:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 7759:          call random_number(tmp)
call    0 returned 100%
      256: 7760:          B(i) = int(tmp * W + S)
      256: 7761:          call random_number(tmp)
call    0 returned 100%
      257: 7762:          C(i) = int(tmp * W + S)
        -: 7763:      enddo
        -: 7764:
        -: 7765:!dvm$ actual(B, C)
        -: 7766:!dvm$ region
        -: 7767:!dvm$ parallel (i) on A(i)
      257: 7768:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 7769:          A(i) = iand(B(i), C(i))
        -: 7770:      enddo
        -: 7771:!dvm$ end region
        -: 7772:!dvm$ get_actual(A)
        -: 7773:
        -: 7774:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 7775:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7776:          if (iand(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7777:              erri = min(erri, i)
        -: 7778:          endif
        -: 7779:      enddo
        -: 7780:
        1: 7781:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7782:          call ansyes(tname)
call    0 returned 100%
        -: 7783:      else
    #####: 7784:          call ansno(tname)
call    0 never executed
        -: 7785:      endif 
        -: 7786:      
       1*: 7787:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7788:
        -: 7789:C -------------------------------------------------
        -: 7790:
function iand3_ called 1 returned 100% blocks executed 81%
        1: 7791:      subroutine iand3
        -: 7792:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 7793:      character*24 tname
        -: 7794:      integer*4 A(N), B(N), C(N)
        -: 7795:      integer erri, i, asize, clock
        1: 7796:      integer, allocatable :: seed(:)
        -: 7797:      real tmp
        -: 7798:
        -: 7799:!dvm$ distribute A(BLOCK)
        -: 7800:
        1: 7801:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7802:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7803:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7804:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7805:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7806:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7807:
        1: 7808:      tname = 'iand_long'
        1: 7809:      erri = ER
        -: 7810:
      257: 7811:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 7812:          call random_number(tmp)
call    0 returned 100%
      256: 7813:          B(i) = int(tmp * W + S)
      256: 7814:          call random_number(tmp)
call    0 returned 100%
      257: 7815:          C(i) = int(tmp * W + S)
        -: 7816:      enddo
        -: 7817:
        -: 7818:!dvm$ actual(B, C)
        -: 7819:!dvm$ region
        -: 7820:!dvm$ parallel (i) on A(i)
      257: 7821:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 7822:          A(i) = iand(B(i), C(i))
        -: 7823:      enddo
        -: 7824:!dvm$ end region
        -: 7825:!dvm$ get_actual(A)
        -: 7826:
        -: 7827:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 7828:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7829:          if (iand(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7830:              erri = min(erri, i)
        -: 7831:          endif
        -: 7832:      enddo
        -: 7833:
        1: 7834:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7835:          call ansyes(tname)
call    0 returned 100%
        -: 7836:      else
    #####: 7837:          call ansno(tname)
call    0 never executed
        -: 7838:      endif 
        -: 7839:      
       1*: 7840:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7841:
        -: 7842:C -------------------------------------------------
        -: 7843:
function iand4_ called 1 returned 100% blocks executed 81%
        1: 7844:      subroutine iand4
        -: 7845:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 7846:      character*24 tname
        -: 7847:      integer*8 A(N), B(N), C(N)
        -: 7848:      integer erri, i, asize, clock
        1: 7849:      integer, allocatable :: seed(:)
        -: 7850:      real tmp
        -: 7851:
        -: 7852:!dvm$ distribute A(BLOCK)
        -: 7853:
        1: 7854:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7855:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7856:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7857:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7858:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7859:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7860:
        1: 7861:      tname = 'iand_longlong'
        1: 7862:      erri = ER
        -: 7863:
      257: 7864:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 7865:          call random_number(tmp)
call    0 returned 100%
      256: 7866:          B(i) = int(tmp * W + S)
      256: 7867:          call random_number(tmp)
call    0 returned 100%
      257: 7868:          C(i) = int(tmp * W + S)
        -: 7869:      enddo
        -: 7870:
        -: 7871:!dvm$ actual(B, C)
        -: 7872:!dvm$ region
        -: 7873:!dvm$ parallel (i) on A(i)
      257: 7874:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 7875:          A(i) = iand(B(i), C(i))
        -: 7876:      enddo
        -: 7877:!dvm$ end region
        -: 7878:!dvm$ get_actual(A)
        -: 7879:
        -: 7880:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 7881:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7882:          if (iand(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7883:              erri = min(erri, i)
        -: 7884:          endif
        -: 7885:      enddo
        -: 7886:
        1: 7887:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7888:          call ansyes(tname)
call    0 returned 100%
        -: 7889:      else
    #####: 7890:          call ansno(tname)
call    0 never executed
        -: 7891:      endif 
        -: 7892:      
       1*: 7893:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7894:
        -: 7895:C -------------------------------------------------
        -: 7896:
function iand5_ called 1 returned 100% blocks executed 81%
        1: 7897:      subroutine iand5
        -: 7898:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 7899:      character*24 tname
        -: 7900:      integer*1 A(N), B(N), C(N)
        -: 7901:      integer erri, i, asize, clock
        1: 7902:      integer, allocatable :: seed(:)
        -: 7903:      real tmp
        -: 7904:
        -: 7905:!dvm$ distribute A(BLOCK)
        -: 7906:
        1: 7907:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7908:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7909:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7910:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7911:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7912:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7913:
        1: 7914:      tname = 'and_char'
        1: 7915:      erri = ER
        -: 7916:
      257: 7917:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 7918:          call random_number(tmp)
call    0 returned 100%
      256: 7919:          B(i) = int(tmp * W + S)
      256: 7920:          call random_number(tmp)
call    0 returned 100%
      257: 7921:          C(i) = int(tmp * W + S)
        -: 7922:      enddo
        -: 7923:
        -: 7924:!dvm$ actual(B, C)
        -: 7925:!dvm$ region
        -: 7926:!dvm$ parallel (i) on A(i)
      257: 7927:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 7928:          A(i) = and(B(i), C(i))
        -: 7929:      enddo
        -: 7930:!dvm$ end region
        -: 7931:!dvm$ get_actual(A)
        -: 7932:
        -: 7933:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 7934:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7935:          if (and(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7936:              erri = min(erri, i)
        -: 7937:          endif
        -: 7938:      enddo
        -: 7939:
        1: 7940:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7941:          call ansyes(tname)
call    0 returned 100%
        -: 7942:      else
    #####: 7943:          call ansno(tname)
call    0 never executed
        -: 7944:      endif 
        -: 7945:      
       1*: 7946:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 7947:
        -: 7948:C -------------------------------------------------
        -: 7949:
function iand6_ called 1 returned 100% blocks executed 81%
        1: 7950:      subroutine iand6
        -: 7951:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 7952:      character*24 tname
        -: 7953:      integer*2 A(N), B(N), C(N)
        -: 7954:      integer erri, i, asize, clock
        1: 7955:      integer, allocatable :: seed(:)
        -: 7956:      real tmp
        -: 7957:
        -: 7958:!dvm$ distribute A(BLOCK)
        -: 7959:
        1: 7960:      call random_seed(size = asize)
call    0 returned 100%
       3*: 7961:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 7962:      call system_clock(count = clock)
call    0 returned 100%
      34*: 7963:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 7964:      call random_seed(put = seed)
call    0 returned 100%
       1*: 7965:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 7966:
        1: 7967:      tname = 'and_short'
        1: 7968:      erri = ER
        -: 7969:
      257: 7970:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 7971:          call random_number(tmp)
call    0 returned 100%
      256: 7972:          B(i) = int(tmp * W + S)
      256: 7973:          call random_number(tmp)
call    0 returned 100%
      257: 7974:          C(i) = int(tmp * W + S)
        -: 7975:      enddo
        -: 7976:
        -: 7977:!dvm$ actual(B, C)
        -: 7978:!dvm$ region
        -: 7979:!dvm$ parallel (i) on A(i)
      257: 7980:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 7981:          A(i) = and(B(i), C(i))
        -: 7982:      enddo
        -: 7983:!dvm$ end region
        -: 7984:!dvm$ get_actual(A)
        -: 7985:
        -: 7986:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 7987:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 7988:          if (and(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 7989:              erri = min(erri, i)
        -: 7990:          endif
        -: 7991:      enddo
        -: 7992:
        1: 7993:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 7994:          call ansyes(tname)
call    0 returned 100%
        -: 7995:      else
    #####: 7996:          call ansno(tname)
call    0 never executed
        -: 7997:      endif 
        -: 7998:      
       1*: 7999:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8000:
        -: 8001:C -------------------------------------------------
        -: 8002:
function iand7_ called 1 returned 100% blocks executed 81%
        1: 8003:      subroutine iand7
        -: 8004:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8005:      character*24 tname
        -: 8006:      integer*4 A(N), B(N), C(N)
        -: 8007:      integer erri, i, asize, clock
        1: 8008:      integer, allocatable :: seed(:)
        -: 8009:      real tmp
        -: 8010:
        -: 8011:!dvm$ distribute A(BLOCK)
        -: 8012:
        1: 8013:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8014:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8015:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8016:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8017:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8018:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8019:
        1: 8020:      tname = 'and_long'
        1: 8021:      erri = ER
        -: 8022:
      257: 8023:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8024:          call random_number(tmp)
call    0 returned 100%
      256: 8025:          B(i) = int(tmp * W + S)
      256: 8026:          call random_number(tmp)
call    0 returned 100%
      257: 8027:          C(i) = int(tmp * W + S)
        -: 8028:      enddo
        -: 8029:
        -: 8030:!dvm$ actual(B, C)
        -: 8031:!dvm$ region
        -: 8032:!dvm$ parallel (i) on A(i)
      257: 8033:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8034:          A(i) = and(B(i), C(i))
        -: 8035:      enddo
        -: 8036:!dvm$ end region
        -: 8037:!dvm$ get_actual(A)
        -: 8038:
        -: 8039:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8040:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8041:          if (and(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8042:              erri = min(erri, i)
        -: 8043:          endif
        -: 8044:      enddo
        -: 8045:
        1: 8046:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8047:          call ansyes(tname)
call    0 returned 100%
        -: 8048:      else
    #####: 8049:          call ansno(tname)
call    0 never executed
        -: 8050:      endif 
        -: 8051:      
       1*: 8052:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8053:
        -: 8054:C -------------------------------------------------
        -: 8055:
function iand8_ called 1 returned 100% blocks executed 81%
        1: 8056:      subroutine iand8
        -: 8057:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8058:      character*24 tname
        -: 8059:      integer*8 A(N), B(N), C(N)
        -: 8060:      integer erri, i, asize, clock
        1: 8061:      integer, allocatable :: seed(:)
        -: 8062:      real tmp
        -: 8063:
        -: 8064:!dvm$ distribute A(BLOCK)
        -: 8065:
        1: 8066:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8067:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8068:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8069:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8070:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8071:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8072:
        1: 8073:      tname = 'and_longlong'
        1: 8074:      erri = ER
        -: 8075:
      257: 8076:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8077:          call random_number(tmp)
call    0 returned 100%
      256: 8078:          B(i) = int(tmp * W + S)
      256: 8079:          call random_number(tmp)
call    0 returned 100%
      257: 8080:          C(i) = int(tmp * W + S)
        -: 8081:      enddo
        -: 8082:
        -: 8083:!dvm$ actual(B, C)
        -: 8084:!dvm$ region
        -: 8085:!dvm$ parallel (i) on A(i)
      257: 8086:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8087:          A(i) = and(B(i), C(i))
        -: 8088:      enddo
        -: 8089:!dvm$ end region
        -: 8090:!dvm$ get_actual(A)
        -: 8091:
        -: 8092:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8093:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8094:          if (and(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8095:              erri = min(erri, i)
        -: 8096:          endif
        -: 8097:      enddo
        -: 8098:
        1: 8099:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8100:          call ansyes(tname)
call    0 returned 100%
        -: 8101:      else
    #####: 8102:          call ansno(tname)
call    0 never executed
        -: 8103:      endif 
        -: 8104:      
       1*: 8105:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8106:
        -: 8107:C -------------------------------------------------
        -: 8108:
function ibclr1_ called 1 returned 100% blocks executed 81%
        1: 8109:      subroutine ibclr1
        -: 8110:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8111:      character*24 tname
        -: 8112:      integer*1 A(N), B(N), C(N)
        -: 8113:      integer erri, i, asize, clock
        1: 8114:      integer, allocatable :: seed(:)
        -: 8115:      real tmp
        -: 8116:
        -: 8117:!dvm$ distribute A(BLOCK)
        -: 8118:
        1: 8119:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8120:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8121:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8122:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8123:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8124:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8125:
        1: 8126:      tname = 'ibclr_char'
        1: 8127:      erri = ER
        -: 8128:
      257: 8129:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8130:          call random_number(tmp)
call    0 returned 100%
      256: 8131:          B(i) = int(tmp * W + S)
      256: 8132:          call random_number(tmp)
call    0 returned 100%
      257: 8133:          C(i) = int(tmp * bit_size(C(i)))
        -: 8134:      enddo
        -: 8135:
        -: 8136:!dvm$ actual(B, C)
        -: 8137:!dvm$ region
        -: 8138:!dvm$ parallel (i) on A(i)
      257: 8139:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8140:          A(i) = ibclr(B(i), C(i))
        -: 8141:      enddo
        -: 8142:!dvm$ end region
        -: 8143:!dvm$ get_actual(A)
        -: 8144:
        -: 8145:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8146:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8147:          if (ibclr(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8148:              erri = min(erri, i)
        -: 8149:          endif
        -: 8150:      enddo
        -: 8151:
        1: 8152:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8153:          call ansyes(tname)
call    0 returned 100%
        -: 8154:      else
    #####: 8155:          call ansno(tname)
call    0 never executed
        -: 8156:      endif 
        -: 8157:      
       1*: 8158:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8159:
        -: 8160:C -------------------------------------------------
        -: 8161:
function ibclr2_ called 1 returned 100% blocks executed 81%
        1: 8162:      subroutine ibclr2
        -: 8163:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8164:      character*24 tname
        -: 8165:      integer*2 A(N), B(N), C(N)
        -: 8166:      integer erri, i, asize, clock
        1: 8167:      integer, allocatable :: seed(:)
        -: 8168:      real tmp
        -: 8169:
        -: 8170:!dvm$ distribute A(BLOCK)
        -: 8171:
        1: 8172:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8173:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8174:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8175:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8176:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8177:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8178:
        1: 8179:      tname = 'ibclr_short'
        1: 8180:      erri = ER
        -: 8181:
      257: 8182:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8183:          call random_number(tmp)
call    0 returned 100%
      256: 8184:          B(i) = int(tmp * W + S)
      256: 8185:          call random_number(tmp)
call    0 returned 100%
      257: 8186:          C(i) = int(tmp * bit_size(C(i)))
        -: 8187:      enddo
        -: 8188:
        -: 8189:!dvm$ actual(B, C)
        -: 8190:!dvm$ region
        -: 8191:!dvm$ parallel (i) on A(i)
      257: 8192:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8193:          A(i) = ibclr(B(i), C(i))
        -: 8194:      enddo
        -: 8195:!dvm$ end region
        -: 8196:!dvm$ get_actual(A)
        -: 8197:
        -: 8198:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8199:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8200:          if (ibclr(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8201:              erri = min(erri, i)
        -: 8202:          endif
        -: 8203:      enddo
        -: 8204:
        1: 8205:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8206:          call ansyes(tname)
call    0 returned 100%
        -: 8207:      else
    #####: 8208:          call ansno(tname)
call    0 never executed
        -: 8209:      endif 
        -: 8210:      
       1*: 8211:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8212:
        -: 8213:C -------------------------------------------------
        -: 8214:
function ibclr3_ called 1 returned 100% blocks executed 81%
        1: 8215:      subroutine ibclr3
        -: 8216:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8217:      character*24 tname
        -: 8218:      integer*4 A(N), B(N), C(N)
        -: 8219:      integer erri, i, asize, clock
        1: 8220:      integer, allocatable :: seed(:)
        -: 8221:      real tmp
        -: 8222:
        -: 8223:!dvm$ distribute A(BLOCK)
        -: 8224:
        1: 8225:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8226:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8227:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8228:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8229:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8230:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8231:
        1: 8232:      tname = 'ibclr_long'
        1: 8233:      erri = ER
        -: 8234:
      257: 8235:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8236:          call random_number(tmp)
call    0 returned 100%
      256: 8237:          B(i) = int(tmp * W + S)
      256: 8238:          call random_number(tmp)
call    0 returned 100%
      257: 8239:          C(i) = int(tmp * bit_size(C(i)))
        -: 8240:      enddo
        -: 8241:
        -: 8242:!dvm$ actual(B, C)
        -: 8243:!dvm$ region
        -: 8244:!dvm$ parallel (i) on A(i)
      257: 8245:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8246:          A(i) = ibclr(B(i), C(i))
        -: 8247:      enddo
        -: 8248:!dvm$ end region
        -: 8249:!dvm$ get_actual(A)
        -: 8250:
        -: 8251:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8252:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8253:          if (ibclr(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8254:              erri = min(erri, i)
        -: 8255:          endif
        -: 8256:      enddo
        -: 8257:
        1: 8258:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8259:          call ansyes(tname)
call    0 returned 100%
        -: 8260:      else
    #####: 8261:          call ansno(tname)
call    0 never executed
        -: 8262:      endif 
        -: 8263:      
       1*: 8264:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8265:
        -: 8266:C -------------------------------------------------
        -: 8267:
function ibclr4_ called 1 returned 100% blocks executed 81%
        1: 8268:      subroutine ibclr4
        -: 8269:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8270:      character*24 tname
        -: 8271:      integer*8 A(N), B(N), C(N)
        -: 8272:      integer erri, i, asize, clock
        1: 8273:      integer, allocatable :: seed(:)
        -: 8274:      real tmp
        -: 8275:
        -: 8276:!dvm$ distribute A(BLOCK)
        -: 8277:
        1: 8278:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8279:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8280:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8281:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8282:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8283:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8284:
        1: 8285:      tname = 'ibclr_longlong'
        1: 8286:      erri = ER
        -: 8287:
      257: 8288:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8289:          call random_number(tmp)
call    0 returned 100%
      256: 8290:          B(i) = int(tmp * W + S)
      256: 8291:          call random_number(tmp)
call    0 returned 100%
      257: 8292:          C(i) = int(tmp * bit_size(C(i)))
        -: 8293:      enddo
        -: 8294:
        -: 8295:!dvm$ actual(B, C)
        -: 8296:!dvm$ region
        -: 8297:!dvm$ parallel (i) on A(i)
      257: 8298:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8299:          A(i) = ibclr(B(i), C(i))
        -: 8300:      enddo
        -: 8301:!dvm$ end region
        -: 8302:!dvm$ get_actual(A)
        -: 8303:
        -: 8304:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8305:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8306:          if (ibclr(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8307:              erri = min(erri, i)
        -: 8308:          endif
        -: 8309:      enddo
        -: 8310:
        1: 8311:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8312:          call ansyes(tname)
call    0 returned 100%
        -: 8313:      else
    #####: 8314:          call ansno(tname)
call    0 never executed
        -: 8315:      endif 
        -: 8316:      
       1*: 8317:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8318:
        -: 8319:C -------------------------------------------------
        -: 8320:
function ibits1_ called 1 returned 100% blocks executed 82%
        1: 8321:      subroutine ibits1
        -: 8322:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8323:      character*24 tname
        -: 8324:      integer*1 A(N), B(N), C(N), D(N)
        -: 8325:      integer erri, i, asize, clock
        1: 8326:      integer, allocatable :: seed(:)
        -: 8327:      real tmp
        -: 8328:
        -: 8329:!dvm$ distribute A(BLOCK)
        -: 8330:
        1: 8331:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8332:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8333:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8334:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8335:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8336:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8337:
        1: 8338:      tname = 'ibits_char'
        1: 8339:      erri = ER
        -: 8340:
      257: 8341:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8342:          call random_number(tmp)
call    0 returned 100%
      256: 8343:          B(i) = int(tmp * W + S)
      256: 8344:          call random_number(tmp)
call    0 returned 100%
      256: 8345:          D(i) = int(tmp * (bit_size(D(i)) + 1))
      256: 8346:          call random_number(tmp)
call    0 returned 100%
      257: 8347:          C(i) = int(tmp * (bit_size(C(i)) + 1 - D(i)))
        -: 8348:      enddo
        -: 8349:
        -: 8350:!dvm$ actual(B, C, D)
        -: 8351:!dvm$ region
        -: 8352:!dvm$ parallel (i) on A(i)
      257: 8353:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8354:          A(i) = ibits(B(i), C(i), D(i))
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
        -: 8355:      enddo
        -: 8356:!dvm$ end region
        -: 8357:!dvm$ get_actual(A)
        -: 8358:
        -: 8359:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8360:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8361:          if (ibits(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 8362:              erri = min(erri, i)
        -: 8363:          endif
        -: 8364:      enddo
        -: 8365:
        1: 8366:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8367:          call ansyes(tname)
call    0 returned 100%
        -: 8368:      else
    #####: 8369:          call ansno(tname)
call    0 never executed
        -: 8370:      endif 
        -: 8371:      
       1*: 8372:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8373:
        -: 8374:C -------------------------------------------------
        -: 8375:
function ibits2_ called 1 returned 100% blocks executed 82%
        1: 8376:      subroutine ibits2
        -: 8377:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8378:      character*24 tname
        -: 8379:      integer*2 A(N), B(N), C(N), D(N)
        -: 8380:      integer erri, i, asize, clock
        1: 8381:      integer, allocatable :: seed(:)
        -: 8382:      real tmp
        -: 8383:
        -: 8384:!dvm$ distribute A(BLOCK)
        -: 8385:
        1: 8386:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8387:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8388:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8389:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8390:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8391:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8392:
        1: 8393:      tname = 'ibits_short'
        1: 8394:      erri = ER
        -: 8395:
      257: 8396:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8397:          call random_number(tmp)
call    0 returned 100%
      256: 8398:          B(i) = int(tmp * W + S)
      256: 8399:          call random_number(tmp)
call    0 returned 100%
      256: 8400:          D(i) = int(tmp * (bit_size(D(i)) + 1))
      256: 8401:          call random_number(tmp)
call    0 returned 100%
      257: 8402:          C(i) = int(tmp * (bit_size(C(i)) + 1 - D(i)))
        -: 8403:      enddo
        -: 8404:
        -: 8405:!dvm$ actual(B, C, D)
        -: 8406:!dvm$ region
        -: 8407:!dvm$ parallel (i) on A(i)
      257: 8408:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8409:          A(i) = ibits(B(i), C(i), D(i))
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -: 8410:      enddo
        -: 8411:!dvm$ end region
        -: 8412:!dvm$ get_actual(A)
        -: 8413:
        -: 8414:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8415:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8416:          if (ibits(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 8417:              erri = min(erri, i)
        -: 8418:          endif
        -: 8419:      enddo
        -: 8420:
        1: 8421:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8422:          call ansyes(tname)
call    0 returned 100%
        -: 8423:      else
    #####: 8424:          call ansno(tname)
call    0 never executed
        -: 8425:      endif 
        -: 8426:      
       1*: 8427:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8428:
        -: 8429:C -------------------------------------------------
        -: 8430:
function ibits3_ called 1 returned 100% blocks executed 82%
        1: 8431:      subroutine ibits3
        -: 8432:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8433:      character*24 tname
        -: 8434:      integer*4 A(N), B(N), C(N), D(N)
        -: 8435:      integer erri, i, asize, clock
        1: 8436:      integer, allocatable :: seed(:)
        -: 8437:      real tmp
        -: 8438:
        -: 8439:!dvm$ distribute A(BLOCK)
        -: 8440:
        1: 8441:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8442:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8443:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8444:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8445:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8446:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8447:
        1: 8448:      tname = 'ibits_long'
        1: 8449:      erri = ER
        -: 8450:
      257: 8451:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8452:          call random_number(tmp)
call    0 returned 100%
      256: 8453:          B(i) = int(tmp * W + S)
      256: 8454:          call random_number(tmp)
call    0 returned 100%
      256: 8455:          D(i) = int(tmp * (bit_size(D(i)) + 1))
      256: 8456:          call random_number(tmp)
call    0 returned 100%
      257: 8457:          C(i) = int(tmp * (bit_size(C(i)) + 1 - D(i)))
        -: 8458:      enddo
        -: 8459:
        -: 8460:!dvm$ actual(B, C, D)
        -: 8461:!dvm$ region
        -: 8462:!dvm$ parallel (i) on A(i)
      257: 8463:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8464:          A(i) = ibits(B(i), C(i), D(i))
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
        -: 8465:      enddo
        -: 8466:!dvm$ end region
        -: 8467:!dvm$ get_actual(A)
        -: 8468:
        -: 8469:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8470:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8471:          if (ibits(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 8472:              erri = min(erri, i)
        -: 8473:          endif
        -: 8474:      enddo
        -: 8475:
        1: 8476:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8477:          call ansyes(tname)
call    0 returned 100%
        -: 8478:      else
    #####: 8479:          call ansno(tname)
call    0 never executed
        -: 8480:      endif 
        -: 8481:      
       1*: 8482:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8483:
        -: 8484:C -------------------------------------------------
        -: 8485:
function ibits4_ called 1 returned 100% blocks executed 82%
        1: 8486:      subroutine ibits4
        -: 8487:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8488:      character*24 tname
        -: 8489:      integer*8 A(N), B(N), C(N), D(N)
        -: 8490:      integer erri, i, asize, clock
        1: 8491:      integer, allocatable :: seed(:)
        -: 8492:      real tmp
        -: 8493:
        -: 8494:!dvm$ distribute A(BLOCK)
        -: 8495:
        1: 8496:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8497:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8498:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8499:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8500:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8501:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8502:
        1: 8503:      tname = 'ibits_longlong'
        1: 8504:      erri = ER
        -: 8505:
      257: 8506:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8507:          call random_number(tmp)
call    0 returned 100%
      256: 8508:          B(i) = int(tmp * W + S)
      256: 8509:          call random_number(tmp)
call    0 returned 100%
      256: 8510:          D(i) = int(tmp * (bit_size(D(i)) + 1))
      256: 8511:          call random_number(tmp)
call    0 returned 100%
      257: 8512:          C(i) = int(tmp * (bit_size(C(i)) + 1 - D(i)))
        -: 8513:      enddo
        -: 8514:
        -: 8515:!dvm$ actual(B, C, D)
        -: 8516:!dvm$ region
        -: 8517:!dvm$ parallel (i) on A(i)
      257: 8518:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8519:          A(i) = ibits(B(i), C(i), D(i))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 8520:      enddo
        -: 8521:!dvm$ end region
        -: 8522:!dvm$ get_actual(A)
        -: 8523:
        -: 8524:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8525:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8526:          if (ibits(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 8527:              erri = min(erri, i)
        -: 8528:          endif
        -: 8529:      enddo
        -: 8530:
        1: 8531:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8532:          call ansyes(tname)
call    0 returned 100%
        -: 8533:      else
    #####: 8534:          call ansno(tname)
call    0 never executed
        -: 8535:      endif 
        -: 8536:      
       1*: 8537:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8538:
        -: 8539:C -------------------------------------------------
        -: 8540:
function ibset1_ called 1 returned 100% blocks executed 81%
        1: 8541:      subroutine ibset1
        -: 8542:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8543:      character*24 tname
        -: 8544:      integer*1 A(N), B(N), C(N)
        -: 8545:      integer erri, i, asize, clock
        1: 8546:      integer, allocatable :: seed(:)
        -: 8547:      real tmp
        -: 8548:
        -: 8549:!dvm$ distribute A(BLOCK)
        -: 8550:
        1: 8551:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8552:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8553:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8554:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8555:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8556:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8557:
        1: 8558:      tname = 'ibset_char'
        1: 8559:      erri = ER
        -: 8560:
      257: 8561:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8562:          call random_number(tmp)
call    0 returned 100%
      256: 8563:          B(i) = int(tmp * W + S)
      256: 8564:          call random_number(tmp)
call    0 returned 100%
      257: 8565:          C(i) = int(tmp * bit_size(C(i)))
        -: 8566:      enddo
        -: 8567:
        -: 8568:!dvm$ actual(B, C)
        -: 8569:!dvm$ region
        -: 8570:!dvm$ parallel (i) on A(i)
      257: 8571:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8572:          A(i) = ibset(B(i), C(i))
        -: 8573:      enddo
        -: 8574:!dvm$ end region
        -: 8575:!dvm$ get_actual(A)
        -: 8576:
        -: 8577:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8578:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8579:          if (ibset(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8580:              erri = min(erri, i)
        -: 8581:          endif
        -: 8582:      enddo
        -: 8583:
        1: 8584:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8585:          call ansyes(tname)
call    0 returned 100%
        -: 8586:      else
    #####: 8587:          call ansno(tname)
call    0 never executed
        -: 8588:      endif 
        -: 8589:      
       1*: 8590:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8591:
        -: 8592:C -------------------------------------------------
        -: 8593:
function ibset2_ called 1 returned 100% blocks executed 81%
        1: 8594:      subroutine ibset2
        -: 8595:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8596:      character*24 tname
        -: 8597:      integer*2 A(N), B(N), C(N)
        -: 8598:      integer erri, i, asize, clock
        1: 8599:      integer, allocatable :: seed(:)
        -: 8600:      real tmp
        -: 8601:
        -: 8602:!dvm$ distribute A(BLOCK)
        -: 8603:
        1: 8604:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8605:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8606:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8607:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8608:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8609:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8610:
        1: 8611:      tname = 'ibset_short'
        1: 8612:      erri = ER
        -: 8613:
      257: 8614:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8615:          call random_number(tmp)
call    0 returned 100%
      256: 8616:          B(i) = int(tmp * W + S)
      256: 8617:          call random_number(tmp)
call    0 returned 100%
      257: 8618:          C(i) = int(tmp * bit_size(C(i)))
        -: 8619:      enddo
        -: 8620:
        -: 8621:!dvm$ actual(B, C)
        -: 8622:!dvm$ region
        -: 8623:!dvm$ parallel (i) on A(i)
      257: 8624:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8625:          A(i) = ibset(B(i), C(i))
        -: 8626:      enddo
        -: 8627:!dvm$ end region
        -: 8628:!dvm$ get_actual(A)
        -: 8629:
        -: 8630:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8631:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8632:          if (ibset(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8633:              erri = min(erri, i)
        -: 8634:          endif
        -: 8635:      enddo
        -: 8636:
        1: 8637:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8638:          call ansyes(tname)
call    0 returned 100%
        -: 8639:      else
    #####: 8640:          call ansno(tname)
call    0 never executed
        -: 8641:      endif 
        -: 8642:      
       1*: 8643:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8644:
        -: 8645:C -------------------------------------------------
        -: 8646:
function ibset3_ called 1 returned 100% blocks executed 81%
        1: 8647:      subroutine ibset3
        -: 8648:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8649:      character*24 tname
        -: 8650:      integer*4 A(N), B(N), C(N)
        -: 8651:      integer erri, i, asize, clock
        1: 8652:      integer, allocatable :: seed(:)
        -: 8653:      real tmp
        -: 8654:
        -: 8655:!dvm$ distribute A(BLOCK)
        -: 8656:
        1: 8657:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8658:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8659:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8660:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8661:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8662:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8663:
        1: 8664:      tname = 'ibset_long'
        1: 8665:      erri = ER
        -: 8666:
      257: 8667:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8668:          call random_number(tmp)
call    0 returned 100%
      256: 8669:          B(i) = int(tmp * W + S)
      256: 8670:          call random_number(tmp)
call    0 returned 100%
      257: 8671:          C(i) = int(tmp * bit_size(C(i)))
        -: 8672:      enddo
        -: 8673:
        -: 8674:!dvm$ actual(B, C)
        -: 8675:!dvm$ region
        -: 8676:!dvm$ parallel (i) on A(i)
      257: 8677:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8678:          A(i) = ibset(B(i), C(i))
        -: 8679:      enddo
        -: 8680:!dvm$ end region
        -: 8681:!dvm$ get_actual(A)
        -: 8682:
        -: 8683:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8684:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8685:          if (ibset(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8686:              erri = min(erri, i)
        -: 8687:          endif
        -: 8688:      enddo
        -: 8689:
        1: 8690:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8691:          call ansyes(tname)
call    0 returned 100%
        -: 8692:      else
    #####: 8693:          call ansno(tname)
call    0 never executed
        -: 8694:      endif 
        -: 8695:      
       1*: 8696:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8697:
        -: 8698:C -------------------------------------------------
        -: 8699:
function ibset4_ called 1 returned 100% blocks executed 81%
        1: 8700:      subroutine ibset4
        -: 8701:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8702:      character*24 tname
        -: 8703:      integer*8 A(N), B(N), C(N)
        -: 8704:      integer erri, i, asize, clock
        1: 8705:      integer, allocatable :: seed(:)
        -: 8706:      real tmp
        -: 8707:
        -: 8708:!dvm$ distribute A(BLOCK)
        -: 8709:
        1: 8710:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8711:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8712:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8713:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8714:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8715:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8716:
        1: 8717:      tname = 'ibset_longlong'
        1: 8718:      erri = ER
        -: 8719:
      257: 8720:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8721:          call random_number(tmp)
call    0 returned 100%
      256: 8722:          B(i) = int(tmp * W + S)
      256: 8723:          call random_number(tmp)
call    0 returned 100%
      257: 8724:          C(i) = int(tmp * bit_size(C(i)))
        -: 8725:      enddo
        -: 8726:
        -: 8727:!dvm$ actual(B, C)
        -: 8728:!dvm$ region
        -: 8729:!dvm$ parallel (i) on A(i)
      257: 8730:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8731:          A(i) = ibset(B(i), C(i))
        -: 8732:      enddo
        -: 8733:!dvm$ end region
        -: 8734:!dvm$ get_actual(A)
        -: 8735:
        -: 8736:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8737:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8738:          if (ibset(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8739:              erri = min(erri, i)
        -: 8740:          endif
        -: 8741:      enddo
        -: 8742:
        1: 8743:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8744:          call ansyes(tname)
call    0 returned 100%
        -: 8745:      else
    #####: 8746:          call ansno(tname)
call    0 never executed
        -: 8747:      endif 
        -: 8748:      
       1*: 8749:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8750:
        -: 8751:C -------------------------------------------------
        -: 8752:
function ieor1_ called 1 returned 100% blocks executed 81%
        1: 8753:      subroutine ieor1
        -: 8754:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8755:      character*24 tname
        -: 8756:      integer*1 A(N), B(N), C(N)
        -: 8757:      integer erri, i, asize, clock
        1: 8758:      integer, allocatable :: seed(:)
        -: 8759:      real tmp
        -: 8760:
        -: 8761:!dvm$ distribute A(BLOCK)
        -: 8762:
        1: 8763:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8764:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8765:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8766:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8767:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8768:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8769:
        1: 8770:      tname = 'ieor_char'
        1: 8771:      erri = ER
        -: 8772:
      257: 8773:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8774:          call random_number(tmp)
call    0 returned 100%
      256: 8775:          B(i) = int(tmp * W + S)
      256: 8776:          call random_number(tmp)
call    0 returned 100%
      257: 8777:          C(i) = int(tmp * W + S)
        -: 8778:      enddo
        -: 8779:
        -: 8780:!dvm$ actual(B, C)
        -: 8781:!dvm$ region
        -: 8782:!dvm$ parallel (i) on A(i)
      257: 8783:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8784:          A(i) = ieor(B(i), C(i))
        -: 8785:      enddo
        -: 8786:!dvm$ end region
        -: 8787:!dvm$ get_actual(A)
        -: 8788:
        -: 8789:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8790:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8791:          if (ieor(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8792:              erri = min(erri, i)
        -: 8793:          endif
        -: 8794:      enddo
        -: 8795:
        1: 8796:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8797:          call ansyes(tname)
call    0 returned 100%
        -: 8798:      else
    #####: 8799:          call ansno(tname)
call    0 never executed
        -: 8800:      endif 
        -: 8801:      
       1*: 8802:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8803:
        -: 8804:C -------------------------------------------------
        -: 8805:
function ieor2_ called 1 returned 100% blocks executed 81%
        1: 8806:      subroutine ieor2
        -: 8807:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8808:      character*24 tname
        -: 8809:      integer*2 A(N), B(N), C(N)
        -: 8810:      integer erri, i, asize, clock
        1: 8811:      integer, allocatable :: seed(:)
        -: 8812:      real tmp
        -: 8813:
        -: 8814:!dvm$ distribute A(BLOCK)
        -: 8815:
        1: 8816:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8817:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8818:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8819:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8820:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8821:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8822:
        1: 8823:      tname = 'ieor_short'
        1: 8824:      erri = ER
        -: 8825:
      257: 8826:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8827:          call random_number(tmp)
call    0 returned 100%
      256: 8828:          B(i) = int(tmp * W + S)
      256: 8829:          call random_number(tmp)
call    0 returned 100%
      257: 8830:          C(i) = int(tmp * W + S)
        -: 8831:      enddo
        -: 8832:
        -: 8833:!dvm$ actual(B, C)
        -: 8834:!dvm$ region
        -: 8835:!dvm$ parallel (i) on A(i)
      257: 8836:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8837:          A(i) = ieor(B(i), C(i))
        -: 8838:      enddo
        -: 8839:!dvm$ end region
        -: 8840:!dvm$ get_actual(A)
        -: 8841:
        -: 8842:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8843:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8844:          if (ieor(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8845:              erri = min(erri, i)
        -: 8846:          endif
        -: 8847:      enddo
        -: 8848:
        1: 8849:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8850:          call ansyes(tname)
call    0 returned 100%
        -: 8851:      else
    #####: 8852:          call ansno(tname)
call    0 never executed
        -: 8853:      endif 
        -: 8854:      
       1*: 8855:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8856:
        -: 8857:C -------------------------------------------------
        -: 8858:
function ieor3_ called 1 returned 100% blocks executed 81%
        1: 8859:      subroutine ieor3
        -: 8860:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8861:      character*24 tname
        -: 8862:      integer*4 A(N), B(N), C(N)
        -: 8863:      integer erri, i, asize, clock
        1: 8864:      integer, allocatable :: seed(:)
        -: 8865:      real tmp
        -: 8866:
        -: 8867:!dvm$ distribute A(BLOCK)
        -: 8868:
        1: 8869:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8870:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8871:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8872:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8873:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8874:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8875:
        1: 8876:      tname = 'ieor_long'
        1: 8877:      erri = ER
        -: 8878:
      257: 8879:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8880:          call random_number(tmp)
call    0 returned 100%
      256: 8881:          B(i) = int(tmp * W + S)
      256: 8882:          call random_number(tmp)
call    0 returned 100%
      257: 8883:          C(i) = int(tmp * W + S)
        -: 8884:      enddo
        -: 8885:
        -: 8886:!dvm$ actual(B, C)
        -: 8887:!dvm$ region
        -: 8888:!dvm$ parallel (i) on A(i)
      257: 8889:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8890:          A(i) = ieor(B(i), C(i))
        -: 8891:      enddo
        -: 8892:!dvm$ end region
        -: 8893:!dvm$ get_actual(A)
        -: 8894:
        -: 8895:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8896:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8897:          if (ieor(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8898:              erri = min(erri, i)
        -: 8899:          endif
        -: 8900:      enddo
        -: 8901:
        1: 8902:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8903:          call ansyes(tname)
call    0 returned 100%
        -: 8904:      else
    #####: 8905:          call ansno(tname)
call    0 never executed
        -: 8906:      endif 
        -: 8907:      
       1*: 8908:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8909:
        -: 8910:C -------------------------------------------------
        -: 8911:
function ieor4_ called 1 returned 100% blocks executed 81%
        1: 8912:      subroutine ieor4
        -: 8913:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8914:      character*24 tname
        -: 8915:      integer*8 A(N), B(N), C(N)
        -: 8916:      integer erri, i, asize, clock
        1: 8917:      integer, allocatable :: seed(:)
        -: 8918:      real tmp
        -: 8919:
        -: 8920:!dvm$ distribute A(BLOCK)
        -: 8921:
        1: 8922:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8923:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8924:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8925:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8926:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8927:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8928:
        1: 8929:      tname = 'ieor_longlong'
        1: 8930:      erri = ER
        -: 8931:
      257: 8932:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8933:          call random_number(tmp)
call    0 returned 100%
      256: 8934:          B(i) = int(tmp * W + S)
      256: 8935:          call random_number(tmp)
call    0 returned 100%
      257: 8936:          C(i) = int(tmp * W + S)
        -: 8937:      enddo
        -: 8938:
        -: 8939:!dvm$ actual(B, C)
        -: 8940:!dvm$ region
        -: 8941:!dvm$ parallel (i) on A(i)
      257: 8942:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8943:          A(i) = ieor(B(i), C(i))
        -: 8944:      enddo
        -: 8945:!dvm$ end region
        -: 8946:!dvm$ get_actual(A)
        -: 8947:
        -: 8948:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 8949:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 8950:          if (ieor(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 8951:              erri = min(erri, i)
        -: 8952:          endif
        -: 8953:      enddo
        -: 8954:
        1: 8955:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 8956:          call ansyes(tname)
call    0 returned 100%
        -: 8957:      else
    #####: 8958:          call ansno(tname)
call    0 never executed
        -: 8959:      endif 
        -: 8960:      
       1*: 8961:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 8962:
        -: 8963:C -------------------------------------------------
        -: 8964:
function ieor9_ called 1 returned 100% blocks executed 81%
        1: 8965:      subroutine ieor9
        -: 8966:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 8967:      character*24 tname
        -: 8968:      integer*1 A(N), B(N), C(N)
        -: 8969:      integer erri, i, asize, clock
        1: 8970:      integer, allocatable :: seed(:)
        -: 8971:      real tmp
        -: 8972:
        -: 8973:!dvm$ distribute A(BLOCK)
        -: 8974:
        1: 8975:      call random_seed(size = asize)
call    0 returned 100%
       3*: 8976:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 8977:      call system_clock(count = clock)
call    0 returned 100%
      34*: 8978:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 8979:      call random_seed(put = seed)
call    0 returned 100%
       1*: 8980:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 8981:
        1: 8982:      tname = 'xor_char'
        1: 8983:      erri = ER
        -: 8984:
      257: 8985:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 8986:          call random_number(tmp)
call    0 returned 100%
      256: 8987:          B(i) = int(tmp * W + S)
      256: 8988:          call random_number(tmp)
call    0 returned 100%
      257: 8989:          C(i) = int(tmp * W + S)
        -: 8990:      enddo
        -: 8991:
        -: 8992:!dvm$ actual(B, C)
        -: 8993:!dvm$ region
        -: 8994:!dvm$ parallel (i) on A(i)
      257: 8995:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 8996:          A(i) = xor(B(i), C(i))
        -: 8997:      enddo
        -: 8998:!dvm$ end region
        -: 8999:!dvm$ get_actual(A)
        -: 9000:
        -: 9001:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9002:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9003:          if (xor(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9004:              erri = min(erri, i)
        -: 9005:          endif
        -: 9006:      enddo
        -: 9007:
        1: 9008:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9009:          call ansyes(tname)
call    0 returned 100%
        -: 9010:      else
    #####: 9011:          call ansno(tname)
call    0 never executed
        -: 9012:      endif 
        -: 9013:      
       1*: 9014:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9015:
        -: 9016:C -------------------------------------------------
        -: 9017:
function ieor10_ called 1 returned 100% blocks executed 81%
        1: 9018:      subroutine ieor10
        -: 9019:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9020:      character*24 tname
        -: 9021:      integer*2 A(N), B(N), C(N)
        -: 9022:      integer erri, i, asize, clock
        1: 9023:      integer, allocatable :: seed(:)
        -: 9024:      real tmp
        -: 9025:
        -: 9026:!dvm$ distribute A(BLOCK)
        -: 9027:
        1: 9028:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9029:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9030:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9031:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9032:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9033:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9034:
        1: 9035:      tname = 'xor_short'
        1: 9036:      erri = ER
        -: 9037:
      257: 9038:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9039:          call random_number(tmp)
call    0 returned 100%
      256: 9040:          B(i) = int(tmp * W + S)
      256: 9041:          call random_number(tmp)
call    0 returned 100%
      257: 9042:          C(i) = int(tmp * W + S)
        -: 9043:      enddo
        -: 9044:
        -: 9045:!dvm$ actual(B, C)
        -: 9046:!dvm$ region
        -: 9047:!dvm$ parallel (i) on A(i)
      257: 9048:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9049:          A(i) = xor(B(i), C(i))
        -: 9050:      enddo
        -: 9051:!dvm$ end region
        -: 9052:!dvm$ get_actual(A)
        -: 9053:
        -: 9054:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9055:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9056:          if (xor(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9057:              erri = min(erri, i)
        -: 9058:          endif
        -: 9059:      enddo
        -: 9060:
        1: 9061:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9062:          call ansyes(tname)
call    0 returned 100%
        -: 9063:      else
    #####: 9064:          call ansno(tname)
call    0 never executed
        -: 9065:      endif 
        -: 9066:      
       1*: 9067:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9068:
        -: 9069:C -------------------------------------------------
        -: 9070:
function ieor11_ called 1 returned 100% blocks executed 81%
        1: 9071:      subroutine ieor11
        -: 9072:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9073:      character*24 tname
        -: 9074:      integer*4 A(N), B(N), C(N)
        -: 9075:      integer erri, i, asize, clock
        1: 9076:      integer, allocatable :: seed(:)
        -: 9077:      real tmp
        -: 9078:
        -: 9079:!dvm$ distribute A(BLOCK)
        -: 9080:
        1: 9081:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9082:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9083:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9084:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9085:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9086:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9087:
        1: 9088:      tname = 'xor_long'
        1: 9089:      erri = ER
        -: 9090:
      257: 9091:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9092:          call random_number(tmp)
call    0 returned 100%
      256: 9093:          B(i) = int(tmp * W + S)
      256: 9094:          call random_number(tmp)
call    0 returned 100%
      257: 9095:          C(i) = int(tmp * W + S)
        -: 9096:      enddo
        -: 9097:
        -: 9098:!dvm$ actual(B, C)
        -: 9099:!dvm$ region
        -: 9100:!dvm$ parallel (i) on A(i)
      257: 9101:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9102:          A(i) = xor(B(i), C(i))
        -: 9103:      enddo
        -: 9104:!dvm$ end region
        -: 9105:!dvm$ get_actual(A)
        -: 9106:
        -: 9107:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9108:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9109:          if (xor(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9110:              erri = min(erri, i)
        -: 9111:          endif
        -: 9112:      enddo
        -: 9113:
        1: 9114:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9115:          call ansyes(tname)
call    0 returned 100%
        -: 9116:      else
    #####: 9117:          call ansno(tname)
call    0 never executed
        -: 9118:      endif 
        -: 9119:      
       1*: 9120:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9121:
        -: 9122:C -------------------------------------------------
        -: 9123:
function ieor12_ called 1 returned 100% blocks executed 81%
        1: 9124:      subroutine ieor12
        -: 9125:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9126:      character*24 tname
        -: 9127:      integer*8 A(N), B(N), C(N)
        -: 9128:      integer erri, i, asize, clock
        1: 9129:      integer, allocatable :: seed(:)
        -: 9130:      real tmp
        -: 9131:
        -: 9132:!dvm$ distribute A(BLOCK)
        -: 9133:
        1: 9134:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9135:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9136:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9137:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9138:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9139:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9140:
        1: 9141:      tname = 'xor_longlong'
        1: 9142:      erri = ER
        -: 9143:
      257: 9144:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9145:          call random_number(tmp)
call    0 returned 100%
      256: 9146:          B(i) = int(tmp * W + S)
      256: 9147:          call random_number(tmp)
call    0 returned 100%
      257: 9148:          C(i) = int(tmp * W + S)
        -: 9149:      enddo
        -: 9150:
        -: 9151:!dvm$ actual(B, C)
        -: 9152:!dvm$ region
        -: 9153:!dvm$ parallel (i) on A(i)
      257: 9154:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9155:          A(i) = xor(B(i), C(i))
        -: 9156:      enddo
        -: 9157:!dvm$ end region
        -: 9158:!dvm$ get_actual(A)
        -: 9159:
        -: 9160:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9161:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9162:          if (xor(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9163:              erri = min(erri, i)
        -: 9164:          endif
        -: 9165:      enddo
        -: 9166:
        1: 9167:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9168:          call ansyes(tname)
call    0 returned 100%
        -: 9169:      else
    #####: 9170:          call ansno(tname)
call    0 never executed
        -: 9171:      endif 
        -: 9172:      
       1*: 9173:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9174:
        -: 9175:C -------------------------------------------------
        -: 9176:
function ior1_ called 1 returned 100% blocks executed 81%
        1: 9177:      subroutine ior1
        -: 9178:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9179:      character*24 tname
        -: 9180:      integer*1 A(N), B(N), C(N)
        -: 9181:      integer erri, i, asize, clock
        1: 9182:      integer, allocatable :: seed(:)
        -: 9183:      real tmp
        -: 9184:      intrinsic ior
        -: 9185:
        -: 9186:!dvm$ distribute A(BLOCK)
        -: 9187:
        1: 9188:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9189:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9190:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9191:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9192:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9193:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9194:
        1: 9195:      tname = 'ior_char'
        1: 9196:      erri = ER
        -: 9197:
      257: 9198:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9199:          call random_number(tmp)
call    0 returned 100%
      256: 9200:          B(i) = int(tmp * W + S)
      256: 9201:          call random_number(tmp)
call    0 returned 100%
      257: 9202:          C(i) = int(tmp * W + S)
        -: 9203:      enddo
        -: 9204:
        -: 9205:!dvm$ actual(B, C)
        -: 9206:!dvm$ region
        -: 9207:!dvm$ parallel (i) on A(i)
      257: 9208:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9209:          A(i) = ior(B(i), C(i))
        -: 9210:      enddo
        -: 9211:!dvm$ end region
        -: 9212:!dvm$ get_actual(A)
        -: 9213:
        -: 9214:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9215:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9216:          if (ior(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9217:              erri = min(erri, i)
        -: 9218:          endif
        -: 9219:      enddo
        -: 9220:
        1: 9221:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9222:          call ansyes(tname)
call    0 returned 100%
        -: 9223:      else
    #####: 9224:          call ansno(tname)
call    0 never executed
        -: 9225:      endif 
        -: 9226:      
       1*: 9227:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9228:
        -: 9229:C -------------------------------------------------
        -: 9230:
function ior2_ called 1 returned 100% blocks executed 81%
        1: 9231:      subroutine ior2
        -: 9232:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9233:      character*24 tname
        -: 9234:      integer*2 A(N), B(N), C(N)
        -: 9235:      integer erri, i, asize, clock
        1: 9236:      integer, allocatable :: seed(:)
        -: 9237:      real tmp
        -: 9238:      intrinsic ior
        -: 9239:
        -: 9240:!dvm$ distribute A(BLOCK)
        -: 9241:
        1: 9242:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9243:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9244:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9245:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9246:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9247:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9248:
        1: 9249:      tname = 'ior_short'
        1: 9250:      erri = ER
        -: 9251:
      257: 9252:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9253:          call random_number(tmp)
call    0 returned 100%
      256: 9254:          B(i) = int(tmp * W + S)
      256: 9255:          call random_number(tmp)
call    0 returned 100%
      257: 9256:          C(i) = int(tmp * W + S)
        -: 9257:      enddo
        -: 9258:
        -: 9259:!dvm$ actual(B, C)
        -: 9260:!dvm$ region
        -: 9261:!dvm$ parallel (i) on A(i)
      257: 9262:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9263:          A(i) = ior(B(i), C(i))
        -: 9264:      enddo
        -: 9265:!dvm$ end region
        -: 9266:!dvm$ get_actual(A)
        -: 9267:
        -: 9268:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9269:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9270:          if (ior(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9271:              erri = min(erri, i)
        -: 9272:          endif
        -: 9273:      enddo
        -: 9274:
        1: 9275:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9276:          call ansyes(tname)
call    0 returned 100%
        -: 9277:      else
    #####: 9278:          call ansno(tname)
call    0 never executed
        -: 9279:      endif 
        -: 9280:      
       1*: 9281:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9282:
        -: 9283:C -------------------------------------------------
        -: 9284:
function ior3_ called 1 returned 100% blocks executed 81%
        1: 9285:      subroutine ior3
        -: 9286:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9287:      character*24 tname
        -: 9288:      integer*4 A(N), B(N), C(N)
        -: 9289:      integer erri, i, asize, clock
        1: 9290:      integer, allocatable :: seed(:)
        -: 9291:      real tmp
        -: 9292:      intrinsic ior
        -: 9293:	  
        -: 9294:!dvm$ distribute A(BLOCK)
        -: 9295:
        1: 9296:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9297:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9298:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9299:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9300:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9301:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9302:
        1: 9303:      tname = 'ior_long'
        1: 9304:      erri = ER
        -: 9305:
      257: 9306:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9307:          call random_number(tmp)
call    0 returned 100%
      256: 9308:          B(i) = int(tmp * W + S)
      256: 9309:          call random_number(tmp)
call    0 returned 100%
      257: 9310:          C(i) = int(tmp * W + S)
        -: 9311:      enddo
        -: 9312:
        -: 9313:!dvm$ actual(B, C)
        -: 9314:!dvm$ region
        -: 9315:!dvm$ parallel (i) on A(i)
      257: 9316:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9317:          A(i) = ior(B(i), C(i))
        -: 9318:      enddo
        -: 9319:!dvm$ end region
        -: 9320:!dvm$ get_actual(A)
        -: 9321:
        -: 9322:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9323:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9324:          if (ior(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9325:              erri = min(erri, i)
        -: 9326:          endif
        -: 9327:      enddo
        -: 9328:
        1: 9329:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9330:          call ansyes(tname)
call    0 returned 100%
        -: 9331:      else
    #####: 9332:          call ansno(tname)
call    0 never executed
        -: 9333:      endif 
        -: 9334:      
       1*: 9335:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9336:
        -: 9337:C -------------------------------------------------
        -: 9338:
function ior4_ called 1 returned 100% blocks executed 81%
        1: 9339:      subroutine ior4
        -: 9340:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9341:      character*24 tname
        -: 9342:      integer*8 A(N), B(N), C(N)
        -: 9343:      integer erri, i, asize, clock
        1: 9344:      integer, allocatable :: seed(:)
        -: 9345:      real tmp
        -: 9346:      intrinsic ior
        -: 9347:	  
        -: 9348:!dvm$ distribute A(BLOCK)
        -: 9349:
        1: 9350:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9351:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9352:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9353:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9354:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9355:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9356:
        1: 9357:      tname = 'ior_longlong'
        1: 9358:      erri = ER
        -: 9359:
      257: 9360:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9361:          call random_number(tmp)
call    0 returned 100%
      256: 9362:          B(i) = int(tmp * W + S)
      256: 9363:          call random_number(tmp)
call    0 returned 100%
      257: 9364:          C(i) = int(tmp * W + S)
        -: 9365:      enddo
        -: 9366:
        -: 9367:!dvm$ actual(B, C)
        -: 9368:!dvm$ region
        -: 9369:!dvm$ parallel (i) on A(i)
      257: 9370:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9371:          A(i) = ior(B(i), C(i))
        -: 9372:      enddo
        -: 9373:!dvm$ end region
        -: 9374:!dvm$ get_actual(A)
        -: 9375:
        -: 9376:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9377:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9378:          if (ior(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9379:              erri = min(erri, i)
        -: 9380:          endif
        -: 9381:      enddo
        -: 9382:
        1: 9383:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9384:          call ansyes(tname)
call    0 returned 100%
        -: 9385:      else
    #####: 9386:          call ansno(tname)
call    0 never executed
        -: 9387:      endif 
        -: 9388:      
       1*: 9389:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9390:
        -: 9391:C -------------------------------------------------
        -: 9392:
function ior5_ called 1 returned 100% blocks executed 81%
        1: 9393:      subroutine ior5
        -: 9394:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9395:      character*24 tname
        -: 9396:      integer*1 A(N), B(N), C(N)
        -: 9397:      integer erri, i, asize, clock
        1: 9398:      integer, allocatable :: seed(:)
        -: 9399:      real tmp
        -: 9400:!dvm$ distribute A(BLOCK)
        -: 9401:
        1: 9402:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9403:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9404:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9405:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9406:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9407:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9408:
        1: 9409:      tname = 'or_char'
        1: 9410:      erri = ER
        -: 9411:
      257: 9412:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9413:          call random_number(tmp)
call    0 returned 100%
      256: 9414:          B(i) = int(tmp * W + S)
      256: 9415:          call random_number(tmp)
call    0 returned 100%
      257: 9416:          C(i) = int(tmp * W + S)
        -: 9417:      enddo
        -: 9418:
        -: 9419:!dvm$ actual(B, C)
        -: 9420:!dvm$ region
        -: 9421:!dvm$ parallel (i) on A(i)
      257: 9422:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9423:          A(i) = or(B(i), C(i))
        -: 9424:      enddo
        -: 9425:!dvm$ end region
        -: 9426:!dvm$ get_actual(A)
        -: 9427:
        -: 9428:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9429:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9430:          if (or(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9431:              erri = min(erri, i)
        -: 9432:          endif
        -: 9433:      enddo
        -: 9434:
        1: 9435:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9436:          call ansyes(tname)
call    0 returned 100%
        -: 9437:      else
    #####: 9438:          call ansno(tname)
call    0 never executed
        -: 9439:      endif 
        -: 9440:      
       1*: 9441:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9442:
        -: 9443:C -------------------------------------------------
        -: 9444:
function ior6_ called 1 returned 100% blocks executed 81%
        1: 9445:      subroutine ior6
        -: 9446:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9447:      character*24 tname
        -: 9448:      integer*2 A(N), B(N), C(N)
        -: 9449:      integer erri, i, asize, clock
        1: 9450:      integer, allocatable :: seed(:)
        -: 9451:      real tmp
        -: 9452:	  
        -: 9453:!dvm$ distribute A(BLOCK)
        -: 9454:
        1: 9455:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9456:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9457:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9458:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9459:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9460:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9461:
        1: 9462:      tname = 'or_short'
        1: 9463:      erri = ER
        -: 9464:
      257: 9465:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9466:          call random_number(tmp)
call    0 returned 100%
      256: 9467:          B(i) = int(tmp * W + S)
      256: 9468:          call random_number(tmp)
call    0 returned 100%
      257: 9469:          C(i) = int(tmp * W + S)
        -: 9470:      enddo
        -: 9471:
        -: 9472:!dvm$ actual(B, C)
        -: 9473:!dvm$ region
        -: 9474:!dvm$ parallel (i) on A(i)
      257: 9475:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9476:          A(i) = or(B(i), C(i))
        -: 9477:      enddo
        -: 9478:!dvm$ end region
        -: 9479:!dvm$ get_actual(A)
        -: 9480:
        -: 9481:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9482:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9483:          if (or(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9484:              erri = min(erri, i)
        -: 9485:          endif
        -: 9486:      enddo
        -: 9487:
        1: 9488:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9489:          call ansyes(tname)
call    0 returned 100%
        -: 9490:      else
    #####: 9491:          call ansno(tname)
call    0 never executed
        -: 9492:      endif 
        -: 9493:      
       1*: 9494:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9495:
        -: 9496:C -------------------------------------------------
        -: 9497:
function ior7_ called 1 returned 100% blocks executed 81%
        1: 9498:      subroutine ior7
        -: 9499:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9500:      character*24 tname
        -: 9501:      integer*4 A(N), B(N), C(N)
        -: 9502:      integer erri, i, asize, clock
        1: 9503:      integer, allocatable :: seed(:)
        -: 9504:      real tmp
        -: 9505:	  
        -: 9506:!dvm$ distribute A(BLOCK)
        -: 9507:
        1: 9508:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9509:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9510:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9511:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9512:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9513:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9514:
        1: 9515:      tname = 'or_long'
        1: 9516:      erri = ER
        -: 9517:
      257: 9518:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9519:          call random_number(tmp)
call    0 returned 100%
      256: 9520:          B(i) = int(tmp * W + S)
      256: 9521:          call random_number(tmp)
call    0 returned 100%
      257: 9522:          C(i) = int(tmp * W + S)
        -: 9523:      enddo
        -: 9524:
        -: 9525:!dvm$ actual(B, C)
        -: 9526:!dvm$ region
        -: 9527:!dvm$ parallel (i) on A(i)
      257: 9528:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9529:          A(i) = or(B(i), C(i))
        -: 9530:      enddo
        -: 9531:!dvm$ end region
        -: 9532:!dvm$ get_actual(A)
        -: 9533:
        -: 9534:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9535:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9536:          if (or(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9537:              erri = min(erri, i)
        -: 9538:          endif
        -: 9539:      enddo
        -: 9540:
        1: 9541:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9542:          call ansyes(tname)
call    0 returned 100%
        -: 9543:      else
    #####: 9544:          call ansno(tname)
call    0 never executed
        -: 9545:      endif 
        -: 9546:      
       1*: 9547:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9548:
        -: 9549:C -------------------------------------------------
        -: 9550:
function ior8_ called 1 returned 100% blocks executed 81%
        1: 9551:      subroutine ior8
        -: 9552:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9553:      character*24 tname
        -: 9554:      integer*8 A(N), B(N), C(N)
        -: 9555:      integer erri, i, asize, clock
        1: 9556:      integer, allocatable :: seed(:)
        -: 9557:      real tmp
        -: 9558:	  
        -: 9559:!dvm$ distribute A(BLOCK)
        -: 9560:
        1: 9561:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9562:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9563:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9564:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9565:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9566:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9567:
        1: 9568:      tname = 'or_longlong'
        1: 9569:      erri = ER
        -: 9570:
      257: 9571:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9572:          call random_number(tmp)
call    0 returned 100%
      256: 9573:          B(i) = int(tmp * W + S)
      256: 9574:          call random_number(tmp)
call    0 returned 100%
      257: 9575:          C(i) = int(tmp * W + S)
        -: 9576:      enddo
        -: 9577:
        -: 9578:!dvm$ actual(B, C)
        -: 9579:!dvm$ region
        -: 9580:!dvm$ parallel (i) on A(i)
      257: 9581:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9582:          A(i) = or(B(i), C(i))
        -: 9583:      enddo
        -: 9584:!dvm$ end region
        -: 9585:!dvm$ get_actual(A)
        -: 9586:
        -: 9587:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9588:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9589:          if (or(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 9590:              erri = min(erri, i)
        -: 9591:          endif
        -: 9592:      enddo
        -: 9593:
        1: 9594:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9595:          call ansyes(tname)
call    0 returned 100%
        -: 9596:      else
    #####: 9597:          call ansno(tname)
call    0 never executed
        -: 9598:      endif 
        -: 9599:      
       1*: 9600:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9601:
        -: 9602:C -------------------------------------------------
        -: 9603:
function ishft1_ called 1 returned 100% blocks executed 83%
        1: 9604:      subroutine ishft1
        -: 9605:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9606:      character*24 tname
        -: 9607:      integer*1 A(N), B(N), C(N)
        -: 9608:      integer erri, i, asize, clock
        1: 9609:      integer, allocatable :: seed(:)
        -: 9610:      real tmp
        -: 9611:
        -: 9612:!dvm$ distribute A(BLOCK)
        -: 9613:
        1: 9614:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9615:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9616:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9617:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9618:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9619:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9620:
        1: 9621:      tname = 'ishft_char'
        1: 9622:      erri = ER
        -: 9623:
      257: 9624:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9625:          call random_number(tmp)
call    0 returned 100%
      256: 9626:          B(i) = int(tmp * W + S)
      256: 9627:          call random_number(tmp)
call    0 returned 100%
      257: 9628:          C(i) = int(tmp * (2 * bit_size(C(i)) + 1) - bit_size(C(i)))
        -: 9629:      enddo
        -: 9630:
        -: 9631:!dvm$ actual(B, C)
        -: 9632:!dvm$ region
        -: 9633:!dvm$ parallel (i) on A(i)
      257: 9634:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9635:          A(i) = ishft(B(i), C(i))
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 59% (fallthrough)
branch  3 taken 41%
        -: 9636:      enddo
        -: 9637:!dvm$ end region
        -: 9638:!dvm$ get_actual(A)
        -: 9639:
        -: 9640:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9641:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9642:          if (ishft(B(i), C(i)) .ne. A(i)) then
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 59% (fallthrough)
branch  3 taken 41%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9643:              erri = min(erri, i)
        -: 9644:          endif
        -: 9645:      enddo
        -: 9646:
        1: 9647:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9648:          call ansyes(tname)
call    0 returned 100%
        -: 9649:      else
    #####: 9650:          call ansno(tname)
call    0 never executed
        -: 9651:      endif 
        -: 9652:      
       1*: 9653:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9654:
        -: 9655:C -------------------------------------------------
        -: 9656:
function ishft2_ called 1 returned 100% blocks executed 83%
        1: 9657:      subroutine ishft2
        -: 9658:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9659:      character*24 tname
        -: 9660:      integer*2 A(N), B(N), C(N)
        -: 9661:      integer erri, i, asize, clock
        1: 9662:      integer, allocatable :: seed(:)
        -: 9663:      real tmp
        -: 9664:
        -: 9665:!dvm$ distribute A(BLOCK)
        -: 9666:
        1: 9667:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9668:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9669:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9670:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9671:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9672:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9673:
        1: 9674:      tname = 'ishft_short'
        1: 9675:      erri = ER
        -: 9676:
      257: 9677:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9678:          call random_number(tmp)
call    0 returned 100%
      256: 9679:          B(i) = int(tmp * W + S)
      256: 9680:          call random_number(tmp)
call    0 returned 100%
      257: 9681:          C(i) = int(tmp * (2 * bit_size(C(i)) + 1) - bit_size(C(i)))
        -: 9682:      enddo
        -: 9683:
        -: 9684:!dvm$ actual(B, C)
        -: 9685:!dvm$ region
        -: 9686:!dvm$ parallel (i) on A(i)
      257: 9687:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9688:          A(i) = ishft(B(i), C(i))
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 55% (fallthrough)
branch  3 taken 45%
        -: 9689:      enddo
        -: 9690:!dvm$ end region
        -: 9691:!dvm$ get_actual(A)
        -: 9692:
        -: 9693:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9694:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9695:          if (ishft(B(i), C(i)) .ne. A(i)) then
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 55% (fallthrough)
branch  3 taken 45%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9696:              erri = min(erri, i)
        -: 9697:          endif
        -: 9698:      enddo
        -: 9699:
        1: 9700:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9701:          call ansyes(tname)
call    0 returned 100%
        -: 9702:      else
    #####: 9703:          call ansno(tname)
call    0 never executed
        -: 9704:      endif 
        -: 9705:      
       1*: 9706:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9707:
        -: 9708:C -------------------------------------------------
        -: 9709:
function ishft3_ called 1 returned 100% blocks executed 83%
        1: 9710:      subroutine ishft3
        -: 9711:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9712:      character*24 tname
        -: 9713:      integer*4 A(N), B(N), C(N)
        -: 9714:      integer erri, i, asize, clock
        1: 9715:      integer, allocatable :: seed(:)
        -: 9716:      real tmp
        -: 9717:
        -: 9718:!dvm$ distribute A(BLOCK)
        -: 9719:
        1: 9720:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9721:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9722:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9723:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9724:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9725:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9726:
        1: 9727:      tname = 'ishft_long'
        1: 9728:      erri = ER
        -: 9729:
      257: 9730:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9731:          call random_number(tmp)
call    0 returned 100%
      256: 9732:          B(i) = int(tmp * W + S)
      256: 9733:          call random_number(tmp)
call    0 returned 100%
      257: 9734:          C(i) = int(tmp * (2 * bit_size(C(i)) + 1) - bit_size(C(i)))
        -: 9735:      enddo
        -: 9736:
        -: 9737:!dvm$ actual(B, C)
        -: 9738:!dvm$ region
        -: 9739:!dvm$ parallel (i) on A(i)
      257: 9740:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9741:          A(i) = ishft(B(i), C(i))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 54% (fallthrough)
branch  3 taken 46%
        -: 9742:      enddo
        -: 9743:!dvm$ end region
        -: 9744:!dvm$ get_actual(A)
        -: 9745:
        -: 9746:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9747:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9748:          if (ishft(B(i), C(i)) .ne. A(i)) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 54% (fallthrough)
branch  3 taken 46%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9749:              erri = min(erri, i)
        -: 9750:          endif
        -: 9751:      enddo
        -: 9752:
        1: 9753:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9754:          call ansyes(tname)
call    0 returned 100%
        -: 9755:      else
    #####: 9756:          call ansno(tname)
call    0 never executed
        -: 9757:      endif 
        -: 9758:      
       1*: 9759:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9760:
        -: 9761:C -------------------------------------------------
        -: 9762:
function ishft4_ called 1 returned 100% blocks executed 83%
        1: 9763:      subroutine ishft4
        -: 9764:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9765:      character*24 tname
        -: 9766:      integer*8 A(N), B(N), C(N)
        -: 9767:      integer erri, i, asize, clock
        1: 9768:      integer, allocatable :: seed(:)
        -: 9769:      real tmp
        -: 9770:
        -: 9771:!dvm$ distribute A(BLOCK)
        -: 9772:
        1: 9773:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9774:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9775:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9776:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9777:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9778:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9779:
        1: 9780:      tname = 'ishft_longlong'
        1: 9781:      erri = ER
        -: 9782:
      257: 9783:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9784:          call random_number(tmp)
call    0 returned 100%
      256: 9785:          B(i) = int(tmp * W + S)
      256: 9786:          call random_number(tmp)
call    0 returned 100%
      257: 9787:          C(i) = int(tmp * (2 * bit_size(C(i)) + 1) - bit_size(C(i)))
        -: 9788:      enddo
        -: 9789:
        -: 9790:!dvm$ actual(B, C)
        -: 9791:!dvm$ region
        -: 9792:!dvm$ parallel (i) on A(i)
      257: 9793:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9794:          A(i) = ishft(B(i), C(i))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
        -: 9795:      enddo
        -: 9796:!dvm$ end region
        -: 9797:!dvm$ get_actual(A)
        -: 9798:
        -: 9799:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9800:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9801:          if (ishft(B(i), C(i)) .ne. A(i)) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 53% (fallthrough)
branch  3 taken 47%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####: 9802:              erri = min(erri, i)
        -: 9803:          endif
        -: 9804:      enddo
        -: 9805:
        1: 9806:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9807:          call ansyes(tname)
call    0 returned 100%
        -: 9808:      else
    #####: 9809:          call ansno(tname)
call    0 never executed
        -: 9810:      endif 
        -: 9811:      
       1*: 9812:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9813:
        -: 9814:C -------------------------------------------------
        -: 9815:
function lshift1_ called 1 returned 100% blocks executed 82%
        1: 9816:      subroutine lshift1
        -: 9817:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9818:      character*24 tname
        -: 9819:      integer*1 A(N), B(N), C(N)
        -: 9820:      integer erri, i, asize, clock
        1: 9821:      integer, allocatable :: seed(:)
        -: 9822:      real tmp
        -: 9823:
        -: 9824:!dvm$ distribute A(BLOCK)
        -: 9825:
        1: 9826:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9827:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9828:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9829:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9830:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9831:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9832:
        1: 9833:      tname = 'lshift_char'
        1: 9834:      erri = ER
        -: 9835:
      257: 9836:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9837:          call random_number(tmp)
call    0 returned 100%
      256: 9838:          B(i) = int(tmp * W + S)
      256: 9839:          call random_number(tmp)
call    0 returned 100%
      257: 9840:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -: 9841:      enddo
        -: 9842:
        -: 9843:!dvm$ actual(B, C)
        -: 9844:!dvm$ region
        -: 9845:!dvm$ parallel (i) on A(i)
      257: 9846:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9847:          A(i) = lshift(B(i), C(i))
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -: 9848:      enddo
        -: 9849:!dvm$ end region
        -: 9850:!dvm$ get_actual(A)
        -: 9851:
        -: 9852:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9853:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9854:          if (lshift(B(i), C(i)) .ne. A(i)) then
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 9855:              erri = min(erri, i)
        -: 9856:          endif
        -: 9857:      enddo
        -: 9858:
        1: 9859:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9860:          call ansyes(tname)
call    0 returned 100%
        -: 9861:      else
    #####: 9862:          call ansno(tname)
call    0 never executed
        -: 9863:      endif 
        -: 9864:      
       1*: 9865:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9866:
        -: 9867:C -------------------------------------------------
        -: 9868:
function lshift2_ called 1 returned 100% blocks executed 82%
        1: 9869:      subroutine lshift2
        -: 9870:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9871:      character*24 tname
        -: 9872:      integer*2 A(N), B(N), C(N)
        -: 9873:      integer erri, i, asize, clock
        1: 9874:      integer, allocatable :: seed(:)
        -: 9875:      real tmp
        -: 9876:
        -: 9877:!dvm$ distribute A(BLOCK)
        -: 9878:
        1: 9879:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9880:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9881:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9882:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9883:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9884:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9885:
        1: 9886:      tname = 'lshift_short'
        1: 9887:      erri = ER
        -: 9888:
      257: 9889:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9890:          call random_number(tmp)
call    0 returned 100%
      256: 9891:          B(i) = int(tmp * W + S)
      256: 9892:          call random_number(tmp)
call    0 returned 100%
      257: 9893:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -: 9894:      enddo
        -: 9895:
        -: 9896:!dvm$ actual(B, C)
        -: 9897:!dvm$ region
        -: 9898:!dvm$ parallel (i) on A(i)
      257: 9899:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9900:          A(i) = lshift(B(i), C(i))
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -: 9901:      enddo
        -: 9902:!dvm$ end region
        -: 9903:!dvm$ get_actual(A)
        -: 9904:
        -: 9905:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9906:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9907:          if (lshift(B(i), C(i)) .ne. A(i)) then
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 9908:              erri = min(erri, i)
        -: 9909:          endif
        -: 9910:      enddo
        -: 9911:
        1: 9912:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9913:          call ansyes(tname)
call    0 returned 100%
        -: 9914:      else
    #####: 9915:          call ansno(tname)
call    0 never executed
        -: 9916:      endif 
        -: 9917:      
       1*: 9918:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9919:
        -: 9920:C -------------------------------------------------
        -: 9921:
function lshift3_ called 1 returned 100% blocks executed 82%
        1: 9922:      subroutine lshift3
        -: 9923:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9924:      character*24 tname
        -: 9925:      integer*4 A(N), B(N), C(N)
        -: 9926:      integer erri, i, asize, clock
        1: 9927:      integer, allocatable :: seed(:)
        -: 9928:      real tmp
        -: 9929:
        -: 9930:!dvm$ distribute A(BLOCK)
        -: 9931:
        1: 9932:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9933:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9934:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9935:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9936:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9937:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9938:
        1: 9939:      tname = 'lshift_long'
        1: 9940:      erri = ER
        -: 9941:
      257: 9942:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9943:          call random_number(tmp)
call    0 returned 100%
      256: 9944:          B(i) = int(tmp * W + S)
      256: 9945:          call random_number(tmp)
call    0 returned 100%
      257: 9946:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -: 9947:      enddo
        -: 9948:
        -: 9949:!dvm$ actual(B, C)
        -: 9950:!dvm$ region
        -: 9951:!dvm$ parallel (i) on A(i)
      257: 9952:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257: 9953:          A(i) = lshift(B(i), C(i))
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -: 9954:      enddo
        -: 9955:!dvm$ end region
        -: 9956:!dvm$ get_actual(A)
        -: 9957:
        -: 9958:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257: 9959:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257: 9960:          if (lshift(B(i), C(i)) .ne. A(i)) then
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 9961:              erri = min(erri, i)
        -: 9962:          endif
        -: 9963:      enddo
        -: 9964:
        1: 9965:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 9966:          call ansyes(tname)
call    0 returned 100%
        -: 9967:      else
    #####: 9968:          call ansno(tname)
call    0 never executed
        -: 9969:      endif 
        -: 9970:      
       1*: 9971:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 9972:
        -: 9973:C -------------------------------------------------
        -: 9974:
function lshift4_ called 1 returned 100% blocks executed 82%
        1: 9975:      subroutine lshift4
        -: 9976:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -: 9977:      character*24 tname
        -: 9978:      integer*8 A(N), B(N), C(N)
        -: 9979:      integer erri, i, asize, clock
        1: 9980:      integer, allocatable :: seed(:)
        -: 9981:      real tmp
        -: 9982:
        -: 9983:!dvm$ distribute A(BLOCK)
        -: 9984:
        1: 9985:      call random_seed(size = asize)
call    0 returned 100%
       3*: 9986:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1: 9987:      call system_clock(count = clock)
call    0 returned 100%
      34*: 9988:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1: 9989:      call random_seed(put = seed)
call    0 returned 100%
       1*: 9990:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -: 9991:
        1: 9992:      tname = 'lshift_longlong'
        1: 9993:      erri = ER
        -: 9994:
      257: 9995:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256: 9996:          call random_number(tmp)
call    0 returned 100%
      256: 9997:          B(i) = int(tmp * W + S)
      256: 9998:          call random_number(tmp)
call    0 returned 100%
      257: 9999:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10000:      enddo
        -:10001:
        -:10002:!dvm$ actual(B, C)
        -:10003:!dvm$ region
        -:10004:!dvm$ parallel (i) on A(i)
      257:10005:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:10006:          A(i) = lshift(B(i), C(i))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:10007:      enddo
        -:10008:!dvm$ end region
        -:10009:!dvm$ get_actual(A)
        -:10010:
        -:10011:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10012:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10013:          if (lshift(B(i), C(i)) .ne. A(i)) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:10014:              erri = min(erri, i)
        -:10015:          endif
        -:10016:      enddo
        -:10017:
        1:10018:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10019:          call ansyes(tname)
call    0 returned 100%
        -:10020:      else
    #####:10021:          call ansno(tname)
call    0 never executed
        -:10022:      endif 
        -:10023:      
       1*:10024:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10025:
        -:10026:C -------------------------------------------------
        -:10027:
function rshift1_ called 1 returned 100% blocks executed 83%
        1:10028:      subroutine rshift1
        -:10029:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10030:      character*24 tname
        -:10031:      integer*1 A(N), B(N), C(N)
        -:10032:      integer erri, i, asize, clock
        1:10033:      integer, allocatable :: seed(:)
        -:10034:      real tmp
        -:10035:
        -:10036:!dvm$ distribute A(BLOCK)
        -:10037:
        1:10038:      call random_seed(size = asize)
call    0 returned 100%
       3*:10039:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10040:      call system_clock(count = clock)
call    0 returned 100%
      34*:10041:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10042:      call random_seed(put = seed)
call    0 returned 100%
       1*:10043:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10044:
        1:10045:      tname = 'rshift_char'
        1:10046:      erri = ER
        -:10047:
      257:10048:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:10049:          call random_number(tmp)
call    0 returned 100%
      256:10050:          B(i) = int(tmp * W + S)
      256:10051:          call random_number(tmp)
call    0 returned 100%
      257:10052:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10053:      enddo
        -:10054:
        -:10055:!dvm$ actual(B, C)
        -:10056:!dvm$ region
        -:10057:!dvm$ parallel (i) on A(i)
      257:10058:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      274:10059:          A(i) = rshift(B(i), C(i))
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 46% (fallthrough)
branch  3 taken 54%
        -:10060:      enddo
        -:10061:!dvm$ end region
        -:10062:!dvm$ get_actual(A)
        -:10063:
        -:10064:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10065:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      274:10066:          if (rshift(B(i), C(i)) .ne. A(i)) then
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 46% (fallthrough)
branch  3 taken 54%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10067:              erri = min(erri, i)
        -:10068:          endif
        -:10069:      enddo
        -:10070:
        1:10071:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10072:          call ansyes(tname)
call    0 returned 100%
        -:10073:      else
    #####:10074:          call ansno(tname)
call    0 never executed
        -:10075:      endif 
        -:10076:      
       1*:10077:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10078:
        -:10079:C -------------------------------------------------
        -:10080:
function rshift2_ called 1 returned 100% blocks executed 83%
        1:10081:      subroutine rshift2
        -:10082:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10083:      character*24 tname
        -:10084:      integer*2 A(N), B(N), C(N)
        -:10085:      integer erri, i, asize, clock
        1:10086:      integer, allocatable :: seed(:)
        -:10087:      real tmp
        -:10088:
        -:10089:!dvm$ distribute A(BLOCK)
        -:10090:
        1:10091:      call random_seed(size = asize)
call    0 returned 100%
       3*:10092:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10093:      call system_clock(count = clock)
call    0 returned 100%
      34*:10094:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10095:      call random_seed(put = seed)
call    0 returned 100%
       1*:10096:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10097:
        1:10098:      tname = 'rshift_short'
        1:10099:      erri = ER
        -:10100:
      257:10101:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:10102:          call random_number(tmp)
call    0 returned 100%
      256:10103:          B(i) = int(tmp * W + S)
      256:10104:          call random_number(tmp)
call    0 returned 100%
      257:10105:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10106:      enddo
        -:10107:
        -:10108:!dvm$ actual(B, C)
        -:10109:!dvm$ region
        -:10110:!dvm$ parallel (i) on A(i)
      257:10111:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      269:10112:          A(i) = rshift(B(i), C(i))
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:10113:      enddo
        -:10114:!dvm$ end region
        -:10115:!dvm$ get_actual(A)
        -:10116:
        -:10117:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10118:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      269:10119:          if (rshift(B(i), C(i)) .ne. A(i)) then
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10120:              erri = min(erri, i)
        -:10121:          endif
        -:10122:      enddo
        -:10123:
        1:10124:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10125:          call ansyes(tname)
call    0 returned 100%
        -:10126:      else
    #####:10127:          call ansno(tname)
call    0 never executed
        -:10128:      endif 
        -:10129:      
       1*:10130:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10131:
        -:10132:C -------------------------------------------------
        -:10133:
function rshift3_ called 1 returned 100% blocks executed 83%
        1:10134:      subroutine rshift3
        -:10135:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10136:      character*24 tname
        -:10137:      integer*4 A(N), B(N), C(N)
        -:10138:      integer erri, i, asize, clock
        1:10139:      integer, allocatable :: seed(:)
        -:10140:      real tmp
        -:10141:
        -:10142:!dvm$ distribute A(BLOCK)
        -:10143:
        1:10144:      call random_seed(size = asize)
call    0 returned 100%
       3*:10145:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10146:      call system_clock(count = clock)
call    0 returned 100%
      34*:10147:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10148:      call random_seed(put = seed)
call    0 returned 100%
       1*:10149:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10150:
        1:10151:      tname = 'rshift_long'
        1:10152:      erri = ER
        -:10153:
      257:10154:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:10155:          call random_number(tmp)
call    0 returned 100%
      256:10156:          B(i) = int(tmp * W + S)
      256:10157:          call random_number(tmp)
call    0 returned 100%
      257:10158:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10159:      enddo
        -:10160:
        -:10161:!dvm$ actual(B, C)
        -:10162:!dvm$ region
        -:10163:!dvm$ parallel (i) on A(i)
      257:10164:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      266:10165:          A(i) = rshift(B(i), C(i))
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
        -:10166:      enddo
        -:10167:!dvm$ end region
        -:10168:!dvm$ get_actual(A)
        -:10169:
        -:10170:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10171:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      266:10172:          if (rshift(B(i), C(i)) .ne. A(i)) then
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10173:              erri = min(erri, i)
        -:10174:          endif
        -:10175:      enddo
        -:10176:
        1:10177:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10178:          call ansyes(tname)
call    0 returned 100%
        -:10179:      else
    #####:10180:          call ansno(tname)
call    0 never executed
        -:10181:      endif 
        -:10182:      
       1*:10183:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10184:
        -:10185:C -------------------------------------------------
        -:10186:
function rshift4_ called 1 returned 100% blocks executed 83%
        1:10187:      subroutine rshift4
        -:10188:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10189:      character*24 tname
        -:10190:      integer*8 A(N), B(N), C(N)
        -:10191:      integer erri, i, asize, clock
        1:10192:      integer, allocatable :: seed(:)
        -:10193:      real tmp
        -:10194:
        -:10195:!dvm$ distribute A(BLOCK)
        -:10196:
        1:10197:      call random_seed(size = asize)
call    0 returned 100%
       3*:10198:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10199:      call system_clock(count = clock)
call    0 returned 100%
      34*:10200:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10201:      call random_seed(put = seed)
call    0 returned 100%
       1*:10202:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10203:
        1:10204:      tname = 'rshift_longlong'
        1:10205:      erri = ER
        -:10206:
      257:10207:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:10208:          call random_number(tmp)
call    0 returned 100%
      256:10209:          B(i) = int(tmp * W + S)
      256:10210:          call random_number(tmp)
call    0 returned 100%
      257:10211:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10212:      enddo
        -:10213:
        -:10214:!dvm$ actual(B, C)
        -:10215:!dvm$ region
        -:10216:!dvm$ parallel (i) on A(i)
      257:10217:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      261:10218:          A(i) = rshift(B(i), C(i))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        -:10219:      enddo
        -:10220:!dvm$ end region
        -:10221:!dvm$ get_actual(A)
        -:10222:
        -:10223:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10224:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      261:10225:          if (rshift(B(i), C(i)) .ne. A(i)) then
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10226:              erri = min(erri, i)
        -:10227:          endif
        -:10228:      enddo
        -:10229:
        1:10230:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10231:          call ansyes(tname)
call    0 returned 100%
        -:10232:      else
    #####:10233:          call ansno(tname)
call    0 never executed
        -:10234:      endif 
        -:10235:      
       1*:10236:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10237:
        -:10238:C -------------------------------------------------
        -:10239:
function ishftc1_ called 1 returned 100% blocks executed 80%
        1:10240:      subroutine ishftc1
        -:10241:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10242:      character*24 tname
        -:10243:      integer*1 A(N), B(N), C(N)
        -:10244:      integer erri, i, asize, clock
        1:10245:      integer, allocatable :: seed(:)
        -:10246:      real tmp
        -:10247:
        -:10248:!dvm$ distribute A(BLOCK)
        -:10249:
        1:10250:      call random_seed(size = asize)
call    0 returned 100%
       3*:10251:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10252:      call system_clock(count = clock)
call    0 returned 100%
      34*:10253:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10254:      call random_seed(put = seed)
call    0 returned 100%
       1*:10255:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10256:
        1:10257:      tname = 'ishftc_char'
        1:10258:      erri = ER
        -:10259:
      257:10260:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:10261:          call random_number(tmp)
call    0 returned 100%
      256:10262:          B(i) = int(tmp * W + S)
      256:10263:          call random_number(tmp)
call    0 returned 100%
      257:10264:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10265:      enddo
        -:10266:
        -:10267:!dvm$ actual(B, C)
        -:10268:!dvm$ region
        -:10269:!dvm$ parallel (i) on A(i)
      257:10270:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
     257*:10271:          A(i) = ishftc(B(i), C(i))
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:10272:      enddo
        -:10273:!dvm$ end region
        -:10274:!dvm$ get_actual(A)
        -:10275:
        -:10276:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10277:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     257*:10278:          if (ishftc(B(i), C(i)) .ne. A(i)) then
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10279:              erri = min(erri, i)
        -:10280:          endif
        -:10281:      enddo
        -:10282:
        1:10283:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10284:          call ansyes(tname)
call    0 returned 100%
        -:10285:      else
    #####:10286:          call ansno(tname)
call    0 never executed
        -:10287:      endif 
        -:10288:      
       1*:10289:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10290:
        -:10291:C -------------------------------------------------
        -:10292:
function ishftc2_ called 1 returned 100% blocks executed 80%
        1:10293:      subroutine ishftc2
        -:10294:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10295:      character*24 tname
        -:10296:      integer*2 A(N), B(N), C(N)
        -:10297:      integer erri, i, asize, clock
        1:10298:      integer, allocatable :: seed(:)
        -:10299:      real tmp
        -:10300:
        -:10301:!dvm$ distribute A(BLOCK)
        -:10302:
        1:10303:      call random_seed(size = asize)
call    0 returned 100%
       3*:10304:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10305:      call system_clock(count = clock)
call    0 returned 100%
      34*:10306:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10307:      call random_seed(put = seed)
call    0 returned 100%
       1*:10308:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10309:
        1:10310:      tname = 'ishftc_short'
        1:10311:      erri = ER
        -:10312:
      257:10313:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:10314:          call random_number(tmp)
call    0 returned 100%
      256:10315:          B(i) = int(tmp * W + S)
      256:10316:          call random_number(tmp)
call    0 returned 100%
      257:10317:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10318:      enddo
        -:10319:
        -:10320:!dvm$ actual(B, C)
        -:10321:!dvm$ region
        -:10322:!dvm$ parallel (i) on A(i)
      257:10323:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
     257*:10324:          A(i) = ishftc(B(i), C(i))
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:10325:      enddo
        -:10326:!dvm$ end region
        -:10327:!dvm$ get_actual(A)
        -:10328:
        -:10329:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10330:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     257*:10331:          if (ishftc(B(i), C(i)) .ne. A(i)) then
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10332:              erri = min(erri, i)
        -:10333:          endif
        -:10334:      enddo
        -:10335:
        1:10336:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10337:          call ansyes(tname)
call    0 returned 100%
        -:10338:      else
    #####:10339:          call ansno(tname)
call    0 never executed
        -:10340:      endif 
        -:10341:      
       1*:10342:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10343:
        -:10344:C -------------------------------------------------
        -:10345:
function ishftc3_ called 1 returned 100% blocks executed 80%
        1:10346:      subroutine ishftc3
        -:10347:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10348:      character*24 tname
        -:10349:      integer*4 A(N), B(N), C(N)
        -:10350:      integer erri, i, asize, clock
        1:10351:      integer, allocatable :: seed(:)
        -:10352:      real tmp
        -:10353:
        -:10354:!dvm$ distribute A(BLOCK)
        -:10355:
        1:10356:      call random_seed(size = asize)
call    0 returned 100%
       3*:10357:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10358:      call system_clock(count = clock)
call    0 returned 100%
      34*:10359:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10360:      call random_seed(put = seed)
call    0 returned 100%
       1*:10361:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10362:
        1:10363:      tname = 'ishftc_long'
        1:10364:      erri = ER
        -:10365:
      257:10366:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:10367:          call random_number(tmp)
call    0 returned 100%
      256:10368:          B(i) = int(tmp * W + S)
      256:10369:          call random_number(tmp)
call    0 returned 100%
      257:10370:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10371:      enddo
        -:10372:
        -:10373:!dvm$ actual(B, C)
        -:10374:!dvm$ region
        -:10375:!dvm$ parallel (i) on A(i)
      257:10376:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
     257*:10377:          A(i) = ishftc(B(i), C(i))
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:10378:      enddo
        -:10379:!dvm$ end region
        -:10380:!dvm$ get_actual(A)
        -:10381:
        -:10382:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10383:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     257*:10384:          if (ishftc(B(i), C(i)) .ne. A(i)) then
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10385:              erri = min(erri, i)
        -:10386:          endif
        -:10387:      enddo
        -:10388:
        1:10389:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10390:          call ansyes(tname)
call    0 returned 100%
        -:10391:      else
    #####:10392:          call ansno(tname)
call    0 never executed
        -:10393:      endif 
        -:10394:      
       1*:10395:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10396:
        -:10397:C -------------------------------------------------
        -:10398:
function ishftc4_ called 1 returned 100% blocks executed 80%
        1:10399:      subroutine ishftc4
        -:10400:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10401:      character*24 tname
        -:10402:      integer*8 A(N), B(N), C(N)
        -:10403:      integer erri, i, asize, clock
        1:10404:      integer, allocatable :: seed(:)
        -:10405:      real tmp
        -:10406:
        -:10407:!dvm$ distribute A(BLOCK)
        -:10408:
        1:10409:      call random_seed(size = asize)
call    0 returned 100%
       3*:10410:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10411:      call system_clock(count = clock)
call    0 returned 100%
      34*:10412:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10413:      call random_seed(put = seed)
call    0 returned 100%
       1*:10414:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10415:
        1:10416:      tname = 'ishftc_longlong'
        1:10417:      erri = ER
        -:10418:
      257:10419:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:10420:          call random_number(tmp)
call    0 returned 100%
      256:10421:          B(i) = int(tmp * W + S)
      256:10422:          call random_number(tmp)
call    0 returned 100%
      257:10423:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:10424:      enddo
        -:10425:
        -:10426:!dvm$ actual(B, C)
        -:10427:!dvm$ region
        -:10428:!dvm$ parallel (i) on A(i)
      257:10429:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
     257*:10430:          A(i) = ishftc(B(i), C(i))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:10431:      enddo
        -:10432:!dvm$ end region
        -:10433:!dvm$ get_actual(A)
        -:10434:
        -:10435:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10436:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     257*:10437:          if (ishftc(B(i), C(i)) .ne. A(i)) then
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:10438:              erri = min(erri, i)
        -:10439:          endif
        -:10440:      enddo
        -:10441:
        1:10442:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10443:          call ansyes(tname)
call    0 returned 100%
        -:10444:      else
    #####:10445:          call ansno(tname)
call    0 never executed
        -:10446:      endif 
        -:10447:      
       1*:10448:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10449:
        -:10450:C -------------------------------------------------
        -:10451:
function ishftc5_ called 1 returned 100% blocks executed 80%
        1:10452:      subroutine ishftc5
        -:10453:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10454:      character*24 tname
        -:10455:      integer*1 A(N), B(N), C(N), D(N)
        -:10456:      integer erri, i, asize, clock
        1:10457:      integer, allocatable :: seed(:)
        -:10458:      real tmp
        -:10459:
        -:10460:!dvm$ distribute A(BLOCK)
        -:10461:
        1:10462:      call random_seed(size = asize)
call    0 returned 100%
       3*:10463:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10464:      call system_clock(count = clock)
call    0 returned 100%
      34*:10465:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10466:      call random_seed(put = seed)
call    0 returned 100%
       1*:10467:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10468:
        1:10469:      tname = 'ishftc_char'
        1:10470:      erri = ER
        -:10471:
      257:10472:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10473:          call random_number(tmp)
call    0 returned 100%
      256:10474:          B(i) = int(tmp * W + S)
      256:10475:          call random_number(tmp)
call    0 returned 100%
      256:10476:          D(i) = int(tmp * bit_size(D(i)) + 1)
      256:10477:          call random_number(tmp)
call    0 returned 100%
      257:10478:          C(i) = int(tmp * D(i))
        -:10479:      enddo
        -:10480:
        -:10481:!dvm$ actual(B, C, D)
        -:10482:!dvm$ region
        -:10483:!dvm$ parallel (i) on A(i)
      257:10484:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10485:          A(i) = ishftc(B(i), C(i), D(i))
        -:10486:      enddo
        -:10487:!dvm$ end region
        -:10488:!dvm$ get_actual(A)
        -:10489:
        -:10490:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10491:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10492:          if (ishftc(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10493:              erri = min(erri, i)
        -:10494:          endif
        -:10495:      enddo
        -:10496:
        1:10497:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10498:          call ansyes(tname)
call    0 returned 100%
        -:10499:      else
    #####:10500:          call ansno(tname)
call    0 never executed
        -:10501:      endif 
        -:10502:      
       1*:10503:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10504:
        -:10505:C -------------------------------------------------
        -:10506:
function ishftc6_ called 1 returned 100% blocks executed 80%
        1:10507:      subroutine ishftc6
        -:10508:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10509:      character*24 tname
        -:10510:      integer*2 A(N), B(N), C(N), D(N)
        -:10511:      integer erri, i, asize, clock
        1:10512:      integer, allocatable :: seed(:)
        -:10513:      real tmp
        -:10514:
        -:10515:!dvm$ distribute A(BLOCK)
        -:10516:
        1:10517:      call random_seed(size = asize)
call    0 returned 100%
       3*:10518:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10519:      call system_clock(count = clock)
call    0 returned 100%
      34*:10520:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10521:      call random_seed(put = seed)
call    0 returned 100%
       1*:10522:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10523:
        1:10524:      tname = 'ishftc_short'
        1:10525:      erri = ER
        -:10526:
      257:10527:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10528:          call random_number(tmp)
call    0 returned 100%
      256:10529:          B(i) = int(tmp * W + S)
      256:10530:          call random_number(tmp)
call    0 returned 100%
      256:10531:          D(i) = int(tmp * bit_size(D(i)) + 1)
      256:10532:          call random_number(tmp)
call    0 returned 100%
      257:10533:          C(i) = int(tmp * D(i))
        -:10534:      enddo
        -:10535:
        -:10536:!dvm$ actual(B, C, D)
        -:10537:!dvm$ region
        -:10538:!dvm$ parallel (i) on A(i)
      257:10539:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10540:          A(i) = ishftc(B(i), C(i), D(i))
        -:10541:      enddo
        -:10542:!dvm$ end region
        -:10543:!dvm$ get_actual(A)
        -:10544:
        -:10545:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10546:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10547:          if (ishftc(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10548:              erri = min(erri, i)
        -:10549:          endif
        -:10550:      enddo
        -:10551:
        1:10552:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10553:          call ansyes(tname)
call    0 returned 100%
        -:10554:      else
    #####:10555:          call ansno(tname)
call    0 never executed
        -:10556:      endif 
        -:10557:      
       1*:10558:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10559:
        -:10560:C -------------------------------------------------
        -:10561:
function ishftc7_ called 1 returned 100% blocks executed 80%
        1:10562:      subroutine ishftc7
        -:10563:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10564:      character*24 tname
        -:10565:      integer*4 A(N), B(N), C(N), D(N)
        -:10566:      integer erri, i, asize, clock
        1:10567:      integer, allocatable :: seed(:)
        -:10568:      real tmp
        -:10569:
        -:10570:!dvm$ distribute A(BLOCK)
        -:10571:
        1:10572:      call random_seed(size = asize)
call    0 returned 100%
       3*:10573:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10574:      call system_clock(count = clock)
call    0 returned 100%
      34*:10575:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10576:      call random_seed(put = seed)
call    0 returned 100%
       1*:10577:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10578:
        1:10579:      tname = 'ishftc_long'
        1:10580:      erri = ER
        -:10581:
      257:10582:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10583:          call random_number(tmp)
call    0 returned 100%
      256:10584:          B(i) = int(tmp * W + S)
      256:10585:          call random_number(tmp)
call    0 returned 100%
      256:10586:          D(i) = int(tmp * bit_size(D(i)) + 1)
      256:10587:          call random_number(tmp)
call    0 returned 100%
      257:10588:          C(i) = int(tmp * D(i))
        -:10589:      enddo
        -:10590:
        -:10591:!dvm$ actual(B, C, D)
        -:10592:!dvm$ region
        -:10593:!dvm$ parallel (i) on A(i)
      257:10594:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10595:          A(i) = ishftc(B(i), C(i), D(i))
        -:10596:      enddo
        -:10597:!dvm$ end region
        -:10598:!dvm$ get_actual(A)
        -:10599:
        -:10600:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10601:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10602:          if (ishftc(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10603:              erri = min(erri, i)
        -:10604:          endif
        -:10605:      enddo
        -:10606:
        1:10607:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10608:          call ansyes(tname)
call    0 returned 100%
        -:10609:      else
    #####:10610:          call ansno(tname)
call    0 never executed
        -:10611:      endif 
        -:10612:      
       1*:10613:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10614:
        -:10615:C -------------------------------------------------
        -:10616:
function ishftc8_ called 1 returned 100% blocks executed 80%
        1:10617:      subroutine ishftc8
        -:10618:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:10619:      character*24 tname
        -:10620:      integer*8 A(N), B(N), C(N), D(N)
        -:10621:      integer erri, i, asize, clock
        1:10622:      integer, allocatable :: seed(:)
        -:10623:      real tmp
        -:10624:
        -:10625:!dvm$ distribute A(BLOCK)
        -:10626:
        1:10627:      call random_seed(size = asize)
call    0 returned 100%
       3*:10628:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10629:      call system_clock(count = clock)
call    0 returned 100%
      34*:10630:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10631:      call random_seed(put = seed)
call    0 returned 100%
       1*:10632:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10633:
        1:10634:      tname = 'ishftc_longlong'
        1:10635:      erri = ER
        -:10636:
      257:10637:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10638:          call random_number(tmp)
call    0 returned 100%
      256:10639:          B(i) = int(tmp * W + S)
      256:10640:          call random_number(tmp)
call    0 returned 100%
      256:10641:          D(i) = int(tmp * bit_size(D(i)) + 1)
      256:10642:          call random_number(tmp)
call    0 returned 100%
      257:10643:          C(i) = int(tmp * D(i))
        -:10644:      enddo
        -:10645:
        -:10646:!dvm$ actual(B, C, D)
        -:10647:!dvm$ region
        -:10648:!dvm$ parallel (i) on A(i)
      257:10649:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10650:          A(i) = ishftc(B(i), C(i), D(i))
        -:10651:      enddo
        -:10652:!dvm$ end region
        -:10653:!dvm$ get_actual(A)
        -:10654:
        -:10655:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:10656:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10657:          if (ishftc(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10658:              erri = min(erri, i)
        -:10659:          endif
        -:10660:      enddo
        -:10661:
        1:10662:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10663:          call ansyes(tname)
call    0 returned 100%
        -:10664:      else
    #####:10665:          call ansno(tname)
call    0 never executed
        -:10666:      endif 
        -:10667:      
       1*:10668:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10669:
        -:10670:C -------------------------------------------------
        -:10671:
function log1_ called 1 returned 100% blocks executed 79%
        1:10672:      subroutine log1
        -:10673:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:10674:      real, parameter :: EPS = 1e-6
        -:10675:      character*24 tname
        -:10676:      real A(N), B(N)
        -:10677:      integer erri, i, asize, clock
        1:10678:      integer, allocatable :: seed(:)
        -:10679:      real tmp
        -:10680:
        -:10681:!dvm$ distribute A(BLOCK)
        -:10682:
        1:10683:      call random_seed(size = asize)
call    0 returned 100%
       3*:10684:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10685:      call system_clock(count = clock)
call    0 returned 100%
      34*:10686:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10687:      call random_seed(put = seed)
call    0 returned 100%
       1*:10688:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10689:
        1:10690:      tname = 'log_float'
        1:10691:      erri = ER
        -:10692:
      257:10693:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10694:          call random_number(B(i))
call    0 returned 100%
      257:10695:          B(i) = B(i) * W + S
        -:10696:      enddo
        -:10697:
        -:10698:!dvm$ actual(B)	  
        -:10699:!dvm$ region
        -:10700:!dvm$ parallel (i) on A(i)
      257:10701:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10702:          A(i) = log(B(i))
        -:10703:      enddo
        -:10704:!dvm$ end region
        -:10705:!dvm$ get_actual(A)
        -:10706:
        -:10707:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:10708:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10709:          tmp = log(B(i))
      257:10710:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10711:              erri = min(erri, i)
        -:10712:          endif
        -:10713:      enddo
        -:10714:
        1:10715:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10716:          call ansyes(tname)
call    0 returned 100%
        -:10717:      else
    #####:10718:          call ansno(tname)
call    0 never executed
        -:10719:      endif 
        -:10720:      
       1*:10721:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10722:
        -:10723:C -------------------------------------------------
        -:10724:
function log2_ called 1 returned 100% blocks executed 79%
        1:10725:      subroutine log2
        -:10726:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:10727:      real*8, parameter :: EPS = 1d-15
        -:10728:      character*24 tname
        -:10729:      real*8 A(N), B(N)
        -:10730:      integer erri, i, asize, clock
        1:10731:      integer, allocatable :: seed(:)
        -:10732:      real*8 tmp
        -:10733:
        -:10734:!dvm$ distribute A(BLOCK)
        -:10735:
        1:10736:      call random_seed(size = asize)
call    0 returned 100%
       3*:10737:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10738:      call system_clock(count = clock)
call    0 returned 100%
      34*:10739:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10740:      call random_seed(put = seed)
call    0 returned 100%
       1*:10741:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10742:
        1:10743:      tname = 'log_double'
        1:10744:      erri = ER
        -:10745:
      257:10746:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10747:          call random_number(B(i))
call    0 returned 100%
      257:10748:          B(i) = B(i) * W + S
        -:10749:      enddo
        -:10750:
        -:10751:!dvm$ actual(B)
        -:10752:!dvm$ region
        -:10753:!dvm$ parallel (i) on A(i)
      257:10754:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10755:          A(i) = log(B(i))
        -:10756:      enddo
        -:10757:!dvm$ end region
        -:10758:!dvm$ get_actual(A)
        -:10759:
        -:10760:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:10761:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10762:          tmp = log(B(i))
      257:10763:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10764:              erri = min(erri, i)
        -:10765:          endif
        -:10766:      enddo
        -:10767:
        1:10768:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10769:          call ansyes(tname)
call    0 returned 100%
        -:10770:      else
    #####:10771:          call ansno(tname)
call    0 never executed
        -:10772:      endif 
        -:10773:      
       1*:10774:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10775:
        -:10776:C -------------------------------------------------
        -:10777:
function log3_ called 1 returned 100% blocks executed 80%
        1:10778:      subroutine log3
        -:10779:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:10780:      real*8, parameter :: EPS = 1e-6
        -:10781:      character*24 tname
        -:10782:      complex A(N), B(N)
        -:10783:      real x, y
        -:10784:      integer erri, i, asize, clock
        1:10785:      integer, allocatable :: seed(:)
        -:10786:      complex tmp
        -:10787:
        -:10788:!dvm$ distribute A(BLOCK)
        -:10789:
        1:10790:      call random_seed(size = asize)
call    0 returned 100%
       3*:10791:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10792:      call system_clock(count = clock)
call    0 returned 100%
      34*:10793:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10794:      call random_seed(put = seed)
call    0 returned 100%
       1*:10795:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10796:
        1:10797:      tname = 'log_complexf'
        1:10798:      erri = ER
        -:10799:
      257:10800:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10801:          call random_number(x)
call    0 returned 100%
      256:10802:          call random_number(y)
call    0 returned 100%
      257:10803:          B(i) = cmplx(x * W + S, y * W + S)
        -:10804:      enddo
        -:10805:
        -:10806:!dvm$ actual(B)
        -:10807:!dvm$ region
        -:10808:!dvm$ parallel (i) on A(i)
      257:10809:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10810:          A(i) = log(B(i))
        -:10811:      enddo
        -:10812:!dvm$ end region
        -:10813:!dvm$ get_actual(A)
        -:10814:
        -:10815:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:10816:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10817:          tmp = log(B(i))
      257:10818:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10819:              erri = min(erri, i)
        -:10820:          endif
        -:10821:      enddo
        -:10822:
        1:10823:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10824:          call ansyes(tname)
call    0 returned 100%
        -:10825:      else
    #####:10826:          call ansno(tname)
call    0 never executed
        -:10827:      endif 
        -:10828:      
       1*:10829:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10830:
        -:10831:C -------------------------------------------------
        -:10832:
function log4_ called 1 returned 100% blocks executed 80%
        1:10833:      subroutine log4
        -:10834:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:10835:      real*8, parameter :: EPS = 1d-15
        -:10836:      character*24 tname
        -:10837:      double complex A(N), B(N)
        -:10838:      real*8 x, y
        -:10839:      integer erri, i, asize, clock
        1:10840:      integer, allocatable :: seed(:)
        -:10841:      double complex tmp
        -:10842:
        -:10843:!dvm$ distribute A(BLOCK)
        -:10844:
        1:10845:      call random_seed(size = asize)
call    0 returned 100%
       3*:10846:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10847:      call system_clock(count = clock)
call    0 returned 100%
      34*:10848:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10849:      call random_seed(put = seed)
call    0 returned 100%
       1*:10850:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10851:
        1:10852:      tname = 'log_complexd'
        1:10853:      erri = ER
        -:10854:
      257:10855:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10856:          call random_number(x)
call    0 returned 100%
      256:10857:          call random_number(y)
call    0 returned 100%
      257:10858:          B(i) = dcmplx(x * W + S, y * W + S)
        -:10859:      enddo
        -:10860:
        -:10861:!dvm$ actual(B)
        -:10862:!dvm$ region
        -:10863:!dvm$ parallel (i) on A(i)
      257:10864:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10865:          A(i) = log(B(i))
        -:10866:      enddo
        -:10867:!dvm$ end region
        -:10868:!dvm$ get_actual(A)
        -:10869:
        -:10870:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:10871:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10872:          tmp = log(B(i))
      257:10873:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10874:              erri = min(erri, i)
        -:10875:          endif
        -:10876:      enddo
        -:10877:
        1:10878:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10879:          call ansyes(tname)
call    0 returned 100%
        -:10880:      else
    #####:10881:          call ansno(tname)
call    0 never executed
        -:10882:      endif 
        -:10883:      
       1*:10884:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10885:
        -:10886:C -------------------------------------------------
        -:10887:
function log5_ called 1 returned 100% blocks executed 79%
        1:10888:      subroutine log5
        -:10889:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:10890:      real, parameter :: EPS = 1e-6
        -:10891:      character*24 tname
        -:10892:      real A(N), B(N)
        -:10893:      integer erri, i, asize, clock
        1:10894:      integer, allocatable :: seed(:)
        -:10895:      real tmp
        -:10896:
        -:10897:!dvm$ distribute A(BLOCK)
        -:10898:
        1:10899:      call random_seed(size = asize)
call    0 returned 100%
       3*:10900:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10901:      call system_clock(count = clock)
call    0 returned 100%
      34*:10902:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10903:      call random_seed(put = seed)
call    0 returned 100%
       1*:10904:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10905:
        1:10906:      tname = 'alog_float'
        1:10907:      erri = ER
        -:10908:
      257:10909:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10910:          call random_number(B(i))
call    0 returned 100%
      257:10911:          B(i) = B(i) * W + S
        -:10912:      enddo
        -:10913:
        -:10914:!dvm$ actual(B)	  
        -:10915:!dvm$ region
        -:10916:!dvm$ parallel (i) on A(i)
      257:10917:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10918:          A(i) = alog(B(i))
        -:10919:      enddo
        -:10920:!dvm$ end region
        -:10921:!dvm$ get_actual(A)
        -:10922:
        -:10923:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:10924:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10925:          tmp = alog(B(i))
      257:10926:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10927:              erri = min(erri, i)
        -:10928:          endif
        -:10929:      enddo
        -:10930:
        1:10931:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10932:          call ansyes(tname)
call    0 returned 100%
        -:10933:      else
    #####:10934:          call ansno(tname)
call    0 never executed
        -:10935:      endif 
        -:10936:      
       1*:10937:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10938:
        -:10939:C -------------------------------------------------
        -:10940:
function log6_ called 1 returned 100% blocks executed 79%
        1:10941:      subroutine log6
        -:10942:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:10943:      real*8, parameter :: EPS = 1d-15
        -:10944:      character*24 tname
        -:10945:      real*8 A(N), B(N)
        -:10946:      integer erri, i, asize, clock
        1:10947:      integer, allocatable :: seed(:)
        -:10948:      real*8 tmp
        -:10949:
        -:10950:!dvm$ distribute A(BLOCK)
        -:10951:
        1:10952:      call random_seed(size = asize)
call    0 returned 100%
       3*:10953:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:10954:      call system_clock(count = clock)
call    0 returned 100%
      34*:10955:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:10956:      call random_seed(put = seed)
call    0 returned 100%
       1*:10957:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:10958:
        1:10959:      tname = 'dlog_double'
        1:10960:      erri = ER
        -:10961:
      257:10962:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10963:          call random_number(B(i))
call    0 returned 100%
      257:10964:          B(i) = B(i) * W + S
        -:10965:      enddo
        -:10966:
        -:10967:!dvm$ actual(B)
        -:10968:!dvm$ region
        -:10969:!dvm$ parallel (i) on A(i)
      257:10970:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:10971:          A(i) = dlog(B(i))
        -:10972:      enddo
        -:10973:!dvm$ end region
        -:10974:!dvm$ get_actual(A)
        -:10975:
        -:10976:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:10977:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:10978:          tmp = dlog(B(i))
      257:10979:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:10980:              erri = min(erri, i)
        -:10981:          endif
        -:10982:      enddo
        -:10983:
        1:10984:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:10985:          call ansyes(tname)
call    0 returned 100%
        -:10986:      else
    #####:10987:          call ansno(tname)
call    0 never executed
        -:10988:      endif 
        -:10989:      
       1*:10990:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:10991:
        -:10992:C -------------------------------------------------
        -:10993:
function log7_ called 1 returned 100% blocks executed 80%
        1:10994:      subroutine log7
        -:10995:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:10996:      real, parameter :: EPS = 1e-6
        -:10997:      character*24 tname
        -:10998:      complex A(N), B(N)
        -:10999:      real x, y
        -:11000:      integer erri, i, asize, clock
        1:11001:      integer, allocatable :: seed(:)
        -:11002:      complex tmp
        -:11003:
        -:11004:!dvm$ distribute A(BLOCK)
        -:11005:
        1:11006:      call random_seed(size = asize)
call    0 returned 100%
       3*:11007:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11008:      call system_clock(count = clock)
call    0 returned 100%
      34*:11009:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11010:      call random_seed(put = seed)
call    0 returned 100%
       1*:11011:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11012:
        1:11013:      tname = 'clog_complexf'
        1:11014:      erri = ER
        -:11015:
      257:11016:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11017:          call random_number(x)
call    0 returned 100%
      256:11018:          call random_number(y)
call    0 returned 100%
      257:11019:          B(i) = cmplx(x * W + S, y * W + S)
        -:11020:      enddo
        -:11021:
        -:11022:!dvm$ actual(B)
        -:11023:!dvm$ region
        -:11024:!dvm$ parallel (i) on A(i)
      257:11025:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11026:          A(i) = clog(B(i))
        -:11027:      enddo
        -:11028:!dvm$ end region
        -:11029:!dvm$ get_actual(A)
        -:11030:
        -:11031:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11032:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11033:          tmp = clog(B(i))
      257:11034:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11035:              erri = min(erri, i)
        -:11036:          endif
        -:11037:      enddo
        -:11038:
        1:11039:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11040:          call ansyes(tname)
call    0 returned 100%
        -:11041:      else
    #####:11042:          call ansno(tname)
call    0 never executed
        -:11043:      endif 
        -:11044:      
       1*:11045:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11046:
        -:11047:C -------------------------------------------------
        -:11048:
function log8_ called 1 returned 100% blocks executed 80%
        1:11049:      subroutine log8
        -:11050:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:11051:      real*8, parameter :: EPS = 1d-15
        -:11052:      character*24 tname
        -:11053:      double complex A(N), B(N)
        -:11054:      real*8 x, y
        -:11055:      integer erri, i, asize, clock
        1:11056:      integer, allocatable :: seed(:)
        -:11057:      double complex tmp
        -:11058:
        -:11059:!dvm$ distribute A(BLOCK)
        -:11060:
        1:11061:      call random_seed(size = asize)
call    0 returned 100%
       3*:11062:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11063:      call system_clock(count = clock)
call    0 returned 100%
      34*:11064:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11065:      call random_seed(put = seed)
call    0 returned 100%
       1*:11066:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11067:
        1:11068:      tname = 'cdlog_complexd'
        1:11069:      erri = ER
        -:11070:
      257:11071:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11072:          call random_number(x)
call    0 returned 100%
      256:11073:          call random_number(y)
call    0 returned 100%
      257:11074:          B(i) = dcmplx(x * W + S, y * W + S)
        -:11075:      enddo
        -:11076:
        -:11077:!dvm$ actual(B)
        -:11078:!dvm$ region
        -:11079:!dvm$ parallel (i) on A(i)
      257:11080:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11081:          A(i) = cdlog(B(i))
        -:11082:      enddo
        -:11083:!dvm$ end region
        -:11084:!dvm$ get_actual(A)
        -:11085:
        -:11086:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11087:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11088:          tmp = cdlog(B(i))
      257:11089:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11090:              erri = min(erri, i)
        -:11091:          endif
        -:11092:      enddo
        -:11093:
        1:11094:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11095:          call ansyes(tname)
call    0 returned 100%
        -:11096:      else
    #####:11097:          call ansno(tname)
call    0 never executed
        -:11098:      endif 
        -:11099:      
       1*:11100:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11101:
        -:11102:C -------------------------------------------------
        -:11103:
function log9_ called 1 returned 100% blocks executed 80%
        1:11104:      subroutine log9
        -:11105:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:11106:      real*8, parameter :: EPS = 1d-15
        -:11107:      character*24 tname
        -:11108:      double complex A(N), B(N)
        -:11109:      real*8 x, y
        -:11110:      integer erri, i, asize, clock
        1:11111:      integer, allocatable :: seed(:)
        -:11112:      double complex tmp
        -:11113:
        -:11114:!dvm$ distribute A(BLOCK)
        -:11115:
        1:11116:      call random_seed(size = asize)
call    0 returned 100%
       3*:11117:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11118:      call system_clock(count = clock)
call    0 returned 100%
      34*:11119:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11120:      call random_seed(put = seed)
call    0 returned 100%
       1*:11121:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11122:
        1:11123:      tname = 'zlog_complexd'
        1:11124:      erri = ER
        -:11125:
      257:11126:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11127:          call random_number(x)
call    0 returned 100%
      256:11128:          call random_number(y)
call    0 returned 100%
      257:11129:          B(i) = dcmplx(x * W + S, y * W + S)
        -:11130:      enddo
        -:11131:
        -:11132:!dvm$ actual(B)
        -:11133:!dvm$ region
        -:11134:!dvm$ parallel (i) on A(i)
      257:11135:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11136:          A(i) = zlog(B(i))
        -:11137:      enddo
        -:11138:!dvm$ end region
        -:11139:!dvm$ get_actual(A)
        -:11140:
        -:11141:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11142:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11143:          tmp = zlog(B(i))
      257:11144:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11145:              erri = min(erri, i)
        -:11146:          endif
        -:11147:      enddo
        -:11148:
        1:11149:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11150:          call ansyes(tname)
call    0 returned 100%
        -:11151:      else
    #####:11152:          call ansno(tname)
call    0 never executed
        -:11153:      endif 
        -:11154:      
       1*:11155:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11156:
        -:11157:C -------------------------------------------------
        -:11158:
function log101_ called 1 returned 100% blocks executed 79%
        1:11159:      subroutine log101
        -:11160:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:11161:      real, parameter :: EPS = 1e-6
        -:11162:      character*24 tname
        -:11163:      real A(N), B(N)
        -:11164:      integer erri, i, asize, clock
        1:11165:      integer, allocatable :: seed(:)
        -:11166:      real tmp
        -:11167:
        -:11168:!dvm$ distribute A(BLOCK)
        -:11169:
        1:11170:      call random_seed(size = asize)
call    0 returned 100%
       3*:11171:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11172:      call system_clock(count = clock)
call    0 returned 100%
      34*:11173:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11174:      call random_seed(put = seed)
call    0 returned 100%
       1*:11175:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11176:
        1:11177:      tname = 'log10_float'
        1:11178:      erri = ER
        -:11179:
      257:11180:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11181:          call random_number(B(i))
call    0 returned 100%
      257:11182:          B(i) = B(i) * W + S
        -:11183:      enddo
        -:11184:
        -:11185:!dvm$ actual(B)	  
        -:11186:!dvm$ region
        -:11187:!dvm$ parallel (i) on A(i)
      257:11188:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11189:          A(i) = log10(B(i))
        -:11190:      enddo
        -:11191:!dvm$ end region
        -:11192:!dvm$ get_actual(A)
        -:11193:
        -:11194:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11195:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11196:          tmp = log10(B(i))
      257:11197:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11198:              erri = min(erri, i)
        -:11199:          endif
        -:11200:      enddo
        -:11201:
        1:11202:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11203:          call ansyes(tname)
call    0 returned 100%
        -:11204:      else
    #####:11205:          call ansno(tname)
call    0 never executed
        -:11206:      endif 
        -:11207:      
       1*:11208:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11209:
        -:11210:C -------------------------------------------------
        -:11211:
function log102_ called 1 returned 100% blocks executed 79%
        1:11212:      subroutine log102
        -:11213:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:11214:      real*8, parameter :: EPS = 1d-15
        -:11215:      character*24 tname
        -:11216:      real*8 A(N), B(N)
        -:11217:      integer erri, i, asize, clock
        1:11218:      integer, allocatable :: seed(:)
        -:11219:      real*8 tmp
        -:11220:
        -:11221:!dvm$ distribute A(BLOCK)
        -:11222:
        1:11223:      call random_seed(size = asize)
call    0 returned 100%
       3*:11224:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11225:      call system_clock(count = clock)
call    0 returned 100%
      34*:11226:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11227:      call random_seed(put = seed)
call    0 returned 100%
       1*:11228:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11229:
        1:11230:      tname = 'log10_double'
        1:11231:      erri = ER
        -:11232:
      257:11233:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11234:          call random_number(B(i))
call    0 returned 100%
      257:11235:          B(i) = B(i) * W + S
        -:11236:      enddo
        -:11237:
        -:11238:!dvm$ actual(B)
        -:11239:!dvm$ region
        -:11240:!dvm$ parallel (i) on A(i)
      257:11241:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11242:          A(i) = log10(B(i))
        -:11243:      enddo
        -:11244:!dvm$ end region
        -:11245:!dvm$ get_actual(A)
        -:11246:
        -:11247:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11248:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11249:          tmp = log10(B(i))
      257:11250:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11251:              erri = min(erri, i)
        -:11252:          endif
        -:11253:      enddo
        -:11254:
        1:11255:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11256:          call ansyes(tname)
call    0 returned 100%
        -:11257:      else
    #####:11258:          call ansno(tname)
call    0 never executed
        -:11259:      endif 
        -:11260:      
       1*:11261:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11262:
        -:11263:C -------------------------------------------------
        -:11264:
function log105_ called 1 returned 100% blocks executed 79%
        1:11265:      subroutine log105
        -:11266:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:11267:      real, parameter :: EPS = 1e-6
        -:11268:      character*24 tname
        -:11269:      real A(N), B(N)
        -:11270:      integer erri, i, asize, clock
        1:11271:      integer, allocatable :: seed(:)
        -:11272:      real tmp
        -:11273:
        -:11274:!dvm$ distribute A(BLOCK)
        -:11275:
        1:11276:      call random_seed(size = asize)
call    0 returned 100%
       3*:11277:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11278:      call system_clock(count = clock)
call    0 returned 100%
      34*:11279:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11280:      call random_seed(put = seed)
call    0 returned 100%
       1*:11281:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11282:
        1:11283:      tname = 'alog10_float'
        1:11284:      erri = ER
        -:11285:
      257:11286:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11287:          call random_number(B(i))
call    0 returned 100%
      257:11288:          B(i) = B(i) * W + S
        -:11289:      enddo
        -:11290:
        -:11291:!dvm$ actual(B)	  
        -:11292:!dvm$ region
        -:11293:!dvm$ parallel (i) on A(i)
      257:11294:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11295:          A(i) = alog10(B(i))
        -:11296:      enddo
        -:11297:!dvm$ end region
        -:11298:!dvm$ get_actual(A)
        -:11299:
        -:11300:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11301:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11302:          tmp = alog10(B(i))
      257:11303:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11304:              erri = min(erri, i)
        -:11305:          endif
        -:11306:      enddo
        -:11307:
        1:11308:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11309:          call ansyes(tname)
call    0 returned 100%
        -:11310:      else
    #####:11311:          call ansno(tname)
call    0 never executed
        -:11312:      endif 
        -:11313:      
       1*:11314:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11315:
        -:11316:C -------------------------------------------------
        -:11317:
function log106_ called 1 returned 100% blocks executed 79%
        1:11318:      subroutine log106
        -:11319:      integer, parameter :: N = 256, ER = N + 1, W = 99, S = 1
        -:11320:      real*8, parameter :: EPS = 1d-15
        -:11321:      character*24 tname
        -:11322:      real*8 A(N), B(N)
        -:11323:      integer erri, i, asize, clock
        1:11324:      integer, allocatable :: seed(:)
        -:11325:      real*8 tmp
        -:11326:
        -:11327:!dvm$ distribute A(BLOCK)
        -:11328:
        1:11329:      call random_seed(size = asize)
call    0 returned 100%
       3*:11330:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11331:      call system_clock(count = clock)
call    0 returned 100%
      34*:11332:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11333:      call random_seed(put = seed)
call    0 returned 100%
       1*:11334:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11335:
        1:11336:      tname = 'dlog10_double'
        1:11337:      erri = ER
        -:11338:
      257:11339:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11340:          call random_number(B(i))
call    0 returned 100%
      257:11341:          B(i) = B(i) * W + S
        -:11342:      enddo
        -:11343:
        -:11344:!dvm$ actual(B)
        -:11345:!dvm$ region
        -:11346:!dvm$ parallel (i) on A(i)
      257:11347:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11348:          A(i) = dlog10(B(i))
        -:11349:      enddo
        -:11350:!dvm$ end region
        -:11351:!dvm$ get_actual(A)
        -:11352:
        -:11353:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11354:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11355:          tmp = dlog10(B(i))
      257:11356:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11357:              erri = min(erri, i)
        -:11358:          endif
        -:11359:      enddo
        -:11360:
        1:11361:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11362:          call ansyes(tname)
call    0 returned 100%
        -:11363:      else
    #####:11364:          call ansno(tname)
call    0 never executed
        -:11365:      endif 
        -:11366:      
       1*:11367:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11368:
        -:11369:C -------------------------------------------------
        -:11370:
function log_gamma1_ called 1 returned 100% blocks executed 79%
        1:11371:      subroutine log_gamma1
        -:11372:      integer, parameter :: N = 256, ER = N + 1, W = 3, S = 1
        -:11373:      real, parameter :: EPS = 1e-6
        -:11374:      character*24 tname
        -:11375:      real A(N), B(N)
        -:11376:      integer erri, i, asize, clock
        1:11377:      integer, allocatable :: seed(:)
        -:11378:      real tmp
        -:11379:
        -:11380:!dvm$ distribute A(BLOCK)
        -:11381:
        1:11382:      call random_seed(size = asize)
call    0 returned 100%
       3*:11383:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11384:      call system_clock(count = clock)
call    0 returned 100%
      34*:11385:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11386:      call random_seed(put = seed)
call    0 returned 100%
       1*:11387:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11388:
        1:11389:      tname = 'log_gamma_float'
        1:11390:      erri = ER
        -:11391:
      257:11392:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11393:          call random_number(B(i))
call    0 returned 100%
      257:11394:          B(i) = B(i) * W + S
        -:11395:      enddo
        -:11396:
        -:11397:!dvm$ actual(B)
        -:11398:!dvm$ region
        -:11399:!dvm$ parallel (i) on A(i)
      257:11400:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11401:          A(i) = log_gamma(B(i))
        -:11402:      enddo
        -:11403:!dvm$ end region
        -:11404:!dvm$ get_actual(A)
        -:11405:
        -:11406:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11407:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11408:          tmp = log_gamma(B(i))
      257:11409:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11410:              erri = min(erri, i)
        -:11411:          endif
        -:11412:      enddo
        -:11413:
        1:11414:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11415:          call ansyes(tname)
call    0 returned 100%
        -:11416:      else
    #####:11417:          call ansno(tname)
call    0 never executed
        -:11418:      endif 
        -:11419:      
       1*:11420:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11421:
        -:11422:C -------------------------------------------------
        -:11423:
function log_gamma2_ called 1 returned 100% blocks executed 79%
        1:11424:      subroutine log_gamma2
        -:11425:      integer, parameter :: N = 256, ER = N + 1, W = 3, S = 1
        -:11426:      real*8, parameter :: EPS = 1d-15
        -:11427:      character*24 tname
        -:11428:      real*8 A(N), B(N)
        -:11429:      integer erri, i, asize, clock
        1:11430:      integer, allocatable :: seed(:)
        -:11431:      real*8 tmp
        -:11432:
        -:11433:!dvm$ distribute A(BLOCK)
        -:11434:
        1:11435:      call random_seed(size = asize)
call    0 returned 100%
       3*:11436:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11437:      call system_clock(count = clock)
call    0 returned 100%
      34*:11438:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11439:      call random_seed(put = seed)
call    0 returned 100%
       1*:11440:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11441:
        1:11442:      tname = 'log_gamma_double'
        1:11443:      erri = ER
        -:11444:
      257:11445:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11446:          call random_number(B(i))
call    0 returned 100%
      257:11447:          B(i) = B(i) * W + S
        -:11448:      enddo
        -:11449:
        -:11450:!dvm$ actual(B)
        -:11451:!dvm$ region
        -:11452:!dvm$ parallel (i) on A(i)
      257:11453:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11454:          A(i) = log_gamma(B(i))
        -:11455:      enddo
        -:11456:!dvm$ end region
        -:11457:!dvm$ get_actual(A)
        -:11458:
        -:11459:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:11460:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:11461:          tmp = log_gamma(B(i))
      257:11462:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11463:              erri = min(erri, i)
        -:11464:          endif
        -:11465:      enddo
        -:11466:
        1:11467:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11468:          call ansyes(tname)
call    0 returned 100%
        -:11469:      else
    #####:11470:          call ansno(tname)
call    0 never executed
        -:11471:      endif 
        -:11472:      
       1*:11473:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11474:
        -:11475:C -------------------------------------------------
        -:11476:
function max1__ called 1 returned 100% blocks executed 81%
        1:11477:      subroutine max1_
        -:11478:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11479:      character*24 tname
        -:11480:      integer*1 A(N), B(N), C(N), D(N)
        -:11481:      integer erri, i, asize, clock
        1:11482:      integer, allocatable :: seed(:)
        -:11483:      real tmp
        -:11484:
        -:11485:!dvm$ distribute A(BLOCK)
        -:11486:
        1:11487:      call random_seed(size = asize)
call    0 returned 100%
       3*:11488:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11489:      call system_clock(count = clock)
call    0 returned 100%
      34*:11490:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11491:      call random_seed(put = seed)
call    0 returned 100%
       1*:11492:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11493:
        1:11494:      tname = 'max_char'
        1:11495:      erri = ER
        -:11496:
      257:11497:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11498:          call random_number(tmp)
call    0 returned 100%
      256:11499:          B(i) = int(tmp * W + S)
      256:11500:          call random_number(tmp)
call    0 returned 100%
      256:11501:          C(i) = int(tmp * W + S)
      256:11502:          call random_number(tmp)
call    0 returned 100%
      257:11503:          D(i) = int(tmp * W + S)
        -:11504:      enddo
        -:11505:
        -:11506:!dvm$ actual(B, C, D)
        -:11507:!dvm$ region
        -:11508:!dvm$ parallel (i) on A(i)
      257:11509:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11510:          A(i) = max(B(i), C(i), D(i))
        -:11511:      enddo
        -:11512:!dvm$ end region
        -:11513:!dvm$ get_actual(A)
        -:11514:
        -:11515:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11516:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11517:          if (max(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11518:              erri = min(erri, i)
        -:11519:          endif
        -:11520:      enddo
        -:11521:
        1:11522:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11523:          call ansyes(tname)
call    0 returned 100%
        -:11524:      else
    #####:11525:          call ansno(tname)
call    0 never executed
        -:11526:      endif 
        -:11527:      
       1*:11528:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11529:
        -:11530:C -------------------------------------------------
        -:11531:
function max2__ called 1 returned 100% blocks executed 81%
        1:11532:      subroutine max2_
        -:11533:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11534:      character*24 tname
        -:11535:      integer*2 A(N), B(N), C(N), D(N)
        -:11536:      integer erri, i, asize, clock
        1:11537:      integer, allocatable :: seed(:)
        -:11538:      real tmp
        -:11539:
        -:11540:!dvm$ distribute A(BLOCK)
        -:11541:
        1:11542:      call random_seed(size = asize)
call    0 returned 100%
       3*:11543:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11544:      call system_clock(count = clock)
call    0 returned 100%
      34*:11545:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11546:      call random_seed(put = seed)
call    0 returned 100%
       1*:11547:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11548:
        1:11549:      tname = 'max_short'
        1:11550:      erri = ER
        -:11551:
      257:11552:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11553:          call random_number(tmp)
call    0 returned 100%
      256:11554:          B(i) = int(tmp * W + S)
      256:11555:          call random_number(tmp)
call    0 returned 100%
      256:11556:          C(i) = int(tmp * W + S)
      256:11557:          call random_number(tmp)
call    0 returned 100%
      257:11558:          D(i) = int(tmp * W + S)
        -:11559:      enddo
        -:11560:
        -:11561:!dvm$ actual(B, C, D)
        -:11562:!dvm$ region
        -:11563:!dvm$ parallel (i) on A(i)
      257:11564:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11565:          A(i) = max(B(i), C(i), D(i))
        -:11566:      enddo
        -:11567:!dvm$ end region
        -:11568:!dvm$ get_actual(A)
        -:11569:
        -:11570:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11571:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11572:          if (max(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11573:              erri = min(erri, i)
        -:11574:          endif
        -:11575:      enddo
        -:11576:
        1:11577:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11578:          call ansyes(tname)
call    0 returned 100%
        -:11579:      else
    #####:11580:          call ansno(tname)
call    0 never executed
        -:11581:      endif 
        -:11582:      
       1*:11583:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11584:
        -:11585:C -------------------------------------------------
        -:11586:
function max3__ called 1 returned 100% blocks executed 81%
        1:11587:      subroutine max3_
        -:11588:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11589:      character*24 tname
        -:11590:      integer*4 A(N), B(N), C(N), D(N)
        -:11591:      integer erri, i, asize, clock
        1:11592:      integer, allocatable :: seed(:)
        -:11593:      real tmp
        -:11594:
        -:11595:!dvm$ distribute A(BLOCK)
        -:11596:
        1:11597:      call random_seed(size = asize)
call    0 returned 100%
       3*:11598:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11599:      call system_clock(count = clock)
call    0 returned 100%
      34*:11600:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11601:      call random_seed(put = seed)
call    0 returned 100%
       1*:11602:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11603:
        1:11604:      tname = 'max_long'
        1:11605:      erri = ER
        -:11606:
      257:11607:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11608:          call random_number(tmp)
call    0 returned 100%
      256:11609:          B(i) = int(tmp * W + S)
      256:11610:          call random_number(tmp)
call    0 returned 100%
      256:11611:          C(i) = int(tmp * W + S)
      256:11612:          call random_number(tmp)
call    0 returned 100%
      257:11613:          D(i) = int(tmp * W + S)
        -:11614:      enddo
        -:11615:
        -:11616:!dvm$ actual(B, C, D)
        -:11617:!dvm$ region
        -:11618:!dvm$ parallel (i) on A(i)
      257:11619:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11620:          A(i) = max(B(i), C(i), D(i))
        -:11621:      enddo
        -:11622:!dvm$ end region
        -:11623:!dvm$ get_actual(A)
        -:11624:
        -:11625:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11626:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11627:          if (max(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11628:              erri = min(erri, i)
        -:11629:          endif
        -:11630:      enddo
        -:11631:
        1:11632:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11633:          call ansyes(tname)
call    0 returned 100%
        -:11634:      else
    #####:11635:          call ansno(tname)
call    0 never executed
        -:11636:      endif 
        -:11637:      
       1*:11638:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11639:
        -:11640:C -------------------------------------------------
        -:11641:
function max4__ called 1 returned 100% blocks executed 81%
        1:11642:      subroutine max4_
        -:11643:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11644:      character*24 tname
        -:11645:      integer*8 A(N), B(N), C(N), D(N)
        -:11646:      integer erri, i, asize, clock
        1:11647:      integer, allocatable :: seed(:)
        -:11648:      real tmp
        -:11649:
        -:11650:!dvm$ distribute A(BLOCK)
        -:11651:
        1:11652:      call random_seed(size = asize)
call    0 returned 100%
       3*:11653:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11654:      call system_clock(count = clock)
call    0 returned 100%
      34*:11655:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11656:      call random_seed(put = seed)
call    0 returned 100%
       1*:11657:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11658:
        1:11659:      tname = 'max_longlong'
        1:11660:      erri = ER
        -:11661:
      257:11662:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11663:          call random_number(tmp)
call    0 returned 100%
      256:11664:          B(i) = int(tmp * W + S)
      256:11665:          call random_number(tmp)
call    0 returned 100%
      256:11666:          C(i) = int(tmp * W + S)
      256:11667:          call random_number(tmp)
call    0 returned 100%
      257:11668:          D(i) = int(tmp * W + S)
        -:11669:      enddo
        -:11670:
        -:11671:!dvm$ actual(B, C, D)
        -:11672:!dvm$ region
        -:11673:!dvm$ parallel (i) on A(i)
      257:11674:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11675:          A(i) = max(B(i), C(i), D(i))
        -:11676:      enddo
        -:11677:!dvm$ end region
        -:11678:!dvm$ get_actual(A)
        -:11679:
        -:11680:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11681:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11682:          if (max(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11683:              erri = min(erri, i)
        -:11684:          endif
        -:11685:      enddo
        -:11686:
        1:11687:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11688:          call ansyes(tname)
call    0 returned 100%
        -:11689:      else
    #####:11690:          call ansno(tname)
call    0 never executed
        -:11691:      endif 
        -:11692:      
       1*:11693:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11694:
        -:11695:C -------------------------------------------------
        -:11696:
function max5__ called 1 returned 100% blocks executed 81%
        1:11697:      subroutine max5_
        -:11698:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11699:      character*24 tname
        -:11700:      real A(N), B(N), C(N), D(N)
        -:11701:      integer erri, i, asize, clock
        1:11702:      integer, allocatable :: seed(:)
        -:11703:
        -:11704:!dvm$ distribute A(BLOCK)
        -:11705:
        1:11706:      call random_seed(size = asize)
call    0 returned 100%
       3*:11707:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11708:      call system_clock(count = clock)
call    0 returned 100%
      34*:11709:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11710:      call random_seed(put = seed)
call    0 returned 100%
       1*:11711:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11712:
        1:11713:      tname = 'max_float'
        1:11714:      erri = ER
        -:11715:
      257:11716:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11717:          call random_number(B(i))
call    0 returned 100%
      256:11718:          B(i) = B(i) * W + S
      256:11719:          call random_number(C(i))
call    0 returned 100%
      256:11720:          C(i) = C(i) * W + S
      256:11721:          call random_number(D(i))
call    0 returned 100%
      257:11722:          D(i) = D(i) * W + S
        -:11723:      enddo
        -:11724:
        -:11725:!dvm$ actual(B, C, D)
        -:11726:!dvm$ region
        -:11727:!dvm$ parallel (i) on A(i)
      257:11728:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11729:          A(i) = max(B(i), C(i), D(i))
        -:11730:      enddo
        -:11731:!dvm$ end region
        -:11732:!dvm$ get_actual(A)
        -:11733:
        -:11734:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11735:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11736:          if (max(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11737:              erri = min(erri, i)
        -:11738:          endif
        -:11739:      enddo
        -:11740:
        1:11741:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11742:          call ansyes(tname)
call    0 returned 100%
        -:11743:      else
    #####:11744:          call ansno(tname)
call    0 never executed
        -:11745:      endif 
        -:11746:      
       1*:11747:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11748:
        -:11749:C -------------------------------------------------
        -:11750:
function max6__ called 1 returned 100% blocks executed 81%
        1:11751:      subroutine max6_
        -:11752:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11753:      character*24 tname
        -:11754:      real*8 A(N), B(N), C(N), D(N)
        -:11755:      integer erri, i, asize, clock
        1:11756:      integer, allocatable :: seed(:)
        -:11757:
        -:11758:!dvm$ distribute A(BLOCK)
        -:11759:
        1:11760:      call random_seed(size = asize)
call    0 returned 100%
       3*:11761:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11762:      call system_clock(count = clock)
call    0 returned 100%
      34*:11763:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11764:      call random_seed(put = seed)
call    0 returned 100%
       1*:11765:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11766:
        1:11767:      tname = 'max_double'
        1:11768:      erri = ER
        -:11769:
      257:11770:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11771:          call random_number(B(i))
call    0 returned 100%
      256:11772:          B(i) = B(i) * W + S
      256:11773:          call random_number(C(i))
call    0 returned 100%
      256:11774:          C(i) = C(i) * W + S
      256:11775:          call random_number(D(i))
call    0 returned 100%
      257:11776:          D(i) = D(i) * W + S
        -:11777:      enddo
        -:11778:
        -:11779:!dvm$ actual(B, C, D)
        -:11780:!dvm$ region
        -:11781:!dvm$ parallel (i) on A(i)
      257:11782:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11783:          A(i) = max(B(i), C(i), D(i))
        -:11784:      enddo
        -:11785:!dvm$ end region
        -:11786:!dvm$ get_actual(A)
        -:11787:
        -:11788:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11789:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11790:          if (max(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11791:              erri = min(erri, i)
        -:11792:          endif
        -:11793:      enddo
        -:11794:
        1:11795:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11796:          call ansyes(tname)
call    0 returned 100%
        -:11797:      else
    #####:11798:          call ansno(tname)
call    0 never executed
        -:11799:      endif 
        -:11800:      
       1*:11801:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11802:
        -:11803:C -------------------------------------------------
        -:11804:
function max7__ called 1 returned 100% blocks executed 81%
        1:11805:      subroutine max7_
        -:11806:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11807:      character*24 tname
        -:11808:      integer*4 A(N), B(N), C(N), D(N)
        -:11809:      integer erri, i, asize, clock
        1:11810:      integer, allocatable :: seed(:)
        -:11811:      real tmp
        -:11812:
        -:11813:!dvm$ distribute A(BLOCK)
        -:11814:
        1:11815:      call random_seed(size = asize)
call    0 returned 100%
       3*:11816:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11817:      call system_clock(count = clock)
call    0 returned 100%
      34*:11818:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11819:      call random_seed(put = seed)
call    0 returned 100%
       1*:11820:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11821:
        1:11822:      tname = 'max0_long'
        1:11823:      erri = ER
        -:11824:
      257:11825:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11826:          call random_number(tmp)
call    0 returned 100%
      256:11827:          B(i) = int(tmp * W + S)
      256:11828:          call random_number(tmp)
call    0 returned 100%
      256:11829:          C(i) = int(tmp * W + S)
      256:11830:          call random_number(tmp)
call    0 returned 100%
      257:11831:          D(i) = int(tmp * W + S)
        -:11832:      enddo
        -:11833:
        -:11834:!dvm$ actual(B, C, D)
        -:11835:!dvm$ region
        -:11836:!dvm$ parallel (i) on A(i)
      257:11837:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11838:          A(i) = max0(B(i), C(i), D(i))
        -:11839:      enddo
        -:11840:!dvm$ end region
        -:11841:!dvm$ get_actual(A)
        -:11842:
        -:11843:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11844:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11845:          if (max0(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11846:              erri = min(erri, i)
        -:11847:          endif
        -:11848:      enddo
        -:11849:
        1:11850:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11851:          call ansyes(tname)
call    0 returned 100%
        -:11852:      else
    #####:11853:          call ansno(tname)
call    0 never executed
        -:11854:      endif 
        -:11855:      
       1*:11856:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11857:
        -:11858:C -------------------------------------------------
        -:11859:
function max8__ called 1 returned 100% blocks executed 81%
        1:11860:      subroutine max8_
        -:11861:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11862:      character*24 tname
        -:11863:      real A(N), B(N), C(N), D(N)
        -:11864:      integer erri, i, asize, clock
        1:11865:      integer, allocatable :: seed(:)
        -:11866:
        -:11867:!dvm$ distribute A(BLOCK)
        -:11868:
        1:11869:      call random_seed(size = asize)
call    0 returned 100%
       3*:11870:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11871:      call system_clock(count = clock)
call    0 returned 100%
      34*:11872:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11873:      call random_seed(put = seed)
call    0 returned 100%
       1*:11874:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11875:
        1:11876:      tname = 'amax1_float'
        1:11877:      erri = ER
        -:11878:
      257:11879:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11880:          call random_number(B(i))
call    0 returned 100%
      256:11881:          B(i) = B(i) * W + S
      256:11882:          call random_number(C(i))
call    0 returned 100%
      256:11883:          C(i) = C(i) * W + S
      256:11884:          call random_number(D(i))
call    0 returned 100%
      257:11885:          D(i) = D(i) * W + S
        -:11886:      enddo
        -:11887:
        -:11888:!dvm$ actual(B, C, D)
        -:11889:!dvm$ region
        -:11890:!dvm$ parallel (i) on A(i)
      257:11891:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11892:          A(i) = amax1(B(i), C(i), D(i))
        -:11893:      enddo
        -:11894:!dvm$ end region
        -:11895:!dvm$ get_actual(A)
        -:11896:
        -:11897:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11898:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11899:          if (amax1(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11900:              erri = min(erri, i)
        -:11901:          endif
        -:11902:      enddo
        -:11903:
        1:11904:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11905:          call ansyes(tname)
call    0 returned 100%
        -:11906:      else
    #####:11907:          call ansno(tname)
call    0 never executed
        -:11908:      endif 
        -:11909:      
       1*:11910:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11911:
        -:11912:C -------------------------------------------------
        -:11913:
function max9__ called 1 returned 100% blocks executed 81%
        1:11914:      subroutine max9_
        -:11915:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11916:      character*24 tname
        -:11917:      real*8 A(N), B(N), C(N), D(N)
        -:11918:      integer erri, i, asize, clock
        1:11919:      integer, allocatable :: seed(:)
        -:11920:
        -:11921:!dvm$ distribute A(BLOCK)
        -:11922:
        1:11923:      call random_seed(size = asize)
call    0 returned 100%
       3*:11924:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11925:      call system_clock(count = clock)
call    0 returned 100%
      34*:11926:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11927:      call random_seed(put = seed)
call    0 returned 100%
       1*:11928:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11929:
        1:11930:      tname = 'dmax1_double'
        1:11931:      erri = ER
        -:11932:
      257:11933:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11934:          call random_number(B(i))
call    0 returned 100%
      256:11935:          B(i) = B(i) * W + S
      256:11936:          call random_number(C(i))
call    0 returned 100%
      256:11937:          C(i) = C(i) * W + S
      256:11938:          call random_number(D(i))
call    0 returned 100%
      257:11939:          D(i) = D(i) * W + S
        -:11940:      enddo
        -:11941:
        -:11942:!dvm$ actual(B, C, D)
        -:11943:!dvm$ region
        -:11944:!dvm$ parallel (i) on A(i)
      257:11945:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:11946:          A(i) = dmax1(B(i), C(i), D(i))
        -:11947:      enddo
        -:11948:!dvm$ end region
        -:11949:!dvm$ get_actual(A)
        -:11950:
        -:11951:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:11952:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:11953:          if (dmax1(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:11954:              erri = min(erri, i)
        -:11955:          endif
        -:11956:      enddo
        -:11957:
        1:11958:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:11959:          call ansyes(tname)
call    0 returned 100%
        -:11960:      else
    #####:11961:          call ansno(tname)
call    0 never executed
        -:11962:      endif 
        -:11963:      
       1*:11964:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:11965:
        -:11966:C -------------------------------------------------
        -:11967:
function max13__ called 1 returned 100% blocks executed 81%
        1:11968:      subroutine max13_
        -:11969:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:11970:      character*24 tname
        -:11971:      integer*4 A(N)
        -:11972:      real B(N), C(N), D(N)
        -:11973:      integer erri, i, asize, clock
        1:11974:      integer, allocatable :: seed(:)
        -:11975:
        -:11976:!dvm$ distribute A(BLOCK)
        -:11977:
        1:11978:      call random_seed(size = asize)
call    0 returned 100%
       3*:11979:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:11980:      call system_clock(count = clock)
call    0 returned 100%
      34*:11981:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:11982:      call random_seed(put = seed)
call    0 returned 100%
       1*:11983:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:11984:
        1:11985:      tname = 'max1_float'
        1:11986:      erri = ER
        -:11987:
      257:11988:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:11989:          call random_number(B(i))
call    0 returned 100%
      256:11990:          B(i) = B(i) * W + S
      256:11991:          call random_number(C(i))
call    0 returned 100%
      256:11992:          C(i) = C(i) * W + S
      256:11993:          call random_number(D(i))
call    0 returned 100%
      257:11994:          D(i) = D(i) * W + S
        -:11995:      enddo
        -:11996:
        -:11997:!dvm$ actual(B, C, D)
        -:11998:!dvm$ region
        -:11999:!dvm$ parallel (i) on A(i)
      257:12000:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12001:          A(i) = max1(B(i), C(i), D(i))
        -:12002:      enddo
        -:12003:!dvm$ end region
        -:12004:!dvm$ get_actual(A)
        -:12005:
        -:12006:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12007:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12008:          if (max1(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12009:              erri = min(erri, i)
        -:12010:          endif
        -:12011:      enddo
        -:12012:
        1:12013:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12014:          call ansyes(tname)
call    0 returned 100%
        -:12015:      else
    #####:12016:          call ansno(tname)
call    0 never executed
        -:12017:      endif 
        -:12018:      
       1*:12019:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12020:
        -:12021:C -------------------------------------------------
        -:12022:
function max17__ called 1 returned 100% blocks executed 81%
        1:12023:      subroutine max17_
        -:12024:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12025:      character*24 tname
        -:12026:      real A(N)
        -:12027:      integer*4 B(N), C(N), D(N)
        -:12028:      integer erri, i, asize, clock
        1:12029:      integer, allocatable :: seed(:)
        -:12030:      real tmp
        -:12031:
        -:12032:!dvm$ distribute A(BLOCK)
        -:12033:
        1:12034:      call random_seed(size = asize)
call    0 returned 100%
       3*:12035:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12036:      call system_clock(count = clock)
call    0 returned 100%
      34*:12037:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12038:      call random_seed(put = seed)
call    0 returned 100%
       1*:12039:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12040:
        1:12041:      tname = 'amax0_long'
        1:12042:      erri = ER
        -:12043:
      257:12044:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12045:          call random_number(tmp)
call    0 returned 100%
      256:12046:          B(i) = int(tmp * W + S)
      256:12047:          call random_number(tmp)
call    0 returned 100%
      256:12048:          C(i) = int(tmp * W + S)
      256:12049:          call random_number(tmp)
call    0 returned 100%
      257:12050:          D(i) = int(tmp * W + S)
        -:12051:      enddo
        -:12052:
        -:12053:!dvm$ actual(B, C, D)
        -:12054:!dvm$ region
        -:12055:!dvm$ parallel (i) on A(i)
      257:12056:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12057:          A(i) = amax0(B(i), C(i), D(i))
        -:12058:      enddo
        -:12059:!dvm$ end region
        -:12060:!dvm$ get_actual(A)
        -:12061:
        -:12062:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12063:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12064:          if (amax0(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12065:              erri = min(erri, i)
        -:12066:          endif
        -:12067:      enddo
        -:12068:
        1:12069:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12070:          call ansyes(tname)
call    0 returned 100%
        -:12071:      else
    #####:12072:          call ansno(tname)
call    0 never executed
        -:12073:      endif 
        -:12074:      
       1*:12075:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12076:
        -:12077:
        -:12078:C -------------------------------------------------
        -:12079:
function merge_bits1_ called 1 returned 100% blocks executed 81%
        1:12080:      subroutine merge_bits1
        -:12081:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12082:      character*24 tname
        -:12083:      integer*1 A(N), B(N), C(N), D(N)
        -:12084:      integer erri, i, asize, clock
        1:12085:      integer, allocatable :: seed(:)
        -:12086:      real tmp
        -:12087:
        -:12088:!dvm$ distribute A(BLOCK)
        -:12089:
        1:12090:      call random_seed(size = asize)
call    0 returned 100%
       3*:12091:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12092:      call system_clock(count = clock)
call    0 returned 100%
      34*:12093:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12094:      call random_seed(put = seed)
call    0 returned 100%
       1*:12095:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12096:
        1:12097:      tname = 'merge_bits_char'
        1:12098:      erri = ER
        -:12099:
      257:12100:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12101:          call random_number(tmp)
call    0 returned 100%
      256:12102:          B(i) = int(tmp * W + S)
      256:12103:          call random_number(tmp)
call    0 returned 100%
      256:12104:          C(i) = int(tmp * W + S)
      256:12105:          call random_number(tmp)
call    0 returned 100%
      257:12106:          D(i) = int(tmp * W + S)
        -:12107:      enddo
        -:12108:
        -:12109:!dvm$ actual(B, C, D)
        -:12110:!dvm$ region
        -:12111:!dvm$ parallel (i) on A(i)
      257:12112:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12113:          A(i) = merge_bits(B(i), C(i), D(i))
        -:12114:      enddo
        -:12115:!dvm$ end region
        -:12116:!dvm$ get_actual(A)
        -:12117:
        -:12118:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12119:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12120:          if (merge_bits(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12121:              erri = min(erri, i)
        -:12122:          endif
        -:12123:      enddo
        -:12124:
        1:12125:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12126:          call ansyes(tname)
call    0 returned 100%
        -:12127:      else
    #####:12128:          call ansno(tname)
call    0 never executed
        -:12129:      endif 
        -:12130:      
       1*:12131:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12132:
        -:12133:C -------------------------------------------------
        -:12134:
function merge_bits2_ called 1 returned 100% blocks executed 81%
        1:12135:      subroutine merge_bits2
        -:12136:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12137:      character*24 tname
        -:12138:      integer*2 A(N), B(N), C(N), D(N)
        -:12139:      integer erri, i, asize, clock
        1:12140:      integer, allocatable :: seed(:)
        -:12141:      real tmp
        -:12142:
        -:12143:!dvm$ distribute A(BLOCK)
        -:12144:
        1:12145:      call random_seed(size = asize)
call    0 returned 100%
       3*:12146:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12147:      call system_clock(count = clock)
call    0 returned 100%
      34*:12148:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12149:      call random_seed(put = seed)
call    0 returned 100%
       1*:12150:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12151:
        1:12152:      tname = 'merge_bits_short'
        1:12153:      erri = ER
        -:12154:
      257:12155:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12156:          call random_number(tmp)
call    0 returned 100%
      256:12157:          B(i) = int(tmp * W + S)
      256:12158:          call random_number(tmp)
call    0 returned 100%
      256:12159:          C(i) = int(tmp * W + S)
      256:12160:          call random_number(tmp)
call    0 returned 100%
      257:12161:          D(i) = int(tmp * W + S)
        -:12162:      enddo
        -:12163:
        -:12164:!dvm$ actual(B, C, D)
        -:12165:!dvm$ region
        -:12166:!dvm$ parallel (i) on A(i)
      257:12167:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12168:          A(i) = merge_bits(B(i), C(i), D(i))
        -:12169:      enddo
        -:12170:!dvm$ end region
        -:12171:!dvm$ get_actual(A)
        -:12172:
        -:12173:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12174:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12175:          if (merge_bits(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12176:              erri = min(erri, i)
        -:12177:          endif
        -:12178:      enddo
        -:12179:
        1:12180:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12181:          call ansyes(tname)
call    0 returned 100%
        -:12182:      else
    #####:12183:          call ansno(tname)
call    0 never executed
        -:12184:      endif 
        -:12185:      
       1*:12186:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12187:
        -:12188:C -------------------------------------------------
        -:12189:
function merge_bits3_ called 1 returned 100% blocks executed 81%
        1:12190:      subroutine merge_bits3
        -:12191:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12192:      character*24 tname
        -:12193:      integer*4 A(N), B(N), C(N), D(N)
        -:12194:      integer erri, i, asize, clock
        1:12195:      integer, allocatable :: seed(:)
        -:12196:      real tmp
        -:12197:
        -:12198:!dvm$ distribute A(BLOCK)
        -:12199:
        1:12200:      call random_seed(size = asize)
call    0 returned 100%
       3*:12201:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12202:      call system_clock(count = clock)
call    0 returned 100%
      34*:12203:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12204:      call random_seed(put = seed)
call    0 returned 100%
       1*:12205:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12206:
        1:12207:      tname = 'merge_bits_long'
        1:12208:      erri = ER
        -:12209:
      257:12210:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12211:          call random_number(tmp)
call    0 returned 100%
      256:12212:          B(i) = int(tmp * W + S)
      256:12213:          call random_number(tmp)
call    0 returned 100%
      256:12214:          C(i) = int(tmp * W + S)
      256:12215:          call random_number(tmp)
call    0 returned 100%
      257:12216:          D(i) = int(tmp * W + S)
        -:12217:      enddo
        -:12218:
        -:12219:!dvm$ actual(B, C, D)
        -:12220:!dvm$ region
        -:12221:!dvm$ parallel (i) on A(i)
      257:12222:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12223:          A(i) = merge_bits(B(i), C(i), D(i))
        -:12224:      enddo
        -:12225:!dvm$ end region
        -:12226:!dvm$ get_actual(A)
        -:12227:
        -:12228:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12229:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12230:          if (merge_bits(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12231:              erri = min(erri, i)
        -:12232:          endif
        -:12233:      enddo
        -:12234:
        1:12235:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12236:          call ansyes(tname)
call    0 returned 100%
        -:12237:      else
    #####:12238:          call ansno(tname)
call    0 never executed
        -:12239:      endif 
        -:12240:      
       1*:12241:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12242:
        -:12243:C -------------------------------------------------
        -:12244:
function merge_bits4_ called 1 returned 100% blocks executed 81%
        1:12245:      subroutine merge_bits4
        -:12246:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12247:      character*24 tname
        -:12248:      integer*8 A(N), B(N), C(N), D(N)
        -:12249:      integer erri, i, asize, clock
        1:12250:      integer, allocatable :: seed(:)
        -:12251:      real tmp
        -:12252:
        -:12253:!dvm$ distribute A(BLOCK)
        -:12254:
        1:12255:      call random_seed(size = asize)
call    0 returned 100%
       3*:12256:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12257:      call system_clock(count = clock)
call    0 returned 100%
      34*:12258:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12259:      call random_seed(put = seed)
call    0 returned 100%
       1*:12260:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12261:
        1:12262:      tname = 'merge_bits_longlong'
        1:12263:      erri = ER
        -:12264:
      257:12265:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12266:          call random_number(tmp)
call    0 returned 100%
      256:12267:          B(i) = int(tmp * W + S)
      256:12268:          call random_number(tmp)
call    0 returned 100%
      256:12269:          C(i) = int(tmp * W + S)
      256:12270:          call random_number(tmp)
call    0 returned 100%
      257:12271:          D(i) = int(tmp * W + S)
        -:12272:      enddo
        -:12273:
        -:12274:!dvm$ actual(B, C, D)
        -:12275:!dvm$ region
        -:12276:!dvm$ parallel (i) on A(i)
      257:12277:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12278:          A(i) = merge_bits(B(i), C(i), D(i))
        -:12279:      enddo
        -:12280:!dvm$ end region
        -:12281:!dvm$ get_actual(A)
        -:12282:
        -:12283:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12284:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12285:          if (merge_bits(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12286:              erri = min(erri, i)
        -:12287:          endif
        -:12288:      enddo
        -:12289:
        1:12290:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12291:          call ansyes(tname)
call    0 returned 100%
        -:12292:      else
    #####:12293:          call ansno(tname)
call    0 never executed
        -:12294:      endif 
        -:12295:      
       1*:12296:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12297:
        -:12298:C -------------------------------------------------
        -:12299:
function min1__ called 1 returned 100% blocks executed 81%
        1:12300:      subroutine min1_
        -:12301:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12302:      character*24 tname
        -:12303:      integer*1 A(N), B(N), C(N), D(N)
        -:12304:      integer erri, i, asize, clock
        1:12305:      integer, allocatable :: seed(:)
        -:12306:      real tmp
        -:12307:
        -:12308:!dvm$ distribute A(BLOCK)
        -:12309:
        1:12310:      call random_seed(size = asize)
call    0 returned 100%
       3*:12311:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12312:      call system_clock(count = clock)
call    0 returned 100%
      34*:12313:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12314:      call random_seed(put = seed)
call    0 returned 100%
       1*:12315:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12316:
        1:12317:      tname = 'min_char'
        1:12318:      erri = ER
        -:12319:
      257:12320:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12321:          call random_number(tmp)
call    0 returned 100%
      256:12322:          B(i) = int(tmp * W + S)
      256:12323:          call random_number(tmp)
call    0 returned 100%
      256:12324:          C(i) = int(tmp * W + S)
      256:12325:          call random_number(tmp)
call    0 returned 100%
      257:12326:          D(i) = int(tmp * W + S)
        -:12327:      enddo
        -:12328:
        -:12329:!dvm$ actual(B, C, D)
        -:12330:!dvm$ region
        -:12331:!dvm$ parallel (i) on A(i)
      257:12332:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12333:          A(i) = min(B(i), C(i), D(i))
        -:12334:      enddo
        -:12335:!dvm$ end region
        -:12336:!dvm$ get_actual(A)
        -:12337:
        -:12338:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12339:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12340:          if (min(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12341:              erri = min(erri, i)
        -:12342:          endif
        -:12343:      enddo
        -:12344:
        1:12345:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12346:          call ansyes(tname)
call    0 returned 100%
        -:12347:      else
    #####:12348:          call ansno(tname)
call    0 never executed
        -:12349:      endif 
        -:12350:      
       1*:12351:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12352:
        -:12353:C -------------------------------------------------
        -:12354:
function min2__ called 1 returned 100% blocks executed 81%
        1:12355:      subroutine min2_
        -:12356:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12357:      character*24 tname
        -:12358:      integer*2 A(N), B(N), C(N), D(N)
        -:12359:      integer erri, i, asize, clock
        1:12360:      integer, allocatable :: seed(:)
        -:12361:      real tmp
        -:12362:
        -:12363:!dvm$ distribute A(BLOCK)
        -:12364:
        1:12365:      call random_seed(size = asize)
call    0 returned 100%
       3*:12366:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12367:      call system_clock(count = clock)
call    0 returned 100%
      34*:12368:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12369:      call random_seed(put = seed)
call    0 returned 100%
       1*:12370:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12371:
        1:12372:      tname = 'min_short'
        1:12373:      erri = ER
        -:12374:
      257:12375:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12376:          call random_number(tmp)
call    0 returned 100%
      256:12377:          B(i) = int(tmp * W + S)
      256:12378:          call random_number(tmp)
call    0 returned 100%
      256:12379:          C(i) = int(tmp * W + S)
      256:12380:          call random_number(tmp)
call    0 returned 100%
      257:12381:          D(i) = int(tmp * W + S)
        -:12382:      enddo
        -:12383:
        -:12384:!dvm$ actual(B, C, D)
        -:12385:!dvm$ region
        -:12386:!dvm$ parallel (i) on A(i)
      257:12387:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12388:          A(i) = min(B(i), C(i), D(i))
        -:12389:      enddo
        -:12390:!dvm$ end region
        -:12391:!dvm$ get_actual(A)
        -:12392:
        -:12393:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12394:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12395:          if (min(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12396:              erri = min(erri, i)
        -:12397:          endif
        -:12398:      enddo
        -:12399:
        1:12400:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12401:          call ansyes(tname)
call    0 returned 100%
        -:12402:      else
    #####:12403:          call ansno(tname)
call    0 never executed
        -:12404:      endif 
        -:12405:      
       1*:12406:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12407:
        -:12408:C -------------------------------------------------
        -:12409:
function min3__ called 1 returned 100% blocks executed 81%
        1:12410:      subroutine min3_
        -:12411:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12412:      character*24 tname
        -:12413:      integer*4 A(N), B(N), C(N), D(N)
        -:12414:      integer erri, i, asize, clock
        1:12415:      integer, allocatable :: seed(:)
        -:12416:      real tmp
        -:12417:
        -:12418:!dvm$ distribute A(BLOCK)
        -:12419:
        1:12420:      call random_seed(size = asize)
call    0 returned 100%
       3*:12421:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12422:      call system_clock(count = clock)
call    0 returned 100%
      34*:12423:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12424:      call random_seed(put = seed)
call    0 returned 100%
       1*:12425:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12426:
        1:12427:      tname = 'min_long'
        1:12428:      erri = ER
        -:12429:
      257:12430:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12431:          call random_number(tmp)
call    0 returned 100%
      256:12432:          B(i) = int(tmp * W + S)
      256:12433:          call random_number(tmp)
call    0 returned 100%
      256:12434:          C(i) = int(tmp * W + S)
      256:12435:          call random_number(tmp)
call    0 returned 100%
      257:12436:          D(i) = int(tmp * W + S)
        -:12437:      enddo
        -:12438:
        -:12439:!dvm$ actual(B, C, D)
        -:12440:!dvm$ region
        -:12441:!dvm$ parallel (i) on A(i)
      257:12442:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12443:          A(i) = min(B(i), C(i), D(i))
        -:12444:      enddo
        -:12445:!dvm$ end region
        -:12446:!dvm$ get_actual(A)
        -:12447:
        -:12448:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12449:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12450:          if (min(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12451:              if (i < erri) then
      256:12452:                   erri = i
        -:12453:              endif
        -:12454:          endif
        -:12455:      enddo
        -:12456:
        1:12457:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12458:          call ansyes(tname)
call    0 returned 100%
        -:12459:      else
    #####:12460:          call ansno(tname)
call    0 never executed
        -:12461:      endif 
        -:12462:      
       1*:12463:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12464:
        -:12465:C -------------------------------------------------
        -:12466:
function min4__ called 1 returned 100% blocks executed 81%
        1:12467:      subroutine min4_
        -:12468:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12469:      character*24 tname
        -:12470:      integer*8 A(N), B(N), C(N), D(N)
        -:12471:      integer erri, i, asize, clock
        1:12472:      integer, allocatable :: seed(:)
        -:12473:      real tmp
        -:12474:
        -:12475:!dvm$ distribute A(BLOCK)
        -:12476:
        1:12477:      call random_seed(size = asize)
call    0 returned 100%
       3*:12478:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12479:      call system_clock(count = clock)
call    0 returned 100%
      34*:12480:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12481:      call random_seed(put = seed)
call    0 returned 100%
       1*:12482:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12483:
        1:12484:      tname = 'min_longlong'
        1:12485:      erri = ER
        -:12486:
      257:12487:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12488:          call random_number(tmp)
call    0 returned 100%
      256:12489:          B(i) = int(tmp * W + S)
      256:12490:          call random_number(tmp)
call    0 returned 100%
      256:12491:          C(i) = int(tmp * W + S)
      256:12492:          call random_number(tmp)
call    0 returned 100%
      257:12493:          D(i) = int(tmp * W + S)
        -:12494:      enddo
        -:12495:
        -:12496:!dvm$ actual(B, C, D)
        -:12497:!dvm$ region
        -:12498:!dvm$ parallel (i) on A(i)
      257:12499:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12500:          A(i) = min(B(i), C(i), D(i))
        -:12501:      enddo
        -:12502:!dvm$ end region
        -:12503:!dvm$ get_actual(A)
        -:12504:
        -:12505:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12506:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12507:          if (min(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12508:              erri = min(erri, i)
        -:12509:          endif
        -:12510:      enddo
        -:12511:
        1:12512:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12513:          call ansyes(tname)
call    0 returned 100%
        -:12514:      else
    #####:12515:          call ansno(tname)
call    0 never executed
        -:12516:      endif 
        -:12517:      
       1*:12518:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12519:
        -:12520:C -------------------------------------------------
        -:12521:
function min5__ called 1 returned 100% blocks executed 81%
        1:12522:      subroutine min5_
        -:12523:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12524:      character*24 tname
        -:12525:      real A(N), B(N), C(N), D(N)
        -:12526:      integer erri, i, asize, clock
        1:12527:      integer, allocatable :: seed(:)
        -:12528:
        -:12529:!dvm$ distribute A(BLOCK)
        -:12530:
        1:12531:      call random_seed(size = asize)
call    0 returned 100%
       3*:12532:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12533:      call system_clock(count = clock)
call    0 returned 100%
      34*:12534:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12535:      call random_seed(put = seed)
call    0 returned 100%
       1*:12536:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12537:
        1:12538:      tname = 'min_float'
        1:12539:      erri = ER
        -:12540:
      257:12541:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12542:          call random_number(B(i))
call    0 returned 100%
      256:12543:          B(i) = B(i) * W + S
      256:12544:          call random_number(C(i))
call    0 returned 100%
      256:12545:          C(i) = C(i) * W + S
      256:12546:          call random_number(D(i))
call    0 returned 100%
      257:12547:          D(i) = D(i) * W + S
        -:12548:      enddo
        -:12549:
        -:12550:!dvm$ actual(B, C, D)
        -:12551:!dvm$ region
        -:12552:!dvm$ parallel (i) on A(i)
      257:12553:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12554:          A(i) = min(B(i), C(i), D(i))
        -:12555:      enddo
        -:12556:!dvm$ end region
        -:12557:!dvm$ get_actual(A)
        -:12558:
        -:12559:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12560:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12561:          if (min(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12562:              erri = min(erri, i)
        -:12563:          endif
        -:12564:      enddo
        -:12565:
        1:12566:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12567:          call ansyes(tname)
call    0 returned 100%
        -:12568:      else
    #####:12569:          call ansno(tname)
call    0 never executed
        -:12570:      endif 
        -:12571:      
       1*:12572:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12573:
        -:12574:C -------------------------------------------------
        -:12575:
function min6__ called 1 returned 100% blocks executed 81%
        1:12576:      subroutine min6_
        -:12577:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12578:      character*24 tname
        -:12579:      real*8 A(N), B(N), C(N), D(N)
        -:12580:      integer erri, i, asize, clock
        1:12581:      integer, allocatable :: seed(:)
        -:12582:
        -:12583:!dvm$ distribute A(BLOCK)
        -:12584:
        1:12585:      call random_seed(size = asize)
call    0 returned 100%
       3*:12586:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12587:      call system_clock(count = clock)
call    0 returned 100%
      34*:12588:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12589:      call random_seed(put = seed)
call    0 returned 100%
       1*:12590:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12591:
        1:12592:      tname = 'min_double'
        1:12593:      erri = ER
        -:12594:
      257:12595:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12596:          call random_number(B(i))
call    0 returned 100%
      256:12597:          B(i) = B(i) * W + S
      256:12598:          call random_number(C(i))
call    0 returned 100%
      256:12599:          C(i) = C(i) * W + S
      256:12600:          call random_number(D(i))
call    0 returned 100%
      257:12601:          D(i) = D(i) * W + S
        -:12602:      enddo
        -:12603:
        -:12604:!dvm$ actual(B, C, D)
        -:12605:!dvm$ region
        -:12606:!dvm$ parallel (i) on A(i)
      257:12607:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12608:          A(i) = min(B(i), C(i), D(i))
        -:12609:      enddo
        -:12610:!dvm$ end region
        -:12611:!dvm$ get_actual(A)
        -:12612:
        -:12613:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12614:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12615:          if (min(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12616:              erri = min(erri, i)
        -:12617:          endif
        -:12618:      enddo
        -:12619:
        1:12620:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12621:          call ansyes(tname)
call    0 returned 100%
        -:12622:      else
    #####:12623:          call ansno(tname)
call    0 never executed
        -:12624:      endif 
        -:12625:      
       1*:12626:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12627:
        -:12628:C -------------------------------------------------
        -:12629:
function min7__ called 1 returned 100% blocks executed 81%
        1:12630:      subroutine min7_
        -:12631:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12632:      character*24 tname
        -:12633:      integer*4 A(N), B(N), C(N), D(N)
        -:12634:      integer erri, i, asize, clock
        1:12635:      integer, allocatable :: seed(:)
        -:12636:      real tmp
        -:12637:
        -:12638:!dvm$ distribute A(BLOCK)
        -:12639:
        1:12640:      call random_seed(size = asize)
call    0 returned 100%
       3*:12641:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12642:      call system_clock(count = clock)
call    0 returned 100%
      34*:12643:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12644:      call random_seed(put = seed)
call    0 returned 100%
       1*:12645:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12646:
        1:12647:      tname = 'min0_long'
        1:12648:      erri = ER
        -:12649:
      257:12650:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12651:          call random_number(tmp)
call    0 returned 100%
      256:12652:          B(i) = int(tmp * W + S)
      256:12653:          call random_number(tmp)
call    0 returned 100%
      256:12654:          C(i) = int(tmp * W + S)
      256:12655:          call random_number(tmp)
call    0 returned 100%
      257:12656:          D(i) = int(tmp * W + S)
        -:12657:      enddo
        -:12658:
        -:12659:!dvm$ actual(B, C, D)
        -:12660:!dvm$ region
        -:12661:!dvm$ parallel (i) on A(i)
      257:12662:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12663:          A(i) = min0(B(i), C(i), D(i))
        -:12664:      enddo
        -:12665:!dvm$ end region
        -:12666:!dvm$ get_actual(A)
        -:12667:
        -:12668:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12669:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12670:          if (min0(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12671:              erri = min(erri, i)
        -:12672:          endif
        -:12673:      enddo
        -:12674:
        1:12675:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12676:          call ansyes(tname)
call    0 returned 100%
        -:12677:      else
    #####:12678:          call ansno(tname)
call    0 never executed
        -:12679:      endif 
        -:12680:      
       1*:12681:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12682:
        -:12683:C -------------------------------------------------
        -:12684:
function min8__ called 1 returned 100% blocks executed 81%
        1:12685:      subroutine min8_
        -:12686:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12687:      character*24 tname
        -:12688:      real A(N), B(N), C(N), D(N)
        -:12689:      integer erri, i, asize, clock
        1:12690:      integer, allocatable :: seed(:)
        -:12691:
        -:12692:!dvm$ distribute A(BLOCK)
        -:12693:
        1:12694:      call random_seed(size = asize)
call    0 returned 100%
       3*:12695:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12696:      call system_clock(count = clock)
call    0 returned 100%
      34*:12697:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12698:      call random_seed(put = seed)
call    0 returned 100%
       1*:12699:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12700:
        1:12701:      tname = 'amin1_float'
        1:12702:      erri = ER
        -:12703:
      257:12704:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12705:          call random_number(B(i))
call    0 returned 100%
      256:12706:          B(i) = B(i) * W + S
      256:12707:          call random_number(C(i))
call    0 returned 100%
      256:12708:          C(i) = C(i) * W + S
      256:12709:          call random_number(D(i))
call    0 returned 100%
      257:12710:          D(i) = D(i) * W + S
        -:12711:      enddo
        -:12712:
        -:12713:!dvm$ actual(B, C, D)
        -:12714:!dvm$ region
        -:12715:!dvm$ parallel (i) on A(i)
      257:12716:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12717:          A(i) = amin1(B(i), C(i), D(i))
        -:12718:      enddo
        -:12719:!dvm$ end region
        -:12720:!dvm$ get_actual(A)
        -:12721:
        -:12722:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12723:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12724:          if (amin1(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12725:              erri = min(erri, i)
        -:12726:          endif
        -:12727:      enddo
        -:12728:
        1:12729:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12730:          call ansyes(tname)
call    0 returned 100%
        -:12731:      else
    #####:12732:          call ansno(tname)
call    0 never executed
        -:12733:      endif 
        -:12734:      
       1*:12735:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12736:
        -:12737:C -------------------------------------------------
        -:12738:
function min9__ called 1 returned 100% blocks executed 81%
        1:12739:      subroutine min9_
        -:12740:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12741:      character*24 tname
        -:12742:      real*8 A(N), B(N), C(N), D(N)
        -:12743:      integer erri, i, asize, clock
        1:12744:      integer, allocatable :: seed(:)
        -:12745:
        -:12746:!dvm$ distribute A(BLOCK)
        -:12747:
        1:12748:      call random_seed(size = asize)
call    0 returned 100%
       3*:12749:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12750:      call system_clock(count = clock)
call    0 returned 100%
      34*:12751:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12752:      call random_seed(put = seed)
call    0 returned 100%
       1*:12753:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12754:
        1:12755:      tname = 'dmin1_double'
        1:12756:      erri = ER
        -:12757:
      257:12758:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12759:          call random_number(B(i))
call    0 returned 100%
      256:12760:          B(i) = B(i) * W + S
      256:12761:          call random_number(C(i))
call    0 returned 100%
      256:12762:          C(i) = C(i) * W + S
      256:12763:          call random_number(D(i))
call    0 returned 100%
      257:12764:          D(i) = D(i) * W + S
        -:12765:      enddo
        -:12766:
        -:12767:!dvm$ actual(B, C, D)
        -:12768:!dvm$ region
        -:12769:!dvm$ parallel (i) on A(i)
      257:12770:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12771:          A(i) = dmin1(B(i), C(i), D(i))
        -:12772:      enddo
        -:12773:!dvm$ end region
        -:12774:!dvm$ get_actual(A)
        -:12775:
        -:12776:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12777:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12778:          if (dmin1(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12779:              erri = min(erri, i)
        -:12780:          endif
        -:12781:      enddo
        -:12782:
        1:12783:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12784:          call ansyes(tname)
call    0 returned 100%
        -:12785:      else
    #####:12786:          call ansno(tname)
call    0 never executed
        -:12787:      endif 
        -:12788:      
       1*:12789:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12790:
        -:12791:C -------------------------------------------------
        -:12792:
function min13__ called 1 returned 100% blocks executed 81%
        1:12793:      subroutine min13_
        -:12794:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12795:      character*24 tname
        -:12796:      integer*4 A(N)
        -:12797:      real B(N), C(N), D(N)
        -:12798:      integer erri, i, asize, clock
        1:12799:      integer, allocatable :: seed(:)
        -:12800:
        -:12801:!dvm$ distribute A(BLOCK)
        -:12802:
        1:12803:      call random_seed(size = asize)
call    0 returned 100%
       3*:12804:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12805:      call system_clock(count = clock)
call    0 returned 100%
      34*:12806:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12807:      call random_seed(put = seed)
call    0 returned 100%
       1*:12808:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12809:
        1:12810:      tname = 'min1_float'
        1:12811:      erri = ER
        -:12812:
      257:12813:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12814:          call random_number(B(i))
call    0 returned 100%
      256:12815:          B(i) = B(i) * W + S
      256:12816:          call random_number(C(i))
call    0 returned 100%
      256:12817:          C(i) = C(i) * W + S
      256:12818:          call random_number(D(i))
call    0 returned 100%
      257:12819:          D(i) = D(i) * W + S
        -:12820:      enddo
        -:12821:
        -:12822:!dvm$ actual(B, C, D)
        -:12823:!dvm$ region
        -:12824:!dvm$ parallel (i) on A(i)
      257:12825:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12826:          A(i) = min1(B(i), C(i), D(i))
        -:12827:      enddo
        -:12828:!dvm$ end region
        -:12829:!dvm$ get_actual(A)
        -:12830:
        -:12831:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12832:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12833:          if (min1(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12834:              erri = min(erri, i)
        -:12835:          endif
        -:12836:      enddo
        -:12837:
        1:12838:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12839:          call ansyes(tname)
call    0 returned 100%
        -:12840:      else
    #####:12841:          call ansno(tname)
call    0 never executed
        -:12842:      endif 
        -:12843:      
       1*:12844:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12845:
        -:12846:C -------------------------------------------------
        -:12847:
function min17__ called 1 returned 100% blocks executed 81%
        1:12848:      subroutine min17_
        -:12849:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:12850:      character*24 tname
        -:12851:      real A(N)
        -:12852:      integer*4 B(N), C(N), D(N)
        -:12853:      integer erri, i, asize, clock
        1:12854:      integer, allocatable :: seed(:)
        -:12855:      real tmp
        -:12856:
        -:12857:!dvm$ distribute A(BLOCK)
        -:12858:
        1:12859:      call random_seed(size = asize)
call    0 returned 100%
       3*:12860:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12861:      call system_clock(count = clock)
call    0 returned 100%
      34*:12862:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12863:      call random_seed(put = seed)
call    0 returned 100%
       1*:12864:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12865:
        1:12866:      tname = 'amin0_long'
        1:12867:      erri = ER
        -:12868:
      257:12869:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12870:          call random_number(tmp)
call    0 returned 100%
      256:12871:          B(i) = int(tmp * W + S)
      256:12872:          call random_number(tmp)
call    0 returned 100%
      256:12873:          C(i) = int(tmp * W + S)
      256:12874:          call random_number(tmp)
call    0 returned 100%
      257:12875:          D(i) = int(tmp * W + S)
        -:12876:      enddo
        -:12877:
        -:12878:!dvm$ actual(B, C, D)
        -:12879:!dvm$ region
        -:12880:!dvm$ parallel (i) on A(i)
      257:12881:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12882:          A(i) = amin0(B(i), C(i), D(i))
        -:12883:      enddo
        -:12884:!dvm$ end region
        -:12885:!dvm$ get_actual(A)
        -:12886:
        -:12887:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12888:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12889:          if (amin0(B(i), C(i), D(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12890:              erri = min(erri, i)
        -:12891:          endif
        -:12892:      enddo
        -:12893:
        1:12894:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12895:          call ansyes(tname)
call    0 returned 100%
        -:12896:      else
    #####:12897:          call ansno(tname)
call    0 never executed
        -:12898:      endif 
        -:12899:      
       1*:12900:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12901:
        -:12902:C -------------------------------------------------
        -:12903:
function mod1_ called 1 returned 100% blocks executed 81%
        1:12904:      subroutine mod1
        -:12905:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:12906:     & = 99, S2 = 1
        -:12907:      character*24 tname
        -:12908:      integer*1 A(N), B(N), C(N)
        -:12909:      integer erri, i, asize, clock
        1:12910:      integer, allocatable :: seed(:)
        -:12911:      real tmp
        -:12912:
        -:12913:!dvm$ distribute A(BLOCK)
        -:12914:
        1:12915:      call random_seed(size = asize)
call    0 returned 100%
       3*:12916:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12917:      call system_clock(count = clock)
call    0 returned 100%
      34*:12918:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12919:      call random_seed(put = seed)
call    0 returned 100%
       1*:12920:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12921:
        1:12922:      tname = 'mod_char'
        1:12923:      erri = ER
        -:12924:
      257:12925:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12926:          call random_number(tmp)
call    0 returned 100%
      256:12927:          B(i) = int(tmp * W1 + S1)
      256:12928:          call random_number(tmp)
call    0 returned 100%
      257:12929:          C(i) = int(tmp * W2 + S2)
        -:12930:      enddo
        -:12931:
        -:12932:!dvm$ actual(B, C)
        -:12933:!dvm$ region
        -:12934:!dvm$ parallel (i) on A(i)
      257:12935:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12936:          A(i) = mod(B(i), C(i))
        -:12937:      enddo
        -:12938:!dvm$ end region
        -:12939:!dvm$ get_actual(A)
        -:12940:
        -:12941:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12942:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12943:          if (mod(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12944:              erri = min(erri, i)
        -:12945:          endif
        -:12946:      enddo
        -:12947:
        1:12948:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:12949:          call ansyes(tname)
call    0 returned 100%
        -:12950:      else
    #####:12951:          call ansno(tname)
call    0 never executed
        -:12952:      endif 
        -:12953:      
       1*:12954:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:12955:
        -:12956:C -------------------------------------------------
        -:12957:
function mod2_ called 1 returned 100% blocks executed 81%
        1:12958:      subroutine mod2
        -:12959:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:12960:     & = 99, S2 = 1
        -:12961:      character*24 tname
        -:12962:      integer*2 A(N), B(N), C(N)
        -:12963:      integer erri, i, asize, clock
        1:12964:      integer, allocatable :: seed(:)
        -:12965:      real tmp
        -:12966:
        -:12967:!dvm$ distribute A(BLOCK)
        -:12968:
        1:12969:      call random_seed(size = asize)
call    0 returned 100%
       3*:12970:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:12971:      call system_clock(count = clock)
call    0 returned 100%
      34*:12972:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:12973:      call random_seed(put = seed)
call    0 returned 100%
       1*:12974:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:12975:
        1:12976:      tname = 'mod_short'
        1:12977:      erri = ER
        -:12978:
      257:12979:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:12980:          call random_number(tmp)
call    0 returned 100%
      256:12981:          B(i) = int(tmp * W1 + S1)
      256:12982:          call random_number(tmp)
call    0 returned 100%
      257:12983:          C(i) = int(tmp * W2 + S2)
        -:12984:      enddo
        -:12985:
        -:12986:!dvm$ actual(B, C)
        -:12987:!dvm$ region
        -:12988:!dvm$ parallel (i) on A(i)
      257:12989:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:12990:          A(i) = mod(B(i), C(i))
        -:12991:      enddo
        -:12992:!dvm$ end region
        -:12993:!dvm$ get_actual(A)
        -:12994:
        -:12995:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:12996:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:12997:          if (mod(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:12998:              erri = min(erri, i)
        -:12999:          endif
        -:13000:      enddo
        -:13001:
        1:13002:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13003:          call ansyes(tname)
call    0 returned 100%
        -:13004:      else
    #####:13005:          call ansno(tname)
call    0 never executed
        -:13006:      endif 
        -:13007:      
       1*:13008:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13009:
        -:13010:C -------------------------------------------------
        -:13011:
function mod3_ called 1 returned 100% blocks executed 81%
        1:13012:      subroutine mod3
        -:13013:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13014:     & = 99, S2 = 1
        -:13015:      character*24 tname
        -:13016:      integer*4 A(N), B(N), C(N)
        -:13017:      integer erri, i, asize, clock
        1:13018:      integer, allocatable :: seed(:)
        -:13019:      real tmp
        -:13020:
        -:13021:!dvm$ distribute A(BLOCK)
        -:13022:
        1:13023:      call random_seed(size = asize)
call    0 returned 100%
       3*:13024:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13025:      call system_clock(count = clock)
call    0 returned 100%
      34*:13026:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13027:      call random_seed(put = seed)
call    0 returned 100%
       1*:13028:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13029:
        1:13030:      tname = 'mod_long'
        1:13031:      erri = ER
        -:13032:
      257:13033:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13034:          call random_number(tmp)
call    0 returned 100%
      256:13035:          B(i) = int(tmp * W1 + S1)
      256:13036:          call random_number(tmp)
call    0 returned 100%
      257:13037:          C(i) = int(tmp * W2 + S2)
        -:13038:      enddo
        -:13039:
        -:13040:!dvm$ actual(B, C)
        -:13041:!dvm$ region
        -:13042:!dvm$ parallel (i) on A(i)
      257:13043:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13044:          A(i) = mod(B(i), C(i))
        -:13045:      enddo
        -:13046:!dvm$ end region
        -:13047:!dvm$ get_actual(A)
        -:13048:
        -:13049:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13050:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13051:          if (mod(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13052:              erri = min(erri, i)
        -:13053:          endif
        -:13054:      enddo
        -:13055:
        1:13056:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13057:          call ansyes(tname)
call    0 returned 100%
        -:13058:      else
    #####:13059:          call ansno(tname)
call    0 never executed
        -:13060:      endif 
        -:13061:      
       1*:13062:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13063:
        -:13064:C -------------------------------------------------
        -:13065:
function mod4_ called 1 returned 100% blocks executed 81%
        1:13066:      subroutine mod4
        -:13067:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13068:     & = 99, S2 = 1
        -:13069:      character*24 tname
        -:13070:      integer*8 A(N), B(N), C(N)
        -:13071:      integer erri, i, asize, clock
        1:13072:      integer, allocatable :: seed(:)
        -:13073:      real tmp
        -:13074:
        -:13075:!dvm$ distribute A(BLOCK)
        -:13076:
        1:13077:      call random_seed(size = asize)
call    0 returned 100%
       3*:13078:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13079:      call system_clock(count = clock)
call    0 returned 100%
      34*:13080:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13081:      call random_seed(put = seed)
call    0 returned 100%
       1*:13082:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13083:
        1:13084:      tname = 'mod_longlong'
        1:13085:      erri = ER
        -:13086:
      257:13087:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13088:          call random_number(tmp)
call    0 returned 100%
      256:13089:          B(i) = int(tmp * W1 + S1)
      256:13090:          call random_number(tmp)
call    0 returned 100%
      257:13091:          C(i) = int(tmp * W2 + S2)
        -:13092:      enddo
        -:13093:
        -:13094:!dvm$ actual(B, C)
        -:13095:!dvm$ region
        -:13096:!dvm$ parallel (i) on A(i)
      257:13097:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13098:          A(i) = mod(B(i), C(i))
        -:13099:      enddo
        -:13100:!dvm$ end region
        -:13101:!dvm$ get_actual(A)
        -:13102:
        -:13103:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13104:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13105:          if (mod(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13106:              erri = min(erri, i)
        -:13107:          endif
        -:13108:      enddo
        -:13109:
        1:13110:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13111:          call ansyes(tname)
call    0 returned 100%
        -:13112:      else
    #####:13113:          call ansno(tname)
call    0 never executed
        -:13114:      endif 
        -:13115:      
       1*:13116:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13117:
        -:13118:C -------------------------------------------------
        -:13119:
function mod10_ called 1 returned 100% blocks executed 80%
        1:13120:      subroutine mod10
        -:13121:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13122:     & = 99, S2 = 1
        -:13123:      character*24 tname
        -:13124:      real A(N), B(N), C(N)
        -:13125:      integer erri, i, asize, clock
        1:13126:      integer, allocatable :: seed(:)
        -:13127:      real tmp
        -:13128:
        -:13129:!dvm$ distribute A(BLOCK)
        -:13130:
        1:13131:      call random_seed(size = asize)
call    0 returned 100%
       3*:13132:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13133:      call system_clock(count = clock)
call    0 returned 100%
      34*:13134:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13135:      call random_seed(put = seed)
call    0 returned 100%
       1*:13136:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13137:
        1:13138:      tname = 'amod_float'
        1:13139:      erri = ER
        -:13140:
      257:13141:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:13142:          call random_number(tmp)
call    0 returned 100%
      256:13143:          B(i) = int(tmp * W1 + S1)
      256:13144:          call random_number(tmp)
call    0 returned 100%
      257:13145:          C(i) = int(tmp * W2 + S2)
        -:13146:      enddo
        -:13147:
        -:13148:!dvm$ actual(B, C)
        -:13149:!dvm$ region
        -:13150:!dvm$ parallel (i) on A(i)
      257:13151:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13152:          A(i) = amod(B(i), C(i))
        -:13153:      enddo
        -:13154:!dvm$ end region
        -:13155:!dvm$ get_actual(A)
        -:13156:
        -:13157:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13158:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13159:          if (amod(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13160:              erri = min(erri, i)
        -:13161:          endif
        -:13162:      enddo
        -:13163:
        1:13164:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13165:          call ansyes(tname)
call    0 returned 100%
        -:13166:      else
    #####:13167:          call ansno(tname)
call    0 never executed
        -:13168:      endif 
        -:13169:      
       1*:13170:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13171:
        -:13172:C -------------------------------------------------
        -:13173:
function mod11_ called 1 returned 100% blocks executed 80%
        1:13174:      subroutine mod11
        -:13175:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13176:     & = 99, S2 = 1
        -:13177:      character*24 tname
        -:13178:      real*8 A(N), B(N), C(N)
        -:13179:      integer erri, i, asize, clock
        1:13180:      integer, allocatable :: seed(:)
        -:13181:      real tmp
        -:13182:
        -:13183:!dvm$ distribute A(BLOCK)
        -:13184:
        1:13185:      call random_seed(size = asize)
call    0 returned 100%
       3*:13186:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13187:      call system_clock(count = clock)
call    0 returned 100%
      34*:13188:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13189:      call random_seed(put = seed)
call    0 returned 100%
       1*:13190:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13191:
        1:13192:      tname = 'dmod_double'
        1:13193:      erri = ER
        -:13194:
      257:13195:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:13196:          call random_number(tmp)
call    0 returned 100%
      256:13197:          B(i) = int(tmp * W1 + S1)
      256:13198:          call random_number(tmp)
call    0 returned 100%
      257:13199:          C(i) = int(tmp * W2 + S2)
        -:13200:      enddo
        -:13201:
        -:13202:!dvm$ actual(B, C)
        -:13203:!dvm$ region
        -:13204:!dvm$ parallel (i) on A(i)
      257:13205:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13206:          A(i) = dmod(B(i), C(i))
        -:13207:      enddo
        -:13208:!dvm$ end region
        -:13209:!dvm$ get_actual(A)
        -:13210:
        -:13211:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13212:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13213:          if (dmod(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13214:              erri = min(erri, i)
        -:13215:          endif
        -:13216:      enddo
        -:13217:
        1:13218:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13219:          call ansyes(tname)
call    0 returned 100%
        -:13220:      else
    #####:13221:          call ansno(tname)
call    0 never executed
        -:13222:      endif 
        -:13223:      
       1*:13224:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13225:
        -:13226:C -------------------------------------------------
        -:13227:
function modulo1_ called 1 returned 100% blocks executed 81%
        1:13228:      subroutine modulo1
        -:13229:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13230:     & = 99, S2 = 1
        -:13231:      character*24 tname
        -:13232:      integer*1 A(N), B(N), C(N)
        -:13233:      integer erri, i, asize, clock
        1:13234:      integer, allocatable :: seed(:)
        -:13235:      real tmp
        -:13236:
        -:13237:!dvm$ distribute A(BLOCK)
        -:13238:
        1:13239:      call random_seed(size = asize)
call    0 returned 100%
       3*:13240:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13241:      call system_clock(count = clock)
call    0 returned 100%
      34*:13242:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13243:      call random_seed(put = seed)
call    0 returned 100%
       1*:13244:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13245:
        1:13246:      tname = 'modulo_char'
        1:13247:      erri = ER
        -:13248:
      257:13249:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13250:          call random_number(tmp)
call    0 returned 100%
      256:13251:          B(i) = int(tmp * W1 + S1)
      256:13252:          call random_number(tmp)
call    0 returned 100%
      257:13253:          C(i) = int(tmp * W2 + S2)
        -:13254:      enddo
        -:13255:
        -:13256:!dvm$ actual(B, C)
        -:13257:!dvm$ region
        -:13258:!dvm$ parallel (i) on A(i)
      257:13259:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13260:          A(i) = modulo(B(i), C(i))
        -:13261:      enddo
        -:13262:!dvm$ end region
        -:13263:!dvm$ get_actual(A)
        -:13264:
        -:13265:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13266:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13267:          if (modulo(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13268:               erri = min(erri, i)
        -:13269:          endif
        -:13270:      enddo
        -:13271:
        1:13272:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13273:          call ansyes(tname)
call    0 returned 100%
        -:13274:      else
    #####:13275:          call ansno(tname)
call    0 never executed
        -:13276:      endif 
        -:13277:      
       1*:13278:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13279:
        -:13280:C -------------------------------------------------
        -:13281:
function modulo2_ called 1 returned 100% blocks executed 81%
        1:13282:      subroutine modulo2
        -:13283:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13284:     & = 99, S2 = 1
        -:13285:      character*24 tname
        -:13286:      integer*2 A(N), B(N), C(N)
        -:13287:      integer erri, i, asize, clock
        1:13288:      integer, allocatable :: seed(:)
        -:13289:      real tmp
        -:13290:
        -:13291:!dvm$ distribute A(BLOCK)
        -:13292:
        1:13293:      call random_seed(size = asize)
call    0 returned 100%
       3*:13294:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13295:      call system_clock(count = clock)
call    0 returned 100%
      34*:13296:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13297:      call random_seed(put = seed)
call    0 returned 100%
       1*:13298:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13299:
        1:13300:      tname = 'modulo_short'
        1:13301:      erri = ER
        -:13302:
      257:13303:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13304:          call random_number(tmp)
call    0 returned 100%
      256:13305:          B(i) = int(tmp * W1 + S1)
      256:13306:          call random_number(tmp)
call    0 returned 100%
      257:13307:          C(i) = int(tmp * W2 + S2)
        -:13308:      enddo
        -:13309:
        -:13310:!dvm$ actual(B, C)
        -:13311:!dvm$ region
        -:13312:!dvm$ parallel (i) on A(i)
      257:13313:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13314:          A(i) = modulo(B(i), C(i))
        -:13315:      enddo
        -:13316:!dvm$ end region
        -:13317:!dvm$ get_actual(A)
        -:13318:
        -:13319:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13320:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13321:          if (modulo(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13322:               erri = min(erri, i)
        -:13323:          endif
        -:13324:      enddo
        -:13325:
        1:13326:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13327:          call ansyes(tname)
call    0 returned 100%
        -:13328:      else
    #####:13329:          call ansno(tname)
call    0 never executed
        -:13330:      endif 
        -:13331:      
       1*:13332:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13333:
        -:13334:C -------------------------------------------------
        -:13335:
function modulo3_ called 1 returned 100% blocks executed 81%
        1:13336:      subroutine modulo3
        -:13337:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13338:     & = 99, S2 = 1
        -:13339:      character*24 tname
        -:13340:      integer*4 A(N), B(N), C(N)
        -:13341:      integer erri, i, asize, clock
        1:13342:      integer, allocatable :: seed(:)
        -:13343:      real tmp
        -:13344:
        -:13345:!dvm$ distribute A(BLOCK)
        -:13346:
        1:13347:      call random_seed(size = asize)
call    0 returned 100%
       3*:13348:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13349:      call system_clock(count = clock)
call    0 returned 100%
      34*:13350:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13351:      call random_seed(put = seed)
call    0 returned 100%
       1*:13352:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13353:
        1:13354:      tname = 'modulo_long'
        1:13355:      erri = ER
        -:13356:
      257:13357:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13358:          call random_number(tmp)
call    0 returned 100%
      256:13359:          B(i) = int(tmp * W1 + S1)
      256:13360:          call random_number(tmp)
call    0 returned 100%
      257:13361:          C(i) = int(tmp * W2 + S2)
        -:13362:      enddo
        -:13363:
        -:13364:!dvm$ actual(B, C)
        -:13365:!dvm$ region
        -:13366:!dvm$ parallel (i) on A(i)
      257:13367:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13368:          A(i) = modulo(B(i), C(i))
        -:13369:      enddo
        -:13370:!dvm$ end region
        -:13371:!dvm$ get_actual(A)
        -:13372:
        -:13373:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13374:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13375:          if (modulo(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13376:              erri = min(erri, i)
        -:13377:          endif
        -:13378:      enddo
        -:13379:
        1:13380:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13381:          call ansyes(tname)
call    0 returned 100%
        -:13382:      else
    #####:13383:          call ansno(tname)
call    0 never executed
        -:13384:      endif 
        -:13385:      
       1*:13386:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13387:
        -:13388:C -------------------------------------------------
        -:13389:
function modulo4_ called 1 returned 100% blocks executed 81%
        1:13390:      subroutine modulo4
        -:13391:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13392:     & = 99, S2 = 1
        -:13393:      character*24 tname
        -:13394:      integer*8 A(N), B(N), C(N)
        -:13395:      integer erri, i, asize, clock
        1:13396:      integer, allocatable :: seed(:)
        -:13397:      real tmp
        -:13398:
        -:13399:!dvm$ distribute A(BLOCK)
        -:13400:
        1:13401:      call random_seed(size = asize)
call    0 returned 100%
       3*:13402:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13403:      call system_clock(count = clock)
call    0 returned 100%
      34*:13404:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13405:      call random_seed(put = seed)
call    0 returned 100%
       1*:13406:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13407:
        1:13408:      tname = 'modulo_longlong'
        1:13409:      erri = ER
        -:13410:
      257:13411:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13412:          call random_number(tmp)
call    0 returned 100%
      256:13413:          B(i) = int(tmp * W1 + S1)
      256:13414:          call random_number(tmp)
call    0 returned 100%
      257:13415:          C(i) = int(tmp * W2 + S2)
        -:13416:      enddo
        -:13417:
        -:13418:!dvm$ actual(B, C)
        -:13419:!dvm$ region
        -:13420:!dvm$ parallel (i) on A(i)
      257:13421:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13422:          A(i) = modulo(B(i), C(i))
        -:13423:      enddo
        -:13424:!dvm$ end region
        -:13425:!dvm$ get_actual(A)
        -:13426:
        -:13427:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13428:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13429:          if (modulo(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13430:              erri = min(erri, i)
        -:13431:          endif
        -:13432:      enddo
        -:13433:
        1:13434:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13435:          call ansyes(tname)
call    0 returned 100%
        -:13436:      else
    #####:13437:          call ansno(tname)
call    0 never executed
        -:13438:      endif 
        -:13439:      
       1*:13440:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13441:
        -:13442:C -------------------------------------------------
        -:13443:
function modulo5_ called 1 returned 100% blocks executed 79%
        1:13444:      subroutine modulo5
        -:13445:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13446:     & = 99, S2 = 1
        -:13447:      real, parameter :: EPS = 1e-5
        -:13448:      character*24 tname
        -:13449:      real A(N), B(N), C(N)
        -:13450:      integer erri, i, asize, clock
        1:13451:      integer, allocatable :: seed(:)
        -:13452:
        -:13453:!dvm$ distribute A(BLOCK)
        -:13454:
        1:13455:      call random_seed(size = asize)
call    0 returned 100%
       3*:13456:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13457:      call system_clock(count = clock)
call    0 returned 100%
      34*:13458:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13459:      call random_seed(put = seed)
call    0 returned 100%
       1*:13460:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13461:
        1:13462:      tname = 'modulo_float'
        1:13463:      erri = ER
        -:13464:
      257:13465:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:13466:          call random_number(B(i))
call    0 returned 100%
      256:13467:          B(i) = B(i) * W1 + S1
      256:13468:          call random_number(C(i))
call    0 returned 100%
      257:13469:          C(i) = C(i) * W2 + S2
        -:13470:      enddo
        -:13471:
        -:13472:!dvm$ actual(B, C)
        -:13473:!dvm$ region
        -:13474:!dvm$ parallel (i) on A(i)
      257:13475:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     257*:13476:          A(i) = modulo(B(i), C(i))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 44% (fallthrough)
branch  3 taken 56%
        -:13477:      enddo
        -:13478:!dvm$ end region
        -:13479:!dvm$ get_actual(A)
        -:13480:
        -:13481:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13482:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     257*:13483:          if (abs(modulo(B(i), C(i)) - A(i)) .gt. EPS) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 44% (fallthrough)
branch  3 taken 56%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:13484:              erri = min(erri, i)
        -:13485:          endif
        -:13486:      enddo
        -:13487:
        1:13488:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13489:          call ansyes(tname)
call    0 returned 100%
        -:13490:      else
    #####:13491:          call ansno(tname)
call    0 never executed
        -:13492:      endif 
        -:13493:      
       1*:13494:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13495:
        -:13496:C -------------------------------------------------
        -:13497:
function modulo6_ called 1 returned 100% blocks executed 79%
        1:13498:      subroutine modulo6
        -:13499:      integer, parameter :: N = 256, ER = N + 1, W1 = 200, S1 = -100, W2
        -:13500:     & = 99, S2 = 1
        -:13501:      real*8, parameter :: EPS = 1d-12
        -:13502:      character*24 tname
        -:13503:      real*8 A(N), B(N), C(N)
        -:13504:      integer erri, i, asize, clock
        1:13505:      integer, allocatable :: seed(:)
        -:13506:
        -:13507:!dvm$ distribute A(BLOCK)
        -:13508:
        1:13509:      call random_seed(size = asize)
call    0 returned 100%
       3*:13510:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13511:      call system_clock(count = clock)
call    0 returned 100%
      34*:13512:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13513:      call random_seed(put = seed)
call    0 returned 100%
       1*:13514:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13515:
        1:13516:      tname = 'modulo_double'
        1:13517:      erri = ER
        -:13518:
      257:13519:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:13520:          call random_number(B(i))
call    0 returned 100%
      256:13521:          B(i) = B(i) * W1 + S1
      256:13522:          call random_number(C(i))
call    0 returned 100%
      257:13523:          C(i) = C(i) * W2 + S2
        -:13524:      enddo
        -:13525:
        -:13526:!dvm$ actual(B, C)
        -:13527:!dvm$ region
        -:13528:!dvm$ parallel (i) on A(i)
      257:13529:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     257*:13530:          A(i) = modulo(B(i), C(i))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 44% (fallthrough)
branch  3 taken 56%
        -:13531:      enddo
        -:13532:!dvm$ end region
        -:13533:!dvm$ get_actual(A)
        -:13534:
        -:13535:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13536:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
     257*:13537:          if (abs(modulo(B(i), C(i)) - A(i)) .gt. EPS) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 44% (fallthrough)
branch  3 taken 56%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:13538:              erri = min(erri, i)
        -:13539:          endif
        -:13540:      enddo
        -:13541:
        1:13542:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13543:          call ansyes(tname)
call    0 returned 100%
        -:13544:      else
    #####:13545:          call ansno(tname)
call    0 never executed
        -:13546:      endif 
        -:13547:      
       1*:13548:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13549:
        -:13550:C -------------------------------------------------
        -:13551:
function not1_ called 1 returned 100% blocks executed 80%
        1:13552:      subroutine not1
        -:13553:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13554:      character*24 tname
        -:13555:      integer*1 A(N), B(N)
        -:13556:      integer erri, i, asize, clock
        1:13557:      integer, allocatable :: seed(:)
        -:13558:      real tmp
        -:13559:
        -:13560:!dvm$ distribute A(BLOCK)
        -:13561:
        1:13562:      call random_seed(size = asize)
call    0 returned 100%
       3*:13563:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13564:      call system_clock(count = clock)
call    0 returned 100%
      34*:13565:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13566:      call random_seed(put = seed)
call    0 returned 100%
       1*:13567:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13568:
        1:13569:      tname = 'not_char'
        1:13570:      erri = ER
        -:13571:
      257:13572:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13573:          call random_number(tmp)
call    0 returned 100%
      257:13574:          B(i) = int(tmp * W + S)
        -:13575:      enddo
        -:13576:
        -:13577:!dvm$ actual(B)
        -:13578:!dvm$ region
        -:13579:!dvm$ parallel (i) on A(i)
      257:13580:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13581:          A(i) = not(B(i))
        -:13582:      enddo
        -:13583:!dvm$ end region
        -:13584:!dvm$ get_actual(A)
        -:13585:
        -:13586:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13587:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13588:          if (not(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13589:              erri = min(erri, i)
        -:13590:          endif
        -:13591:      enddo
        -:13592:
        1:13593:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13594:          call ansyes(tname)
call    0 returned 100%
        -:13595:      else
    #####:13596:          call ansno(tname)
call    0 never executed
        -:13597:      endif 
        -:13598:      
       1*:13599:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13600:
        -:13601:C -------------------------------------------------
        -:13602:
function not2_ called 1 returned 100% blocks executed 80%
        1:13603:      subroutine not2
        -:13604:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13605:      character*24 tname
        -:13606:      integer*2 A(N), B(N)
        -:13607:      integer erri, i, asize, clock
        1:13608:      integer, allocatable :: seed(:)
        -:13609:      real tmp
        -:13610:
        -:13611:!dvm$ distribute A(BLOCK)
        -:13612:
        1:13613:      call random_seed(size = asize)
call    0 returned 100%
       3*:13614:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13615:      call system_clock(count = clock)
call    0 returned 100%
      34*:13616:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13617:      call random_seed(put = seed)
call    0 returned 100%
       1*:13618:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13619:
        1:13620:      tname = 'not_short'
        1:13621:      erri = ER
        -:13622:
      257:13623:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13624:          call random_number(tmp)
call    0 returned 100%
      257:13625:          B(i) = int(tmp * W + S)
        -:13626:      enddo
        -:13627:
        -:13628:!dvm$ actual(B)
        -:13629:!dvm$ region
        -:13630:!dvm$ parallel (i) on A(i)
      257:13631:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13632:          A(i) = not(B(i))
        -:13633:      enddo
        -:13634:!dvm$ end region
        -:13635:!dvm$ get_actual(A)
        -:13636:
        -:13637:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13638:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13639:          if (not(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13640:              erri = min(erri, i)
        -:13641:          endif
        -:13642:      enddo
        -:13643:
        1:13644:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13645:          call ansyes(tname)
call    0 returned 100%
        -:13646:      else
    #####:13647:          call ansno(tname)
call    0 never executed
        -:13648:      endif 
        -:13649:      
       1*:13650:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13651:
        -:13652:C -------------------------------------------------
        -:13653:
function not3_ called 1 returned 100% blocks executed 80%
        1:13654:      subroutine not3
        -:13655:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13656:      character*24 tname
        -:13657:      integer*4 A(N), B(N)
        -:13658:      integer erri, i, asize, clock
        1:13659:      integer, allocatable :: seed(:)
        -:13660:      real tmp
        -:13661:
        -:13662:!dvm$ distribute A(BLOCK)
        -:13663:
        1:13664:      call random_seed(size = asize)
call    0 returned 100%
       3*:13665:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13666:      call system_clock(count = clock)
call    0 returned 100%
      34*:13667:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13668:      call random_seed(put = seed)
call    0 returned 100%
       1*:13669:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13670:
        1:13671:      tname = 'not_long'
        1:13672:      erri = ER
        -:13673:
      257:13674:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13675:          call random_number(tmp)
call    0 returned 100%
      257:13676:          B(i) = int(tmp * W + S)
        -:13677:      enddo
        -:13678:
        -:13679:!dvm$ actual(B)
        -:13680:!dvm$ region
        -:13681:!dvm$ parallel (i) on A(i)
      257:13682:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13683:          A(i) = not(B(i))
        -:13684:      enddo
        -:13685:!dvm$ end region
        -:13686:!dvm$ get_actual(A)
        -:13687:
        -:13688:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13689:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13690:          if (not(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13691:              erri = min(erri, i)
        -:13692:          endif
        -:13693:      enddo
        -:13694:
        1:13695:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13696:          call ansyes(tname)
call    0 returned 100%
        -:13697:      else
    #####:13698:          call ansno(tname)
call    0 never executed
        -:13699:      endif 
        -:13700:      
       1*:13701:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13702:
        -:13703:C -------------------------------------------------
        -:13704:
function not4_ called 1 returned 100% blocks executed 80%
        1:13705:      subroutine not4
        -:13706:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13707:      character*24 tname
        -:13708:      integer*8 A(N), B(N)
        -:13709:      integer erri, i, asize, clock
        1:13710:      integer, allocatable :: seed(:)
        -:13711:      real tmp
        -:13712:
        -:13713:!dvm$ distribute A(BLOCK)
        -:13714:
        1:13715:      call random_seed(size = asize)
call    0 returned 100%
       3*:13716:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13717:      call system_clock(count = clock)
call    0 returned 100%
      34*:13718:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13719:      call random_seed(put = seed)
call    0 returned 100%
       1*:13720:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13721:
        1:13722:      tname = 'not_longlong'
        1:13723:      erri = ER
        -:13724:
      257:13725:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13726:          call random_number(tmp)
call    0 returned 100%
      257:13727:          B(i) = int(tmp * W + S)
        -:13728:      enddo
        -:13729:
        -:13730:!dvm$ actual(B)
        -:13731:!dvm$ region
        -:13732:!dvm$ parallel (i) on A(i)
      257:13733:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13734:          A(i) = not(B(i))
        -:13735:      enddo
        -:13736:!dvm$ end region
        -:13737:!dvm$ get_actual(A)
        -:13738:
        -:13739:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13740:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13741:          if (not(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13742:              erri = min(erri, i)
        -:13743:          endif
        -:13744:      enddo
        -:13745:
        1:13746:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13747:          call ansyes(tname)
call    0 returned 100%
        -:13748:      else
    #####:13749:          call ansno(tname)
call    0 never executed
        -:13750:      endif 
        -:13751:      
       1*:13752:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13753:
        -:13754:C -------------------------------------------------
        -:13755:
function popcnt1_ called 1 returned 100% blocks executed 79%
        1:13756:      subroutine popcnt1
        -:13757:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13758:      character*24 tname
        -:13759:      integer*1 A(N), B(N)
        -:13760:      integer erri, i, asize, clock
        1:13761:      integer, allocatable :: seed(:)
        -:13762:      real tmp
        -:13763:
        -:13764:!dvm$ distribute A(BLOCK)
        -:13765:
        1:13766:      call random_seed(size = asize)
call    0 returned 100%
       3*:13767:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13768:      call system_clock(count = clock)
call    0 returned 100%
      34*:13769:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13770:      call random_seed(put = seed)
call    0 returned 100%
       1*:13771:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13772:
        1:13773:      tname = 'popcnt_char'
        1:13774:      erri = ER
        -:13775:
      257:13776:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:13777:          call random_number(tmp)
call    0 returned 100%
      257:13778:          B(i) = int(tmp * W + S)
        -:13779:      enddo
        -:13780:
        -:13781:!dvm$ actual(B)
        -:13782:!dvm$ region
        -:13783:!dvm$ parallel (i) on A(i)
      257:13784:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13785:          A(i) = popcnt(B(i))
        -:13786:      enddo
        -:13787:!dvm$ end region
        -:13788:!dvm$ get_actual(A)
        -:13789:
        -:13790:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13791:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13792:          if (popcnt(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13793:              erri = min(erri, i)
        -:13794:          endif
        -:13795:      enddo
        -:13796:
        1:13797:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13798:          call ansyes(tname)
call    0 returned 100%
        -:13799:      else
    #####:13800:          call ansno(tname)
call    0 never executed
        -:13801:      endif 
        -:13802:      
       1*:13803:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13804:
        -:13805:C -------------------------------------------------
        -:13806:
function popcnt2_ called 1 returned 100% blocks executed 79%
        1:13807:      subroutine popcnt2
        -:13808:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13809:      character*24 tname
        -:13810:      integer*2 A(N), B(N)
        -:13811:      integer erri, i, asize, clock
        1:13812:      integer, allocatable :: seed(:)
        -:13813:      real tmp
        -:13814:
        -:13815:!dvm$ distribute A(BLOCK)
        -:13816:
        1:13817:      call random_seed(size = asize)
call    0 returned 100%
       3*:13818:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13819:      call system_clock(count = clock)
call    0 returned 100%
      34*:13820:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13821:      call random_seed(put = seed)
call    0 returned 100%
       1*:13822:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13823:
        1:13824:      tname = 'popcnt_short'
        1:13825:      erri = ER
        -:13826:
      257:13827:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:13828:          call random_number(tmp)
call    0 returned 100%
      257:13829:          B(i) = int(tmp * W + S)
        -:13830:      enddo
        -:13831:
        -:13832:!dvm$ actual(B)
        -:13833:!dvm$ region
        -:13834:!dvm$ parallel (i) on A(i)
      257:13835:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13836:          A(i) = popcnt(B(i))
        -:13837:      enddo
        -:13838:!dvm$ end region
        -:13839:!dvm$ get_actual(A)
        -:13840:
        -:13841:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13842:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13843:          if (popcnt(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13844:              erri = min(erri, i)
        -:13845:          endif
        -:13846:      enddo
        -:13847:
        1:13848:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13849:          call ansyes(tname)
call    0 returned 100%
        -:13850:      else
    #####:13851:          call ansno(tname)
call    0 never executed
        -:13852:      endif 
        -:13853:      
       1*:13854:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13855:
        -:13856:C -------------------------------------------------
        -:13857:
function popcnt3_ called 1 returned 100% blocks executed 79%
        1:13858:      subroutine popcnt3
        -:13859:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13860:      character*24 tname
        -:13861:      integer*4 A(N), B(N)
        -:13862:      integer erri, i, asize, clock
        1:13863:      integer, allocatable :: seed(:)
        -:13864:      real tmp
        -:13865:
        -:13866:!dvm$ distribute A(BLOCK)
        -:13867:
        1:13868:      call random_seed(size = asize)
call    0 returned 100%
       3*:13869:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13870:      call system_clock(count = clock)
call    0 returned 100%
      34*:13871:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13872:      call random_seed(put = seed)
call    0 returned 100%
       1*:13873:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13874:
        1:13875:      tname = 'popcnt_long'
        1:13876:      erri = ER
        -:13877:
      257:13878:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:13879:          call random_number(tmp)
call    0 returned 100%
      257:13880:          B(i) = int(tmp * W + S)
        -:13881:      enddo
        -:13882:
        -:13883:!dvm$ actual(B)
        -:13884:!dvm$ region
        -:13885:!dvm$ parallel (i) on A(i)
      257:13886:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13887:          A(i) = popcnt(B(i))
        -:13888:      enddo
        -:13889:!dvm$ end region
        -:13890:!dvm$ get_actual(A)
        -:13891:
        -:13892:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13893:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13894:          if (popcnt(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13895:              erri = min(erri, i)
        -:13896:          endif
        -:13897:      enddo
        -:13898:
        1:13899:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13900:          call ansyes(tname)
call    0 returned 100%
        -:13901:      else
    #####:13902:          call ansno(tname)
call    0 never executed
        -:13903:      endif 
        -:13904:      
       1*:13905:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13906:
        -:13907:C -------------------------------------------------
        -:13908:
function popcnt4_ called 1 returned 100% blocks executed 79%
        1:13909:      subroutine popcnt4
        -:13910:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13911:      character*24 tname
        -:13912:      integer*8 A(N), B(N)
        -:13913:      integer erri, i, asize, clock
        1:13914:      integer, allocatable :: seed(:)
        -:13915:      real tmp
        -:13916:
        -:13917:!dvm$ distribute A(BLOCK)
        -:13918:
        1:13919:      call random_seed(size = asize)
call    0 returned 100%
       3*:13920:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13921:      call system_clock(count = clock)
call    0 returned 100%
      34*:13922:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13923:      call random_seed(put = seed)
call    0 returned 100%
       1*:13924:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13925:
        1:13926:      tname = 'popcnt_longlong'
        1:13927:      erri = ER
        -:13928:
      257:13929:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:13930:          call random_number(tmp)
call    0 returned 100%
      257:13931:          B(i) = int(tmp * W + S)
        -:13932:      enddo
        -:13933:
        -:13934:!dvm$ actual(B)
        -:13935:!dvm$ region
        -:13936:!dvm$ parallel (i) on A(i)
      257:13937:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13938:          A(i) = popcnt(B(i))
        -:13939:      enddo
        -:13940:!dvm$ end region
        -:13941:!dvm$ get_actual(A)
        -:13942:
        -:13943:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13944:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13945:          if (popcnt(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13946:              erri = min(erri, i)
        -:13947:          endif
        -:13948:      enddo
        -:13949:
        1:13950:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:13951:          call ansyes(tname)
call    0 returned 100%
        -:13952:      else
    #####:13953:          call ansno(tname)
call    0 never executed
        -:13954:      endif 
        -:13955:      
       1*:13956:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:13957:
        -:13958:C -------------------------------------------------
        -:13959:
function poppar1_ called 1 returned 100% blocks executed 80%
        1:13960:      subroutine poppar1
        -:13961:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:13962:      character*24 tname
        -:13963:      integer*1 A(N), B(N)
        -:13964:      integer erri, i, asize, clock
        1:13965:      integer, allocatable :: seed(:)
        -:13966:      real tmp
        -:13967:
        -:13968:!dvm$ distribute A(BLOCK)
        -:13969:
        1:13970:      call random_seed(size = asize)
call    0 returned 100%
       3*:13971:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:13972:      call system_clock(count = clock)
call    0 returned 100%
      34*:13973:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:13974:      call random_seed(put = seed)
call    0 returned 100%
       1*:13975:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:13976:
        1:13977:      tname = 'poppar_char'
        1:13978:      erri = ER
        -:13979:
      257:13980:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:13981:          call random_number(tmp)
call    0 returned 100%
      257:13982:          B(i) = int(tmp * W + S)
        -:13983:      enddo
        -:13984:
        -:13985:!dvm$ actual(B)
        -:13986:!dvm$ region
        -:13987:!dvm$ parallel (i) on A(i)
      257:13988:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:13989:          A(i) = poppar(B(i))
        -:13990:      enddo
        -:13991:!dvm$ end region
        -:13992:!dvm$ get_actual(A)
        -:13993:
        -:13994:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:13995:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:13996:          if (poppar(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:13997:              erri = min(erri, i)
        -:13998:          endif
        -:13999:      enddo
        -:14000:
        1:14001:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14002:          call ansyes(tname)
call    0 returned 100%
        -:14003:      else
    #####:14004:          call ansno(tname)
call    0 never executed
        -:14005:      endif 
        -:14006:      
       1*:14007:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14008:
        -:14009:C -------------------------------------------------
        -:14010:
function poppar2_ called 1 returned 100% blocks executed 80%
        1:14011:      subroutine poppar2
        -:14012:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14013:      character*24 tname
        -:14014:      integer*2 A(N), B(N)
        -:14015:      integer erri, i, asize, clock
        1:14016:      integer, allocatable :: seed(:)
        -:14017:      real tmp
        -:14018:
        -:14019:!dvm$ distribute A(BLOCK)
        -:14020:
        1:14021:      call random_seed(size = asize)
call    0 returned 100%
       3*:14022:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14023:      call system_clock(count = clock)
call    0 returned 100%
      34*:14024:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14025:      call random_seed(put = seed)
call    0 returned 100%
       1*:14026:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14027:
        1:14028:      tname = 'poppar_short'
        1:14029:      erri = ER
        -:14030:
      257:14031:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14032:          call random_number(tmp)
call    0 returned 100%
      257:14033:          B(i) = int(tmp * W + S)
        -:14034:      enddo
        -:14035:
        -:14036:!dvm$ actual(B)
        -:14037:!dvm$ region
        -:14038:!dvm$ parallel (i) on A(i)
      257:14039:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14040:          A(i) = poppar(B(i))
        -:14041:      enddo
        -:14042:!dvm$ end region
        -:14043:!dvm$ get_actual(A)
        -:14044:
        -:14045:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14046:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14047:          if (poppar(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14048:              erri = min(erri, i)
        -:14049:          endif
        -:14050:      enddo
        -:14051:
        1:14052:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14053:          call ansyes(tname)
call    0 returned 100%
        -:14054:      else
    #####:14055:          call ansno(tname)
call    0 never executed
        -:14056:      endif 
        -:14057:      
       1*:14058:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14059:
        -:14060:C -------------------------------------------------
        -:14061:
function poppar3_ called 1 returned 100% blocks executed 79%
        1:14062:      subroutine poppar3
        -:14063:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14064:      character*24 tname
        -:14065:      integer*4 A(N), B(N)
        -:14066:      integer erri, i, asize, clock
        1:14067:      integer, allocatable :: seed(:)
        -:14068:      real tmp
        -:14069:
        -:14070:!dvm$ distribute A(BLOCK)
        -:14071:
        1:14072:      call random_seed(size = asize)
call    0 returned 100%
       3*:14073:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14074:      call system_clock(count = clock)
call    0 returned 100%
      34*:14075:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14076:      call random_seed(put = seed)
call    0 returned 100%
       1*:14077:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14078:
        1:14079:      tname = 'poppar_long'
        1:14080:      erri = ER
        -:14081:
      257:14082:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:14083:          call random_number(tmp)
call    0 returned 100%
      257:14084:          B(i) = int(tmp * W + S)
        -:14085:      enddo
        -:14086:
        -:14087:!dvm$ actual(B)
        -:14088:!dvm$ region
        -:14089:!dvm$ parallel (i) on A(i)
      257:14090:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14091:          A(i) = poppar(B(i))
        -:14092:      enddo
        -:14093:!dvm$ end region
        -:14094:!dvm$ get_actual(A)
        -:14095:
        -:14096:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14097:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14098:          if (poppar(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14099:              erri = min(erri, i)
        -:14100:          endif
        -:14101:      enddo
        -:14102:
        1:14103:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14104:          call ansyes(tname)
call    0 returned 100%
        -:14105:      else
    #####:14106:          call ansno(tname)
call    0 never executed
        -:14107:      endif 
        -:14108:      
       1*:14109:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14110:
        -:14111:C -------------------------------------------------
        -:14112:
function poppar4_ called 1 returned 100% blocks executed 79%
        1:14113:      subroutine poppar4
        -:14114:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14115:      character*24 tname
        -:14116:      integer*8 A(N), B(N)
        -:14117:      integer erri, i, asize, clock
        1:14118:      integer, allocatable :: seed(:)
        -:14119:      real tmp
        -:14120:
        -:14121:!dvm$ distribute A(BLOCK)
        -:14122:
        1:14123:      call random_seed(size = asize)
call    0 returned 100%
       3*:14124:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14125:      call system_clock(count = clock)
call    0 returned 100%
      34*:14126:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14127:      call random_seed(put = seed)
call    0 returned 100%
       1*:14128:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14129:
        1:14130:      tname = 'poppar_longlong'
        1:14131:      erri = ER
        -:14132:
      257:14133:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:14134:          call random_number(tmp)
call    0 returned 100%
      257:14135:          B(i) = int(tmp * W + S)
        -:14136:      enddo
        -:14137:
        -:14138:!dvm$ actual(B)
        -:14139:!dvm$ region
        -:14140:!dvm$ parallel (i) on A(i)
      257:14141:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14142:          A(i) = poppar(B(i))
        -:14143:      enddo
        -:14144:!dvm$ end region
        -:14145:!dvm$ get_actual(A)
        -:14146:
        -:14147:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14148:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14149:          if (poppar(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14150:              erri = min(erri, i)
        -:14151:          endif
        -:14152:      enddo
        -:14153:
        1:14154:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14155:          call ansyes(tname)
call    0 returned 100%
        -:14156:      else
    #####:14157:          call ansno(tname)
call    0 never executed
        -:14158:      endif 
        -:14159:      
       1*:14160:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14161:
        -:14162:C -------------------------------------------------
        -:14163:
function real1_ called 1 returned 100% blocks executed 80%
        1:14164:      subroutine real1
        -:14165:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14166:      character*24 tname
        -:14167:      real A(N)
        -:14168:      integer*1 B(N)
        -:14169:      integer erri, i, asize, clock
        1:14170:      integer, allocatable :: seed(:)
        -:14171:      real tmp
        -:14172:
        -:14173:!dvm$ distribute A(BLOCK)
        -:14174:
        1:14175:      call random_seed(size = asize)
call    0 returned 100%
       3*:14176:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14177:      call system_clock(count = clock)
call    0 returned 100%
      34*:14178:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14179:      call random_seed(put = seed)
call    0 returned 100%
       1*:14180:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14181:
        1:14182:      tname = 'real_char'
        1:14183:      erri = ER
        -:14184:
      257:14185:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14186:          call random_number(tmp)
call    0 returned 100%
      257:14187:          B(i) = int(tmp * W + S)
        -:14188:      enddo
        -:14189:
        -:14190:!dvm$ actual(B)
        -:14191:!dvm$ region
        -:14192:!dvm$ parallel (i) on A(i)
      257:14193:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14194:          A(i) = real(B(i))
        -:14195:      enddo
        -:14196:!dvm$ end region
        -:14197:!dvm$ get_actual(A)
        -:14198:
        -:14199:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14200:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14201:          if (real(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14202:              erri = min(erri, i)
        -:14203:          endif
        -:14204:      enddo
        -:14205:
        1:14206:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14207:          call ansyes(tname)
call    0 returned 100%
        -:14208:      else
    #####:14209:          call ansno(tname)
call    0 never executed
        -:14210:      endif 
        -:14211:      
       1*:14212:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14213:
        -:14214:C -------------------------------------------------
        -:14215:
function real2_ called 1 returned 100% blocks executed 80%
        1:14216:      subroutine real2
        -:14217:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14218:      character*24 tname
        -:14219:      real A(N)
        -:14220:      integer*2 B(N)
        -:14221:      integer erri, i, asize, clock
        1:14222:      integer, allocatable :: seed(:)
        -:14223:      real tmp
        -:14224:
        -:14225:!dvm$ distribute A(BLOCK)
        -:14226:
        1:14227:      call random_seed(size = asize)
call    0 returned 100%
       3*:14228:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14229:      call system_clock(count = clock)
call    0 returned 100%
      34*:14230:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14231:      call random_seed(put = seed)
call    0 returned 100%
       1*:14232:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14233:
        1:14234:      tname = 'real_short'
        1:14235:      erri = ER
        -:14236:
      257:14237:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14238:          call random_number(tmp)
call    0 returned 100%
      257:14239:          B(i) = int(tmp * W + S)
        -:14240:      enddo
        -:14241:
        -:14242:!dvm$ actual(B)
        -:14243:!dvm$ region
        -:14244:!dvm$ parallel (i) on A(i)
      257:14245:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14246:          A(i) = real(B(i))
        -:14247:      enddo
        -:14248:!dvm$ end region
        -:14249:!dvm$ get_actual(A)
        -:14250:
        -:14251:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14252:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14253:          if (real(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14254:              erri = min(erri, i)
        -:14255:          endif
        -:14256:      enddo
        -:14257:
        1:14258:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14259:          call ansyes(tname)
call    0 returned 100%
        -:14260:      else
    #####:14261:          call ansno(tname)
call    0 never executed
        -:14262:      endif 
        -:14263:      
       1*:14264:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14265:
        -:14266:C -------------------------------------------------
        -:14267:
function real3_ called 1 returned 100% blocks executed 80%
        1:14268:      subroutine real3
        -:14269:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14270:      character*24 tname
        -:14271:      real A(N)
        -:14272:      integer*4 B(N)
        -:14273:      integer erri, i, asize, clock
        1:14274:      integer, allocatable :: seed(:)
        -:14275:      real tmp
        -:14276:
        -:14277:!dvm$ distribute A(BLOCK)
        -:14278:
        1:14279:      call random_seed(size = asize)
call    0 returned 100%
       3*:14280:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14281:      call system_clock(count = clock)
call    0 returned 100%
      34*:14282:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14283:      call random_seed(put = seed)
call    0 returned 100%
       1*:14284:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14285:
        1:14286:      tname = 'real_long'
        1:14287:      erri = ER
        -:14288:
      257:14289:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14290:          call random_number(tmp)
call    0 returned 100%
      257:14291:          B(i) = int(tmp * W + S)
        -:14292:      enddo
        -:14293:
        -:14294:!dvm$ actual(B)
        -:14295:!dvm$ region
        -:14296:!dvm$ parallel (i) on A(i)
      257:14297:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14298:          A(i) = real(B(i))
        -:14299:      enddo
        -:14300:!dvm$ end region
        -:14301:!dvm$ get_actual(A)
        -:14302:
        -:14303:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14304:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14305:          if (real(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14306:              erri = min(erri, i)
        -:14307:          endif
        -:14308:      enddo
        -:14309:
        1:14310:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14311:          call ansyes(tname)
call    0 returned 100%
        -:14312:      else
    #####:14313:          call ansno(tname)
call    0 never executed
        -:14314:      endif 
        -:14315:      
       1*:14316:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14317:
        -:14318:C -------------------------------------------------
        -:14319:
function real4_ called 1 returned 100% blocks executed 80%
        1:14320:      subroutine real4
        -:14321:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14322:      character*24 tname
        -:14323:      real A(N)
        -:14324:      integer*8 B(N)
        -:14325:      integer erri, i, asize, clock
        1:14326:      integer, allocatable :: seed(:)
        -:14327:      real tmp
        -:14328:
        -:14329:!dvm$ distribute A(BLOCK)
        -:14330:
        1:14331:      call random_seed(size = asize)
call    0 returned 100%
       3*:14332:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14333:      call system_clock(count = clock)
call    0 returned 100%
      34*:14334:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14335:      call random_seed(put = seed)
call    0 returned 100%
       1*:14336:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14337:
        1:14338:      tname = 'real_longlong'
        1:14339:      erri = ER
        -:14340:
      257:14341:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14342:          call random_number(tmp)
call    0 returned 100%
      257:14343:          B(i) = int(tmp * W + S)
        -:14344:      enddo
        -:14345:
        -:14346:!dvm$ actual(B)
        -:14347:!dvm$ region
        -:14348:!dvm$ parallel (i) on A(i)
      257:14349:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14350:          A(i) = real(B(i))
        -:14351:      enddo
        -:14352:!dvm$ end region
        -:14353:!dvm$ get_actual(A)
        -:14354:
        -:14355:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14356:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14357:          if (real(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14358:              erri = min(erri, i)
        -:14359:          endif
        -:14360:      enddo
        -:14361:
        1:14362:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14363:          call ansyes(tname)
call    0 returned 100%
        -:14364:      else
    #####:14365:          call ansno(tname)
call    0 never executed
        -:14366:      endif 
        -:14367:      
       1*:14368:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14369:
        -:14370:C -------------------------------------------------
        -:14371:
function real5_ called 1 returned 100% blocks executed 80%
        1:14372:      subroutine real5
        -:14373:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14374:      character*24 tname
        -:14375:      real A(N)
        -:14376:      real B(N)
        -:14377:      integer erri, i, asize, clock
        1:14378:      integer, allocatable :: seed(:)
        -:14379:
        -:14380:!dvm$ distribute A(BLOCK)
        -:14381:
        1:14382:      call random_seed(size = asize)
call    0 returned 100%
       3*:14383:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14384:      call system_clock(count = clock)
call    0 returned 100%
      34*:14385:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14386:      call random_seed(put = seed)
call    0 returned 100%
       1*:14387:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14388:
        1:14389:      tname = 'real_float'
        1:14390:      erri = ER
        -:14391:
      257:14392:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14393:          call random_number(B(i))
call    0 returned 100%
      257:14394:          B(i) = B(i) * W + S
        -:14395:      enddo
        -:14396:
        -:14397:!dvm$ actual(B)
        -:14398:!dvm$ region
        -:14399:!dvm$ parallel (i) on A(i)
      257:14400:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14401:          A(i) = real(B(i))
        -:14402:      enddo
        -:14403:!dvm$ end region
        -:14404:!dvm$ get_actual(A)
        -:14405:
        -:14406:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14407:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14408:          if (real(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14409:              erri = min(erri, i)
        -:14410:          endif
        -:14411:      enddo
        -:14412:
        1:14413:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14414:          call ansyes(tname)
call    0 returned 100%
        -:14415:      else
    #####:14416:          call ansno(tname)
call    0 never executed
        -:14417:      endif 
        -:14418:      
       1*:14419:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14420:
        -:14421:C -------------------------------------------------
        -:14422:
function real6_ called 1 returned 100% blocks executed 80%
        1:14423:      subroutine real6
        -:14424:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14425:      character*24 tname
        -:14426:      real A(N), B(N)
        -:14427:      integer erri, i, asize, clock
        1:14428:      integer, allocatable :: seed(:)
        -:14429:
        -:14430:!dvm$ distribute A(BLOCK)
        -:14431:
        1:14432:      call random_seed(size = asize)
call    0 returned 100%
       3*:14433:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14434:      call system_clock(count = clock)
call    0 returned 100%
      34*:14435:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14436:      call random_seed(put = seed)
call    0 returned 100%
       1*:14437:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14438:
        1:14439:      tname = 'real_double'
        1:14440:      erri = ER
        -:14441:
      257:14442:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14443:          call random_number(B(i))
call    0 returned 100%
      257:14444:          B(i) = B(i) * W + S
        -:14445:      enddo
        -:14446:
        -:14447:!dvm$ actual(B)
        -:14448:!dvm$ region
        -:14449:!dvm$ parallel (i) on A(i)
      257:14450:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14451:          A(i) = real(B(i))
        -:14452:      enddo
        -:14453:!dvm$ end region
        -:14454:!dvm$ get_actual(A)
        -:14455:
        -:14456:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14457:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14458:          if (real(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14459:              erri = min(erri, i)
        -:14460:          endif
        -:14461:      enddo
        -:14462:
        1:14463:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14464:          call ansyes(tname)
call    0 returned 100%
        -:14465:      else
    #####:14466:          call ansno(tname)
call    0 never executed
        -:14467:      endif 
        -:14468:      
       1*:14469:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14470:
        -:14471:C -------------------------------------------------
        -:14472:
function real7_ called 1 returned 100% blocks executed 81%
        1:14473:      subroutine real7
        -:14474:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14475:      character*24 tname
        -:14476:      real A(N)
        -:14477:      complex B(N)
        -:14478:      integer erri, i, asize, clock
        1:14479:      integer, allocatable :: seed(:)
        -:14480:
        -:14481:!dvm$ distribute A(BLOCK)
        -:14482:
        1:14483:      call random_seed(size = asize)
call    0 returned 100%
       3*:14484:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14485:      call system_clock(count = clock)
call    0 returned 100%
      34*:14486:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14487:      call random_seed(put = seed)
call    0 returned 100%
       1*:14488:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14489:
        1:14490:      tname = 'real_complexf'
        1:14491:      erri = ER
        -:14492:
      257:14493:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14494:          call random_number(x)
call    0 returned 100%
      256:14495:          call random_number(y)
call    0 returned 100%
      257:14496:          B(i) = cmplx(x * W + S, y * W + S)
        -:14497:      enddo
        -:14498:
        -:14499:!dvm$ actual(B)
        -:14500:!dvm$ region
        -:14501:!dvm$ parallel (i) on A(i)
      257:14502:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14503:          A(i) = real(B(i))
        -:14504:      enddo
        -:14505:!dvm$ end region
        -:14506:!dvm$ get_actual(A)
        -:14507:
        -:14508:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14509:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14510:          if (real(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14511:              erri = min(erri, i)
        -:14512:          endif
        -:14513:      enddo
        -:14514:
        1:14515:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14516:          call ansyes(tname)
call    0 returned 100%
        -:14517:      else
    #####:14518:          call ansno(tname)
call    0 never executed
        -:14519:      endif 
        -:14520:      
       1*:14521:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14522:
        -:14523:C -------------------------------------------------
        -:14524:
function real8_ called 1 returned 100% blocks executed 81%
        1:14525:      subroutine real8
        -:14526:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14527:      character*24 tname
        -:14528:      real A(N)
        -:14529:      double complex B(N)
        -:14530:      integer erri, i, asize, clock
        1:14531:      integer, allocatable :: seed(:)
        -:14532:      real x, y
        -:14533:
        -:14534:!dvm$ distribute A(BLOCK)
        -:14535:
        1:14536:      call random_seed(size = asize)
call    0 returned 100%
       3*:14537:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14538:      call system_clock(count = clock)
call    0 returned 100%
      34*:14539:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14540:      call random_seed(put = seed)
call    0 returned 100%
       1*:14541:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14542:
        1:14543:      tname = 'real_complexd'
        1:14544:      erri = ER
        -:14545:
      257:14546:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14547:          call random_number(x)
call    0 returned 100%
      256:14548:          call random_number(y)
call    0 returned 100%
      257:14549:          B(i) = dcmplx(x * W + S, y * W + S)
        -:14550:      enddo
        -:14551:
        -:14552:!dvm$ actual(B)
        -:14553:!dvm$ region
        -:14554:!dvm$ parallel (i) on A(i)
      257:14555:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14556:          A(i) = real(B(i))
        -:14557:      enddo
        -:14558:!dvm$ end region
        -:14559:!dvm$ get_actual(A)
        -:14560:
        -:14561:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14562:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14563:          if (real(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14564:              erri = min(erri, i)
        -:14565:          endif
        -:14566:      enddo
        -:14567:
        1:14568:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14569:          call ansyes(tname)
call    0 returned 100%
        -:14570:      else
    #####:14571:          call ansno(tname)
call    0 never executed
        -:14572:      endif 
        -:14573:      
       1*:14574:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14575:
        -:14576:C -------------------------------------------------
        -:14577:
function real10_ called 1 returned 100% blocks executed 80%
        1:14578:      subroutine real10
        -:14579:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14580:      character*24 tname
        -:14581:      real A(N)
        -:14582:      integer*4 B(N)
        -:14583:      integer erri, i, asize, clock
        1:14584:      integer, allocatable :: seed(:)
        -:14585:      real tmp
        -:14586:
        -:14587:!dvm$ distribute A(BLOCK)
        -:14588:
        1:14589:      call random_seed(size = asize)
call    0 returned 100%
       3*:14590:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14591:      call system_clock(count = clock)
call    0 returned 100%
      34*:14592:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14593:      call random_seed(put = seed)
call    0 returned 100%
       1*:14594:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14595:
        1:14596:      tname = 'float_long'
        1:14597:      erri = ER
        -:14598:
      257:14599:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14600:          call random_number(tmp)
call    0 returned 100%
      257:14601:          B(i) = int(tmp * W + S)
        -:14602:      enddo
        -:14603:
        -:14604:!dvm$ actual(B)
        -:14605:!dvm$ region
        -:14606:!dvm$ parallel (i) on A(i)
      257:14607:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14608:          A(i) = float(B(i))
        -:14609:      enddo
        -:14610:!dvm$ end region
        -:14611:!dvm$ get_actual(A)
        -:14612:
        -:14613:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14614:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14615:          if (float(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14616:              erri = min(erri, i)
        -:14617:          endif
        -:14618:      enddo
        -:14619:
        1:14620:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14621:          call ansyes(tname)
call    0 returned 100%
        -:14622:      else
    #####:14623:          call ansno(tname)
call    0 never executed
        -:14624:      endif 
        -:14625:      
       1*:14626:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14627:
        -:14628:C -------------------------------------------------
        -:14629:
function real13_ called 1 returned 100% blocks executed 80%
        1:14630:      subroutine real13
        -:14631:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14632:      character*24 tname
        -:14633:      real A(N)
        -:14634:      real B(N)
        -:14635:      integer erri, i, asize, clock
        1:14636:      integer, allocatable :: seed(:)
        -:14637:
        -:14638:!dvm$ distribute A(BLOCK)
        -:14639:
        1:14640:      call random_seed(size = asize)
call    0 returned 100%
       3*:14641:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14642:      call system_clock(count = clock)
call    0 returned 100%
      34*:14643:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14644:      call random_seed(put = seed)
call    0 returned 100%
       1*:14645:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14646:
        1:14647:      tname = 'sngl_float'
        1:14648:      erri = ER
        -:14649:
      257:14650:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14651:          call random_number(B(i))
call    0 returned 100%
      257:14652:          B(i) = B(i) * W + S
        -:14653:      enddo
        -:14654:
        -:14655:!dvm$ actual(B)
        -:14656:!dvm$ region
        -:14657:!dvm$ parallel (i) on A(i)
      257:14658:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14659:          A(i) = sngl(B(i))
        -:14660:      enddo
        -:14661:!dvm$ end region
        -:14662:!dvm$ get_actual(A)
        -:14663:
        -:14664:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14665:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14666:          if (sngl(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14667:              erri = min(erri, i)
        -:14668:          endif
        -:14669:      enddo
        -:14670:
        1:14671:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14672:          call ansyes(tname)
call    0 returned 100%
        -:14673:      else
    #####:14674:          call ansno(tname)
call    0 never executed
        -:14675:      endif 
        -:14676:      
       1*:14677:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14678:
        -:14679:C -------------------------------------------------
        -:14680:
function real14_ called 1 returned 100% blocks executed 80%
        1:14681:      subroutine real14
        -:14682:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14683:      character*24 tname
        -:14684:      real A(N), B(N)
        -:14685:      integer erri, i, asize, clock
        1:14686:      integer, allocatable :: seed(:)
        -:14687:
        -:14688:!dvm$ distribute A(BLOCK)
        -:14689:
        1:14690:      call random_seed(size = asize)
call    0 returned 100%
       3*:14691:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14692:      call system_clock(count = clock)
call    0 returned 100%
      34*:14693:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14694:      call random_seed(put = seed)
call    0 returned 100%
       1*:14695:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14696:
        1:14697:      tname = 'sngl_double'
        1:14698:      erri = ER
        -:14699:
      257:14700:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14701:          call random_number(B(i))
call    0 returned 100%
      257:14702:          B(i) = B(i) * W + S
        -:14703:      enddo
        -:14704:
        -:14705:!dvm$ actual(B)
        -:14706:!dvm$ region
        -:14707:!dvm$ parallel (i) on A(i)
      257:14708:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14709:          A(i) = sngl(B(i))
        -:14710:      enddo
        -:14711:!dvm$ end region
        -:14712:!dvm$ get_actual(A)
        -:14713:
        -:14714:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14715:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14716:          if (sngl(B(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:14717:              erri = min(erri, i)
        -:14718:          endif
        -:14719:      enddo
        -:14720:
        1:14721:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14722:          call ansyes(tname)
call    0 returned 100%
        -:14723:      else
    #####:14724:          call ansno(tname)
call    0 never executed
        -:14725:      endif 
        -:14726:      
       1*:14727:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14728:
        -:14729:C -------------------------------------------------
        -:14730:
function shifta1_ called 1 returned 100% blocks executed 83%
        1:14731:      subroutine shifta1
        -:14732:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14733:      character*24 tname
        -:14734:      integer*1 A(N), B(N), C(N)
        -:14735:      integer erri, i, asize, clock
        1:14736:      integer, allocatable :: seed(:)
        -:14737:      real tmp
        -:14738:
        -:14739:!dvm$ distribute A(BLOCK)
        -:14740:
        1:14741:      call random_seed(size = asize)
call    0 returned 100%
       3*:14742:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14743:      call system_clock(count = clock)
call    0 returned 100%
      34*:14744:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14745:      call random_seed(put = seed)
call    0 returned 100%
       1*:14746:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14747:
        1:14748:      tname = 'shifta_char'
        1:14749:      erri = ER
        -:14750:
      257:14751:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14752:          call random_number(tmp)
call    0 returned 100%
      256:14753:          B(i) = int(tmp * W + S)
      256:14754:          call random_number(tmp)
call    0 returned 100%
      257:14755:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:14756:      enddo
        -:14757:
        -:14758:!dvm$ actual(B, C)
        -:14759:!dvm$ region
        -:14760:!dvm$ parallel (i) on A(i)
      257:14761:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      274:14762:          A(i) = shifta(B(i), C(i))
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 46% (fallthrough)
branch  3 taken 54%
        -:14763:      enddo
        -:14764:!dvm$ end region
        -:14765:!dvm$ get_actual(A)
        -:14766:
        -:14767:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14768:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      274:14769:          if (shifta(B(i), C(i)) .ne. A(i)) then
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 46% (fallthrough)
branch  3 taken 54%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:14770:              erri = min(erri, i)
        -:14771:          endif
        -:14772:      enddo
        -:14773:
        1:14774:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14775:          call ansyes(tname)
call    0 returned 100%
        -:14776:      else
    #####:14777:          call ansno(tname)
call    0 never executed
        -:14778:      endif 
        -:14779:      
       1*:14780:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14781:
        -:14782:C -------------------------------------------------
        -:14783:
function shifta2_ called 1 returned 100% blocks executed 83%
        1:14784:      subroutine shifta2
        -:14785:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14786:      character*24 tname
        -:14787:      integer*2 A(N), B(N), C(N)
        -:14788:      integer erri, i, asize, clock
        1:14789:      integer, allocatable :: seed(:)
        -:14790:      real tmp
        -:14791:
        -:14792:!dvm$ distribute A(BLOCK)
        -:14793:
        1:14794:      call random_seed(size = asize)
call    0 returned 100%
       3*:14795:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14796:      call system_clock(count = clock)
call    0 returned 100%
      34*:14797:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14798:      call random_seed(put = seed)
call    0 returned 100%
       1*:14799:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14800:
        1:14801:      tname = 'shifta_short'
        1:14802:      erri = ER
        -:14803:
      257:14804:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14805:          call random_number(tmp)
call    0 returned 100%
      256:14806:          B(i) = int(tmp * W + S)
      256:14807:          call random_number(tmp)
call    0 returned 100%
      257:14808:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:14809:      enddo
        -:14810:
        -:14811:!dvm$ actual(B, C)
        -:14812:!dvm$ region
        -:14813:!dvm$ parallel (i) on A(i)
      257:14814:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      269:14815:          A(i) = shifta(B(i), C(i))
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:14816:      enddo
        -:14817:!dvm$ end region
        -:14818:!dvm$ get_actual(A)
        -:14819:
        -:14820:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14821:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      269:14822:          if (shifta(B(i), C(i)) .ne. A(i)) then
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:14823:              erri = min(erri, i)
        -:14824:          endif
        -:14825:      enddo
        -:14826:
        1:14827:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14828:          call ansyes(tname)
call    0 returned 100%
        -:14829:      else
    #####:14830:          call ansno(tname)
call    0 never executed
        -:14831:      endif 
        -:14832:      
       1*:14833:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14834:
        -:14835:C -------------------------------------------------
        -:14836:
function shifta3_ called 1 returned 100% blocks executed 83%
        1:14837:      subroutine shifta3
        -:14838:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14839:      character*24 tname
        -:14840:      integer*4 A(N), B(N), C(N)
        -:14841:      integer erri, i, asize, clock
        1:14842:      integer, allocatable :: seed(:)
        -:14843:      real tmp
        -:14844:
        -:14845:!dvm$ distribute A(BLOCK)
        -:14846:
        1:14847:      call random_seed(size = asize)
call    0 returned 100%
       3*:14848:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14849:      call system_clock(count = clock)
call    0 returned 100%
      34*:14850:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14851:      call random_seed(put = seed)
call    0 returned 100%
       1*:14852:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14853:
        1:14854:      tname = 'shifta_long'
        1:14855:      erri = ER
        -:14856:
      257:14857:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14858:          call random_number(tmp)
call    0 returned 100%
      256:14859:          B(i) = int(tmp * W + S)
      256:14860:          call random_number(tmp)
call    0 returned 100%
      257:14861:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:14862:      enddo
        -:14863:
        -:14864:!dvm$ actual(B, C)
        -:14865:!dvm$ region
        -:14866:!dvm$ parallel (i) on A(i)
      257:14867:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      266:14868:          A(i) = shifta(B(i), C(i))
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
        -:14869:      enddo
        -:14870:!dvm$ end region
        -:14871:!dvm$ get_actual(A)
        -:14872:
        -:14873:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14874:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      266:14875:          if (shifta(B(i), C(i)) .ne. A(i)) then
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
branch  2 taken 69% (fallthrough)
branch  3 taken 31%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:14876:              erri = min(erri, i)
        -:14877:          endif
        -:14878:      enddo
        -:14879:
        1:14880:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14881:          call ansyes(tname)
call    0 returned 100%
        -:14882:      else
    #####:14883:          call ansno(tname)
call    0 never executed
        -:14884:      endif 
        -:14885:      
       1*:14886:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14887:
        -:14888:C -------------------------------------------------
        -:14889:
function shifta4_ called 1 returned 100% blocks executed 83%
        1:14890:      subroutine shifta4
        -:14891:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14892:      character*24 tname
        -:14893:      integer*8 A(N), B(N), C(N)
        -:14894:      integer erri, i, asize, clock
        1:14895:      integer, allocatable :: seed(:)
        -:14896:      real tmp
        -:14897:
        -:14898:!dvm$ distribute A(BLOCK)
        -:14899:
        1:14900:      call random_seed(size = asize)
call    0 returned 100%
       3*:14901:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14902:      call system_clock(count = clock)
call    0 returned 100%
      34*:14903:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14904:      call random_seed(put = seed)
call    0 returned 100%
       1*:14905:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14906:
        1:14907:      tname = 'shifta_longlong'
        1:14908:      erri = ER
        -:14909:
      257:14910:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14911:          call random_number(tmp)
call    0 returned 100%
      256:14912:          B(i) = int(tmp * W + S)
      256:14913:          call random_number(tmp)
call    0 returned 100%
      257:14914:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:14915:      enddo
        -:14916:
        -:14917:!dvm$ actual(B, C)
        -:14918:!dvm$ region
        -:14919:!dvm$ parallel (i) on A(i)
      257:14920:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      261:14921:          A(i) = shifta(B(i), C(i))
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        -:14922:      enddo
        -:14923:!dvm$ end region
        -:14924:!dvm$ get_actual(A)
        -:14925:
        -:14926:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14927:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      261:14928:          if (shifta(B(i), C(i)) .ne. A(i)) then
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:14929:              erri = min(erri, i)
        -:14930:          endif
        -:14931:      enddo
        -:14932:
        1:14933:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14934:          call ansyes(tname)
call    0 returned 100%
        -:14935:      else
    #####:14936:          call ansno(tname)
call    0 never executed
        -:14937:      endif 
        -:14938:      
       1*:14939:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14940:
        -:14941:C -------------------------------------------------
        -:14942:
function shiftl1_ called 1 returned 100% blocks executed 82%
        1:14943:      subroutine shiftl1
        -:14944:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14945:      character*24 tname
        -:14946:      integer*1 A(N), B(N), C(N)
        -:14947:      integer erri, i, asize, clock
        1:14948:      integer, allocatable :: seed(:)
        -:14949:      real tmp
        -:14950:
        -:14951:!dvm$ distribute A(BLOCK)
        -:14952:
        1:14953:      call random_seed(size = asize)
call    0 returned 100%
       3*:14954:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:14955:      call system_clock(count = clock)
call    0 returned 100%
      34*:14956:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:14957:      call random_seed(put = seed)
call    0 returned 100%
       1*:14958:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:14959:
        1:14960:      tname = 'shiftl_char'
        1:14961:      erri = ER
        -:14962:
      257:14963:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:14964:          call random_number(tmp)
call    0 returned 100%
      256:14965:          B(i) = int(tmp * W + S)
      256:14966:          call random_number(tmp)
call    0 returned 100%
      257:14967:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:14968:      enddo
        -:14969:
        -:14970:!dvm$ actual(B, C)
        -:14971:!dvm$ region
        -:14972:!dvm$ parallel (i) on A(i)
      257:14973:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:14974:          A(i) = shiftl(B(i), C(i))
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:14975:      enddo
        -:14976:!dvm$ end region
        -:14977:!dvm$ get_actual(A)
        -:14978:
        -:14979:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:14980:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:14981:          if (shiftl(B(i), C(i)) .ne. A(i)) then
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:14982:              erri = min(erri, i)
        -:14983:          endif
        -:14984:      enddo
        -:14985:
        1:14986:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:14987:          call ansyes(tname)
call    0 returned 100%
        -:14988:      else
    #####:14989:          call ansno(tname)
call    0 never executed
        -:14990:      endif 
        -:14991:      
       1*:14992:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:14993:
        -:14994:C -------------------------------------------------
        -:14995:
function shiftl2_ called 1 returned 100% blocks executed 82%
        1:14996:      subroutine shiftl2
        -:14997:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:14998:      character*24 tname
        -:14999:      integer*2 A(N), B(N), C(N)
        -:15000:      integer erri, i, asize, clock
        1:15001:      integer, allocatable :: seed(:)
        -:15002:      real tmp
        -:15003:
        -:15004:!dvm$ distribute A(BLOCK)
        -:15005:
        1:15006:      call random_seed(size = asize)
call    0 returned 100%
       3*:15007:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15008:      call system_clock(count = clock)
call    0 returned 100%
      34*:15009:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15010:      call random_seed(put = seed)
call    0 returned 100%
       1*:15011:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15012:
        1:15013:      tname = 'shiftl_short'
        1:15014:      erri = ER
        -:15015:
      257:15016:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15017:          call random_number(tmp)
call    0 returned 100%
      256:15018:          B(i) = int(tmp * W + S)
      256:15019:          call random_number(tmp)
call    0 returned 100%
      257:15020:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:15021:      enddo
        -:15022:
        -:15023:!dvm$ actual(B, C)
        -:15024:!dvm$ region
        -:15025:!dvm$ parallel (i) on A(i)
      257:15026:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15027:          A(i) = shiftl(B(i), C(i))
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:15028:      enddo
        -:15029:!dvm$ end region
        -:15030:!dvm$ get_actual(A)
        -:15031:
        -:15032:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15033:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15034:          if (shiftl(B(i), C(i)) .ne. A(i)) then
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:15035:              erri = min(erri, i)
        -:15036:          endif
        -:15037:      enddo
        -:15038:
        1:15039:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15040:          call ansyes(tname)
call    0 returned 100%
        -:15041:      else
    #####:15042:          call ansno(tname)
call    0 never executed
        -:15043:      endif 
        -:15044:      
       1*:15045:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15046:
        -:15047:C -------------------------------------------------
        -:15048:
function shiftl3_ called 1 returned 100% blocks executed 82%
        1:15049:      subroutine shiftl3
        -:15050:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15051:      character*24 tname
        -:15052:      integer*4 A(N), B(N), C(N)
        -:15053:      integer erri, i, asize, clock
        1:15054:      integer, allocatable :: seed(:)
        -:15055:      real tmp
        -:15056:
        -:15057:!dvm$ distribute A(BLOCK)
        -:15058:
        1:15059:      call random_seed(size = asize)
call    0 returned 100%
       3*:15060:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15061:      call system_clock(count = clock)
call    0 returned 100%
      34*:15062:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15063:      call random_seed(put = seed)
call    0 returned 100%
       1*:15064:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15065:
        1:15066:      tname = 'shiftl_long'
        1:15067:      erri = ER
        -:15068:
      257:15069:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15070:          call random_number(tmp)
call    0 returned 100%
      256:15071:          B(i) = int(tmp * W + S)
      256:15072:          call random_number(tmp)
call    0 returned 100%
      257:15073:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:15074:      enddo
        -:15075:
        -:15076:!dvm$ actual(B, C)
        -:15077:!dvm$ region
        -:15078:!dvm$ parallel (i) on A(i)
      257:15079:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15080:          A(i) = shiftl(B(i), C(i))
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:15081:      enddo
        -:15082:!dvm$ end region
        -:15083:!dvm$ get_actual(A)
        -:15084:
        -:15085:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15086:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15087:          if (shiftl(B(i), C(i)) .ne. A(i)) then
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:15088:              erri = min(erri, i)
        -:15089:          endif
        -:15090:      enddo
        -:15091:
        1:15092:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15093:          call ansyes(tname)
call    0 returned 100%
        -:15094:      else
    #####:15095:          call ansno(tname)
call    0 never executed
        -:15096:      endif 
        -:15097:      
       1*:15098:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15099:
        -:15100:C -------------------------------------------------
        -:15101:
function shiftl4_ called 1 returned 100% blocks executed 82%
        1:15102:      subroutine shiftl4
        -:15103:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15104:      character*24 tname
        -:15105:      integer*8 A(N), B(N), C(N)
        -:15106:      integer erri, i, asize, clock
        1:15107:      integer, allocatable :: seed(:)
        -:15108:      real tmp
        -:15109:
        -:15110:!dvm$ distribute A(BLOCK)
        -:15111:
        1:15112:      call random_seed(size = asize)
call    0 returned 100%
       3*:15113:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15114:      call system_clock(count = clock)
call    0 returned 100%
      34*:15115:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15116:      call random_seed(put = seed)
call    0 returned 100%
       1*:15117:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15118:
        1:15119:      tname = 'shiftl_longlong'
        1:15120:      erri = ER
        -:15121:
      257:15122:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15123:          call random_number(tmp)
call    0 returned 100%
      256:15124:          B(i) = int(tmp * W + S)
      256:15125:          call random_number(tmp)
call    0 returned 100%
      257:15126:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:15127:      enddo
        -:15128:
        -:15129:!dvm$ actual(B, C)
        -:15130:!dvm$ region
        -:15131:!dvm$ parallel (i) on A(i)
      257:15132:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15133:          A(i) = shiftl(B(i), C(i))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:15134:      enddo
        -:15135:!dvm$ end region
        -:15136:!dvm$ get_actual(A)
        -:15137:
        -:15138:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15139:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15140:          if (shiftl(B(i), C(i)) .ne. A(i)) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:15141:              erri = min(erri, i)
        -:15142:          endif
        -:15143:      enddo
        -:15144:
        1:15145:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15146:          call ansyes(tname)
call    0 returned 100%
        -:15147:      else
    #####:15148:          call ansno(tname)
call    0 never executed
        -:15149:      endif 
        -:15150:      
       1*:15151:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15152:
        -:15153:C -------------------------------------------------
        -:15154:
function shiftr1_ called 1 returned 100% blocks executed 82%
        1:15155:      subroutine shiftr1
        -:15156:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15157:      character*24 tname
        -:15158:      integer*1 A(N), B(N), C(N)
        -:15159:      integer erri, i, asize, clock
        1:15160:      integer, allocatable :: seed(:)
        -:15161:      real tmp
        -:15162:
        -:15163:!dvm$ distribute A(BLOCK)
        -:15164:
        1:15165:      call random_seed(size = asize)
call    0 returned 100%
       3*:15166:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15167:      call system_clock(count = clock)
call    0 returned 100%
      34*:15168:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15169:      call random_seed(put = seed)
call    0 returned 100%
       1*:15170:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15171:
        1:15172:      tname = 'shiftr_char'
        1:15173:      erri = ER
        -:15174:
      257:15175:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15176:          call random_number(tmp)
call    0 returned 100%
      256:15177:          B(i) = int(tmp * W + S)
      256:15178:          call random_number(tmp)
call    0 returned 100%
      257:15179:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:15180:      enddo
        -:15181:
        -:15182:!dvm$ actual(B, C)
        -:15183:!dvm$ region
        -:15184:!dvm$ parallel (i) on A(i)
      257:15185:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15186:          A(i) = shiftr(B(i), C(i))
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:15187:      enddo
        -:15188:!dvm$ end region
        -:15189:!dvm$ get_actual(A)
        -:15190:
        -:15191:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15192:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15193:          if (shiftr(B(i), C(i)) .ne. A(i)) then
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:15194:              erri = min(erri, i)
        -:15195:          endif
        -:15196:      enddo
        -:15197:
        1:15198:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15199:          call ansyes(tname)
call    0 returned 100%
        -:15200:      else
    #####:15201:          call ansno(tname)
call    0 never executed
        -:15202:      endif 
        -:15203:      
       1*:15204:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15205:
        -:15206:C -------------------------------------------------
        -:15207:
function shiftr2_ called 1 returned 100% blocks executed 82%
        1:15208:      subroutine shiftr2
        -:15209:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15210:      character*24 tname
        -:15211:      integer*2 A(N), B(N), C(N)
        -:15212:      integer erri, i, asize, clock
        1:15213:      integer, allocatable :: seed(:)
        -:15214:      real tmp
        -:15215:
        -:15216:!dvm$ distribute A(BLOCK)
        -:15217:
        1:15218:      call random_seed(size = asize)
call    0 returned 100%
       3*:15219:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15220:      call system_clock(count = clock)
call    0 returned 100%
      34*:15221:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15222:      call random_seed(put = seed)
call    0 returned 100%
       1*:15223:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15224:
        1:15225:      tname = 'shiftr_short'
        1:15226:      erri = ER
        -:15227:
      257:15228:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15229:          call random_number(tmp)
call    0 returned 100%
      256:15230:          B(i) = int(tmp * W + S)
      256:15231:          call random_number(tmp)
call    0 returned 100%
      257:15232:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:15233:      enddo
        -:15234:
        -:15235:!dvm$ actual(B, C)
        -:15236:!dvm$ region
        -:15237:!dvm$ parallel (i) on A(i)
      257:15238:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15239:          A(i) = shiftr(B(i), C(i))
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:15240:      enddo
        -:15241:!dvm$ end region
        -:15242:!dvm$ get_actual(A)
        -:15243:
        -:15244:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15245:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15246:          if (shiftr(B(i), C(i)) .ne. A(i)) then
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:15247:              erri = min(erri, i)
        -:15248:          endif
        -:15249:      enddo
        -:15250:
        1:15251:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15252:          call ansyes(tname)
call    0 returned 100%
        -:15253:      else
    #####:15254:          call ansno(tname)
call    0 never executed
        -:15255:      endif 
        -:15256:      
       1*:15257:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15258:
        -:15259:C -------------------------------------------------
        -:15260:
function shiftr3_ called 1 returned 100% blocks executed 82%
        1:15261:      subroutine shiftr3
        -:15262:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15263:      character*24 tname
        -:15264:      integer*4 A(N), B(N), C(N)
        -:15265:      integer erri, i, asize, clock
        1:15266:      integer, allocatable :: seed(:)
        -:15267:      real tmp
        -:15268:
        -:15269:!dvm$ distribute A(BLOCK)
        -:15270:
        1:15271:      call random_seed(size = asize)
call    0 returned 100%
       3*:15272:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15273:      call system_clock(count = clock)
call    0 returned 100%
      34*:15274:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15275:      call random_seed(put = seed)
call    0 returned 100%
       1*:15276:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15277:
        1:15278:      tname = 'shiftr_long'
        1:15279:      erri = ER
        -:15280:
      257:15281:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15282:          call random_number(tmp)
call    0 returned 100%
      256:15283:          B(i) = int(tmp * W + S)
      256:15284:          call random_number(tmp)
call    0 returned 100%
      257:15285:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:15286:      enddo
        -:15287:
        -:15288:!dvm$ actual(B, C)
        -:15289:!dvm$ region
        -:15290:!dvm$ parallel (i) on A(i)
      257:15291:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15292:          A(i) = shiftr(B(i), C(i))
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:15293:      enddo
        -:15294:!dvm$ end region
        -:15295:!dvm$ get_actual(A)
        -:15296:
        -:15297:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15298:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15299:          if (shiftr(B(i), C(i)) .ne. A(i)) then
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:15300:              erri = min(erri, i)
        -:15301:          endif
        -:15302:      enddo
        -:15303:
        1:15304:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15305:          call ansyes(tname)
call    0 returned 100%
        -:15306:      else
    #####:15307:          call ansno(tname)
call    0 never executed
        -:15308:      endif 
        -:15309:      
       1*:15310:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15311:
        -:15312:C -------------------------------------------------
        -:15313:
function shiftr4_ called 1 returned 100% blocks executed 82%
        1:15314:      subroutine shiftr4
        -:15315:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15316:      character*24 tname
        -:15317:      integer*8 A(N), B(N), C(N)
        -:15318:      integer erri, i, asize, clock
        1:15319:      integer, allocatable :: seed(:)
        -:15320:      real tmp
        -:15321:
        -:15322:!dvm$ distribute A(BLOCK)
        -:15323:
        1:15324:      call random_seed(size = asize)
call    0 returned 100%
       3*:15325:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15326:      call system_clock(count = clock)
call    0 returned 100%
      34*:15327:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15328:      call random_seed(put = seed)
call    0 returned 100%
       1*:15329:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15330:
        1:15331:      tname = 'shiftr_longlong'
        1:15332:      erri = ER
        -:15333:
      257:15334:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15335:          call random_number(tmp)
call    0 returned 100%
      256:15336:          B(i) = int(tmp * W + S)
      256:15337:          call random_number(tmp)
call    0 returned 100%
      257:15338:          C(i) = int(tmp * (bit_size(C(i)) + 1))
        -:15339:      enddo
        -:15340:
        -:15341:!dvm$ actual(B, C)
        -:15342:!dvm$ region
        -:15343:!dvm$ parallel (i) on A(i)
      257:15344:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15345:          A(i) = shiftr(B(i), C(i))
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:15346:      enddo
        -:15347:!dvm$ end region
        -:15348:!dvm$ get_actual(A)
        -:15349:
        -:15350:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15351:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15352:          if (shiftr(B(i), C(i)) .ne. A(i)) then
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:15353:              erri = min(erri, i)
        -:15354:          endif
        -:15355:      enddo
        -:15356:
        1:15357:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15358:          call ansyes(tname)
call    0 returned 100%
        -:15359:      else
    #####:15360:          call ansno(tname)
call    0 never executed
        -:15361:      endif 
        -:15362:      
       1*:15363:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15364:
        -:15365:C -------------------------------------------------
        -:15366:
function sign1_ called 1 returned 100% blocks executed 81%
        1:15367:      subroutine sign1
        -:15368:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15369:      character*24 tname
        -:15370:      integer*1 A(N), B(N), C(N)
        -:15371:      integer erri, i, asize, clock
        1:15372:      integer, allocatable :: seed(:)
        -:15373:      real tmp
        -:15374:
        -:15375:!dvm$ distribute A(BLOCK)
        -:15376:
        1:15377:      call random_seed(size = asize)
call    0 returned 100%
       3*:15378:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15379:      call system_clock(count = clock)
call    0 returned 100%
      34*:15380:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15381:      call random_seed(put = seed)
call    0 returned 100%
       1*:15382:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15383:
        1:15384:      tname = 'sign_char'
        1:15385:      erri = ER
        -:15386:
      257:15387:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15388:          call random_number(tmp)
call    0 returned 100%
      256:15389:          B(i) = int(tmp * W + S)
      256:15390:          call random_number(tmp)
call    0 returned 100%
      257:15391:          C(i) = int(tmp * W + S)
        -:15392:      enddo
        -:15393:
        -:15394:!dvm$ actual(B, C)
        -:15395:!dvm$ region
        -:15396:!dvm$ parallel (i) on A(i)
      257:15397:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15398:          A(i) = sign(B(i), C(i))
        -:15399:      enddo
        -:15400:!dvm$ end region
        -:15401:!dvm$ get_actual(A)
        -:15402:
        -:15403:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15404:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15405:          if (sign(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15406:              erri = min(erri, i)
        -:15407:          endif
        -:15408:      enddo
        -:15409:
        1:15410:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15411:          call ansyes(tname)
call    0 returned 100%
        -:15412:      else
    #####:15413:          call ansno(tname)
call    0 never executed
        -:15414:      endif 
        -:15415:      
       1*:15416:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15417:
        -:15418:C -------------------------------------------------
        -:15419:
function sign2_ called 1 returned 100% blocks executed 81%
        1:15420:      subroutine sign2
        -:15421:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15422:      character*24 tname
        -:15423:      integer*2 A(N), B(N), C(N)
        -:15424:      integer erri, i, asize, clock
        1:15425:      integer, allocatable :: seed(:)
        -:15426:      real tmp
        -:15427:
        -:15428:!dvm$ distribute A(BLOCK)
        -:15429:
        1:15430:      call random_seed(size = asize)
call    0 returned 100%
       3*:15431:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15432:      call system_clock(count = clock)
call    0 returned 100%
      34*:15433:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15434:      call random_seed(put = seed)
call    0 returned 100%
       1*:15435:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15436:
        1:15437:      tname = 'sign_short'
        1:15438:      erri = ER
        -:15439:
      257:15440:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15441:          call random_number(tmp)
call    0 returned 100%
      256:15442:          B(i) = int(tmp * W + S)
      256:15443:          call random_number(tmp)
call    0 returned 100%
      257:15444:          C(i) = int(tmp * W + S)
        -:15445:      enddo
        -:15446:
        -:15447:!dvm$ actual(B, C)
        -:15448:!dvm$ region
        -:15449:!dvm$ parallel (i) on A(i)
      257:15450:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15451:          A(i) = sign(B(i), C(i))
        -:15452:      enddo
        -:15453:!dvm$ end region
        -:15454:!dvm$ get_actual(A)
        -:15455:
        -:15456:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15457:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15458:          if (sign(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15459:              erri = min(erri, i)
        -:15460:          endif
        -:15461:      enddo
        -:15462:
        1:15463:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15464:          call ansyes(tname)
call    0 returned 100%
        -:15465:      else
    #####:15466:          call ansno(tname)
call    0 never executed
        -:15467:      endif 
        -:15468:      
       1*:15469:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15470:
        -:15471:C -------------------------------------------------
        -:15472:
function sign3_ called 1 returned 100% blocks executed 81%
        1:15473:      subroutine sign3
        -:15474:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15475:      character*24 tname
        -:15476:      integer*4 A(N), B(N), C(N)
        -:15477:      integer erri, i, asize, clock
        1:15478:      integer, allocatable :: seed(:)
        -:15479:      real tmp
        -:15480:
        -:15481:!dvm$ distribute A(BLOCK)
        -:15482:
        1:15483:      call random_seed(size = asize)
call    0 returned 100%
       3*:15484:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15485:      call system_clock(count = clock)
call    0 returned 100%
      34*:15486:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15487:      call random_seed(put = seed)
call    0 returned 100%
       1*:15488:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15489:
        1:15490:      tname = 'sign_long'
        1:15491:      erri = ER
        -:15492:
      257:15493:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15494:          call random_number(tmp)
call    0 returned 100%
      256:15495:          B(i) = int(tmp * W + S)
      256:15496:          call random_number(tmp)
call    0 returned 100%
      257:15497:          C(i) = int(tmp * W + S)
        -:15498:      enddo
        -:15499:
        -:15500:!dvm$ actual(B, C)
        -:15501:!dvm$ region
        -:15502:!dvm$ parallel (i) on A(i)
      257:15503:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15504:          A(i) = sign(B(i), C(i))
        -:15505:      enddo
        -:15506:!dvm$ end region
        -:15507:!dvm$ get_actual(A)
        -:15508:
        -:15509:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15510:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15511:          if (sign(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15512:              erri = min(erri, i)
        -:15513:          endif
        -:15514:      enddo
        -:15515:
        1:15516:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15517:          call ansyes(tname)
call    0 returned 100%
        -:15518:      else
    #####:15519:          call ansno(tname)
call    0 never executed
        -:15520:      endif 
        -:15521:      
       1*:15522:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15523:
        -:15524:C -------------------------------------------------
        -:15525:
function sign4_ called 1 returned 100% blocks executed 81%
        1:15526:      subroutine sign4
        -:15527:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15528:      character*24 tname
        -:15529:      integer*8 A(N), B(N), C(N)
        -:15530:      integer erri, i, asize, clock
        1:15531:      integer, allocatable :: seed(:)
        -:15532:      real tmp
        -:15533:
        -:15534:!dvm$ distribute A(BLOCK)
        -:15535:
        1:15536:      call random_seed(size = asize)
call    0 returned 100%
       3*:15537:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15538:      call system_clock(count = clock)
call    0 returned 100%
      34*:15539:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15540:      call random_seed(put = seed)
call    0 returned 100%
       1*:15541:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15542:
        1:15543:      tname = 'sign_longlong'
        1:15544:      erri = ER
        -:15545:
      257:15546:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15547:          call random_number(tmp)
call    0 returned 100%
      256:15548:          B(i) = int(tmp * W + S)
      256:15549:          call random_number(tmp)
call    0 returned 100%
      257:15550:          C(i) = int(tmp * W + S)
        -:15551:      enddo
        -:15552:
        -:15553:!dvm$ actual(B, C)
        -:15554:!dvm$ region
        -:15555:!dvm$ parallel (i) on A(i)
      257:15556:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15557:          A(i) = sign(B(i), C(i))
        -:15558:      enddo
        -:15559:!dvm$ end region
        -:15560:!dvm$ get_actual(A)
        -:15561:
        -:15562:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15563:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15564:          if (sign(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15565:              erri = min(erri, i)
        -:15566:          endif
        -:15567:      enddo
        -:15568:
        1:15569:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15570:          call ansyes(tname)
call    0 returned 100%
        -:15571:      else
    #####:15572:          call ansno(tname)
call    0 never executed
        -:15573:      endif 
        -:15574:      
       1*:15575:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15576:
        -:15577:C -------------------------------------------------
        -:15578:
function sign5_ called 1 returned 100% blocks executed 80%
        1:15579:      subroutine sign5
        -:15580:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15581:      character*24 tname
        -:15582:      real A(N), B(N), C(N)
        -:15583:      integer erri, i, asize, clock
        1:15584:      integer, allocatable :: seed(:)
        -:15585:      real tmp
        -:15586:
        -:15587:!dvm$ distribute A(BLOCK)
        -:15588:
        1:15589:      call random_seed(size = asize)
call    0 returned 100%
       3*:15590:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15591:      call system_clock(count = clock)
call    0 returned 100%
      34*:15592:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15593:      call random_seed(put = seed)
call    0 returned 100%
       1*:15594:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15595:
        1:15596:      tname = 'sign_float'
        1:15597:      erri = ER
        -:15598:
      257:15599:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15600:          call random_number(tmp)
call    0 returned 100%
      256:15601:          B(i) = int(tmp * W + S)
      256:15602:          call random_number(tmp)
call    0 returned 100%
      257:15603:          C(i) = int(tmp * W + S)
        -:15604:      enddo
        -:15605:
        -:15606:!dvm$ actual(B, C)
        -:15607:!dvm$ region
        -:15608:!dvm$ parallel (i) on A(i)
      257:15609:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15610:          A(i) = sign(B(i), C(i))
        -:15611:      enddo
        -:15612:!dvm$ end region
        -:15613:!dvm$ get_actual(A)
        -:15614:
        -:15615:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15616:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15617:          if (sign(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15618:              erri = min(erri, i)
        -:15619:          endif
        -:15620:      enddo
        -:15621:
        1:15622:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15623:          call ansyes(tname)
call    0 returned 100%
        -:15624:      else
    #####:15625:          call ansno(tname)
call    0 never executed
        -:15626:      endif 
        -:15627:      
       1*:15628:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15629:
        -:15630:C -------------------------------------------------
        -:15631:
function sign6_ called 1 returned 100% blocks executed 80%
        1:15632:      subroutine sign6
        -:15633:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15634:      character*24 tname
        -:15635:      real*8 A(N), B(N), C(N)
        -:15636:      integer erri, i, asize, clock
        1:15637:      integer, allocatable :: seed(:)
        -:15638:      real tmp
        -:15639:
        -:15640:!dvm$ distribute A(BLOCK)
        -:15641:
        1:15642:      call random_seed(size = asize)
call    0 returned 100%
       3*:15643:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15644:      call system_clock(count = clock)
call    0 returned 100%
      34*:15645:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15646:      call random_seed(put = seed)
call    0 returned 100%
       1*:15647:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15648:
        1:15649:      tname = 'sign_double'
        1:15650:      erri = ER
        -:15651:
      257:15652:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15653:          call random_number(tmp)
call    0 returned 100%
      256:15654:          B(i) = int(tmp * W + S)
      256:15655:          call random_number(tmp)
call    0 returned 100%
      257:15656:          C(i) = int(tmp * W + S)
        -:15657:      enddo
        -:15658:
        -:15659:!dvm$ actual(B, C)
        -:15660:!dvm$ region
        -:15661:!dvm$ parallel (i) on A(i)
      257:15662:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15663:          A(i) = sign(B(i), C(i))
        -:15664:      enddo
        -:15665:!dvm$ end region
        -:15666:!dvm$ get_actual(A)
        -:15667:
        -:15668:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15669:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15670:          if (sign(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15671:              erri = min(erri, i)
        -:15672:          endif
        -:15673:      enddo
        -:15674:
        1:15675:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15676:          call ansyes(tname)
call    0 returned 100%
        -:15677:      else
    #####:15678:          call ansno(tname)
call    0 never executed
        -:15679:      endif 
        -:15680:      
       1*:15681:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15682:
        -:15683:C -------------------------------------------------
        -:15684:
function sign9_ called 1 returned 100% blocks executed 81%
        1:15685:      subroutine sign9
        -:15686:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15687:      character*24 tname
        -:15688:      integer*4 A(N), B(N), C(N)
        -:15689:      integer erri, i, asize, clock
        1:15690:      integer, allocatable :: seed(:)
        -:15691:      real tmp
        -:15692:
        -:15693:!dvm$ distribute A(BLOCK)
        -:15694:
        1:15695:      call random_seed(size = asize)
call    0 returned 100%
       3*:15696:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15697:      call system_clock(count = clock)
call    0 returned 100%
      34*:15698:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15699:      call random_seed(put = seed)
call    0 returned 100%
       1*:15700:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15701:
        1:15702:      tname = 'isign_long'
        1:15703:      erri = ER
        -:15704:
      257:15705:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      256:15706:          call random_number(tmp)
call    0 returned 100%
      256:15707:          B(i) = int(tmp * W + S)
      256:15708:          call random_number(tmp)
call    0 returned 100%
      257:15709:          C(i) = int(tmp * W + S)
        -:15710:      enddo
        -:15711:
        -:15712:!dvm$ actual(B, C)
        -:15713:!dvm$ region
        -:15714:!dvm$ parallel (i) on A(i)
      257:15715:      do i = 1, N
branch  0 taken 1% (fallthrough)
branch  1 taken 100%
      257:15716:          A(i) = isign(B(i), C(i))
        -:15717:      enddo
        -:15718:!dvm$ end region
        -:15719:!dvm$ get_actual(A)
        -:15720:
        -:15721:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15722:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15723:          if (isign(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15724:              erri = min(erri, i)
        -:15725:          endif
        -:15726:      enddo
        -:15727:
        1:15728:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15729:          call ansyes(tname)
call    0 returned 100%
        -:15730:      else
    #####:15731:          call ansno(tname)
call    0 never executed
        -:15732:      endif 
        -:15733:      
       1*:15734:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15735:
        -:15736:C -------------------------------------------------
        -:15737:
function sign16_ called 1 returned 100% blocks executed 80%
        1:15738:      subroutine sign16
        -:15739:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15740:      character*24 tname
        -:15741:      real*8 A(N), B(N), C(N)
        -:15742:      integer erri, i, asize, clock
        1:15743:      integer, allocatable :: seed(:)
        -:15744:      real tmp
        -:15745:
        -:15746:!dvm$ distribute A(BLOCK)
        -:15747:
        1:15748:      call random_seed(size = asize)
call    0 returned 100%
       3*:15749:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15750:      call system_clock(count = clock)
call    0 returned 100%
      34*:15751:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15752:      call random_seed(put = seed)
call    0 returned 100%
       1*:15753:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15754:
        1:15755:      tname = 'dsign_double'
        1:15756:      erri = ER
        -:15757:
      257:15758:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15759:          call random_number(tmp)
call    0 returned 100%
      256:15760:          B(i) = int(tmp * W + S)
      256:15761:          call random_number(tmp)
call    0 returned 100%
      257:15762:          C(i) = int(tmp * W + S)
        -:15763:      enddo
        -:15764:
        -:15765:!dvm$ actual(B, C)
        -:15766:!dvm$ region
        -:15767:!dvm$ parallel (i) on A(i)
      257:15768:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15769:          A(i) = dsign(B(i), C(i))
        -:15770:      enddo
        -:15771:!dvm$ end region
        -:15772:!dvm$ get_actual(A)
        -:15773:
        -:15774:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:15775:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15776:          if (dsign(B(i), C(i)) .ne. A(i)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15777:              erri = min(erri, i)
        -:15778:          endif
        -:15779:      enddo
        -:15780:
        1:15781:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15782:          call ansyes(tname)
call    0 returned 100%
        -:15783:      else
    #####:15784:          call ansno(tname)
call    0 never executed
        -:15785:      endif 
        -:15786:      
       1*:15787:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15788:
        -:15789:C -------------------------------------------------
        -:15790:
function sin1_ called 1 returned 100% blocks executed 79%
        1:15791:      subroutine sin1
        -:15792:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15793:      real, parameter :: EPS = 1e-6
        -:15794:      character*24 tname
        -:15795:      real A(N), B(N)
        -:15796:      integer erri, i, asize, clock
        1:15797:      integer, allocatable :: seed(:)
        -:15798:      real tmp
        -:15799:
        -:15800:!dvm$ distribute A(BLOCK)
        -:15801:
        1:15802:      call random_seed(size = asize)
call    0 returned 100%
       3*:15803:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15804:      call system_clock(count = clock)
call    0 returned 100%
      34*:15805:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15806:      call random_seed(put = seed)
call    0 returned 100%
       1*:15807:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15808:
        1:15809:      tname = 'sin_float'
        1:15810:      erri = ER
        -:15811:
      257:15812:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15813:          call random_number(B(i))
call    0 returned 100%
      257:15814:          B(i) = B(i) * W + S
        -:15815:      enddo
        -:15816:
        -:15817:!dvm$ actual(B)	  
        -:15818:!dvm$ region
        -:15819:!dvm$ parallel (i) on A(i)
      257:15820:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15821:          A(i) = sin(B(i))
        -:15822:      enddo
        -:15823:!dvm$ end region
        -:15824:!dvm$ get_actual(A)
        -:15825:
        -:15826:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:15827:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15828:          tmp = sin(B(i))
      257:15829:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15830:              erri = min(erri, i)
        -:15831:          endif
        -:15832:      enddo
        -:15833:
        1:15834:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15835:          call ansyes(tname)
call    0 returned 100%
        -:15836:      else
    #####:15837:          call ansno(tname)
call    0 never executed
        -:15838:      endif 
        -:15839:      
       1*:15840:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15841:
        -:15842:C -------------------------------------------------
        -:15843:
function sin2_ called 1 returned 100% blocks executed 79%
        1:15844:      subroutine sin2
        -:15845:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:15846:      real*8, parameter :: EPS = 1d-15
        -:15847:      character*24 tname
        -:15848:      real*8 A(N), B(N)
        -:15849:      integer erri, i, asize, clock
        1:15850:      integer, allocatable :: seed(:)
        -:15851:      real*8 tmp
        -:15852:
        -:15853:!dvm$ distribute A(BLOCK)
        -:15854:
        1:15855:      call random_seed(size = asize)
call    0 returned 100%
       3*:15856:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15857:      call system_clock(count = clock)
call    0 returned 100%
      34*:15858:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15859:      call random_seed(put = seed)
call    0 returned 100%
       1*:15860:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15861:
        1:15862:      tname = 'sin_double'
        1:15863:      erri = ER
        -:15864:
      257:15865:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15866:          call random_number(B(i))
call    0 returned 100%
      257:15867:          B(i) = B(i) * W + S
        -:15868:      enddo
        -:15869:
        -:15870:!dvm$ actual(B)
        -:15871:!dvm$ region
        -:15872:!dvm$ parallel (i) on A(i)
      257:15873:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15874:          A(i) = sin(B(i))
        -:15875:      enddo
        -:15876:!dvm$ end region
        -:15877:!dvm$ get_actual(A)
        -:15878:
        -:15879:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:15880:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15881:          tmp = sin(B(i))
      257:15882:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15883:              erri = min(erri, i)
        -:15884:          endif
        -:15885:      enddo
        -:15886:
        1:15887:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15888:          call ansyes(tname)
call    0 returned 100%
        -:15889:      else
    #####:15890:          call ansno(tname)
call    0 never executed
        -:15891:      endif 
        -:15892:      
       1*:15893:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15894:
        -:15895:C -------------------------------------------------
        -:15896:
function sin3_ called 1 returned 100% blocks executed 80%
        1:15897:      subroutine sin3
        -:15898:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:15899:      real*8, parameter :: EPS = 1e-6
        -:15900:      character*24 tname
        -:15901:      complex A(N), B(N)
        -:15902:      real x, y
        -:15903:      integer erri, i, asize, clock
        1:15904:      integer, allocatable :: seed(:)
        -:15905:      complex tmp
        -:15906:
        -:15907:!dvm$ distribute A(BLOCK)
        -:15908:
        1:15909:      call random_seed(size = asize)
call    0 returned 100%
       3*:15910:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15911:      call system_clock(count = clock)
call    0 returned 100%
      34*:15912:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15913:      call random_seed(put = seed)
call    0 returned 100%
       1*:15914:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15915:
        1:15916:      tname = 'sin_complexf'
        1:15917:      erri = ER
        -:15918:
      257:15919:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15920:          call random_number(x)
call    0 returned 100%
      256:15921:          call random_number(y)
call    0 returned 100%
      257:15922:          B(i) = cmplx(x * W + S, y * W + S)
        -:15923:      enddo
        -:15924:
        -:15925:!dvm$ actual(B)
        -:15926:!dvm$ region
        -:15927:!dvm$ parallel (i) on A(i)
      257:15928:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15929:          A(i) = sin(B(i))
        -:15930:      enddo
        -:15931:!dvm$ end region
        -:15932:!dvm$ get_actual(A)
        -:15933:
        -:15934:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:15935:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15936:          tmp = sin(B(i))
      257:15937:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15938:              erri = min(erri, i)
        -:15939:          endif
        -:15940:      enddo
        -:15941:
        1:15942:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15943:          call ansyes(tname)
call    0 returned 100%
        -:15944:      else
    #####:15945:          call ansno(tname)
call    0 never executed
        -:15946:      endif 
        -:15947:      
       1*:15948:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:15949:
        -:15950:C -------------------------------------------------
        -:15951:
function sin4_ called 1 returned 100% blocks executed 80%
        1:15952:      subroutine sin4
        -:15953:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:15954:      real*8, parameter :: EPS = 1d-15
        -:15955:      character*24 tname
        -:15956:      double complex A(N), B(N)
        -:15957:      real*8 x, y
        -:15958:      integer erri, i, asize, clock
        1:15959:      integer, allocatable :: seed(:)
        -:15960:      double complex tmp
        -:15961:
        -:15962:!dvm$ distribute A(BLOCK)
        -:15963:
        1:15964:      call random_seed(size = asize)
call    0 returned 100%
       3*:15965:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:15966:      call system_clock(count = clock)
call    0 returned 100%
      34*:15967:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:15968:      call random_seed(put = seed)
call    0 returned 100%
       1*:15969:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:15970:
        1:15971:      tname = 'sin_complexd'
        1:15972:      erri = ER
        -:15973:
      257:15974:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15975:          call random_number(x)
call    0 returned 100%
      256:15976:          call random_number(y)
call    0 returned 100%
      257:15977:          B(i) = dcmplx(x * W + S, y * W + S)
        -:15978:      enddo
        -:15979:
        -:15980:!dvm$ actual(B)
        -:15981:!dvm$ region
        -:15982:!dvm$ parallel (i) on A(i)
      257:15983:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:15984:          A(i) = sin(B(i))
        -:15985:      enddo
        -:15986:!dvm$ end region
        -:15987:!dvm$ get_actual(A)
        -:15988:
        -:15989:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:15990:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:15991:          tmp = sin(B(i))
      257:15992:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:15993:              erri = min(erri, i)
        -:15994:          endif
        -:15995:      enddo
        -:15996:
        1:15997:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:15998:          call ansyes(tname)
call    0 returned 100%
        -:15999:      else
    #####:16000:          call ansno(tname)
call    0 never executed
        -:16001:      endif 
        -:16002:      
       1*:16003:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16004:
        -:16005:C -------------------------------------------------
        -:16006:
function sin5_ called 1 returned 100% blocks executed 79%
        1:16007:      subroutine sin5
        -:16008:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:16009:      real*8, parameter :: EPS = 1d-15
        -:16010:      character*24 tname
        -:16011:      real*8 A(N), B(N)
        -:16012:      integer erri, i, asize, clock
        1:16013:      integer, allocatable :: seed(:)
        -:16014:      real*8 tmp
        -:16015:
        -:16016:!dvm$ distribute A(BLOCK)
        -:16017:
        1:16018:      call random_seed(size = asize)
call    0 returned 100%
       3*:16019:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16020:      call system_clock(count = clock)
call    0 returned 100%
      34*:16021:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16022:      call random_seed(put = seed)
call    0 returned 100%
       1*:16023:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16024:
        1:16025:      tname = 'dsin_double'
        1:16026:      erri = ER
        -:16027:
      257:16028:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16029:          call random_number(B(i))
call    0 returned 100%
      257:16030:          B(i) = B(i) * W + S
        -:16031:      enddo
        -:16032:
        -:16033:!dvm$ actual(B)
        -:16034:!dvm$ region
        -:16035:!dvm$ parallel (i) on A(i)
      257:16036:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16037:          A(i) = dsin(B(i))
        -:16038:      enddo
        -:16039:!dvm$ end region
        -:16040:!dvm$ get_actual(A)
        -:16041:
        -:16042:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16043:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16044:          tmp = dsin(B(i))
      257:16045:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16046:              erri = min(erri, i)
        -:16047:          endif
        -:16048:      enddo
        -:16049:
        1:16050:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16051:          call ansyes(tname)
call    0 returned 100%
        -:16052:      else
    #####:16053:          call ansno(tname)
call    0 never executed
        -:16054:      endif 
        -:16055:      
       1*:16056:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16057:
        -:16058:C -------------------------------------------------
        -:16059:
function sin6_ called 1 returned 100% blocks executed 80%
        1:16060:      subroutine sin6
        -:16061:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:16062:      real, parameter :: EPS = 1e-6
        -:16063:      character*24 tname
        -:16064:      complex A(N), B(N)
        -:16065:      real x, y
        -:16066:      integer erri, i, asize, clock
        1:16067:      integer, allocatable :: seed(:)
        -:16068:      complex tmp
        -:16069:
        -:16070:!dvm$ distribute A(BLOCK)
        -:16071:
        1:16072:      call random_seed(size = asize)
call    0 returned 100%
       3*:16073:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16074:      call system_clock(count = clock)
call    0 returned 100%
      34*:16075:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16076:      call random_seed(put = seed)
call    0 returned 100%
       1*:16077:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16078:
        1:16079:      tname = 'csin_complexf'
        1:16080:      erri = ER
        -:16081:
      257:16082:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16083:          call random_number(x)
call    0 returned 100%
      256:16084:          call random_number(y)
call    0 returned 100%
      257:16085:          B(i) = cmplx(x * W + S, y * W + S)
        -:16086:      enddo
        -:16087:
        -:16088:!dvm$ actual(B)
        -:16089:!dvm$ region
        -:16090:!dvm$ parallel (i) on A(i)
      257:16091:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16092:          A(i) = csin(B(i))
        -:16093:      enddo
        -:16094:!dvm$ end region
        -:16095:!dvm$ get_actual(A)
        -:16096:
        -:16097:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16098:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16099:          tmp = csin(B(i))
      257:16100:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16101:              erri = min(erri, i)
        -:16102:          endif
        -:16103:      enddo
        -:16104:
        1:16105:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16106:          call ansyes(tname)
call    0 returned 100%
        -:16107:      else
    #####:16108:          call ansno(tname)
call    0 never executed
        -:16109:      endif 
        -:16110:      
       1*:16111:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16112:
        -:16113:C -------------------------------------------------
        -:16114:
function sin7_ called 1 returned 100% blocks executed 80%
        1:16115:      subroutine sin7
        -:16116:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:16117:      real*8, parameter :: EPS = 1d-15
        -:16118:      character*24 tname
        -:16119:      double complex A(N), B(N)
        -:16120:      real*8 x, y
        -:16121:      integer erri, i, asize, clock
        1:16122:      integer, allocatable :: seed(:)
        -:16123:      double complex tmp
        -:16124:
        -:16125:!dvm$ distribute A(BLOCK)
        -:16126:
        1:16127:      call random_seed(size = asize)
call    0 returned 100%
       3*:16128:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16129:      call system_clock(count = clock)
call    0 returned 100%
      34*:16130:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16131:      call random_seed(put = seed)
call    0 returned 100%
       1*:16132:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16133:
        1:16134:      tname = 'cdsin_complexd'
        1:16135:      erri = ER
        -:16136:
      257:16137:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16138:          call random_number(x)
call    0 returned 100%
      256:16139:          call random_number(y)
call    0 returned 100%
      257:16140:          B(i) = dcmplx(x * W + S, y * W + S)
        -:16141:      enddo
        -:16142:
        -:16143:!dvm$ actual(B)
        -:16144:!dvm$ region
        -:16145:!dvm$ parallel (i) on A(i)
      257:16146:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16147:          A(i) = cdsin(B(i))
        -:16148:      enddo
        -:16149:!dvm$ end region
        -:16150:!dvm$ get_actual(A)
        -:16151:
        -:16152:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16153:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16154:          tmp = cdsin(B(i))
      257:16155:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16156:              erri = min(erri, i)
        -:16157:          endif
        -:16158:      enddo
        -:16159:
        1:16160:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16161:          call ansyes(tname)
call    0 returned 100%
        -:16162:      else
    #####:16163:          call ansno(tname)
call    0 never executed
        -:16164:      endif 
        -:16165:      
       1*:16166:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16167:
        -:16168:C -------------------------------------------------
        -:16169:
function sin8_ called 1 returned 100% blocks executed 80%
        1:16170:      subroutine sin8
        -:16171:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:16172:      real*8, parameter :: EPS = 1d-15
        -:16173:      character*24 tname
        -:16174:      double complex A(N), B(N)
        -:16175:      real*8 x, y
        -:16176:      integer erri, i, asize, clock
        1:16177:      integer, allocatable :: seed(:)
        -:16178:      double complex tmp
        -:16179:
        -:16180:!dvm$ distribute A(BLOCK)
        -:16181:
        1:16182:      call random_seed(size = asize)
call    0 returned 100%
       3*:16183:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16184:      call system_clock(count = clock)
call    0 returned 100%
      34*:16185:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16186:      call random_seed(put = seed)
call    0 returned 100%
       1*:16187:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16188:
        1:16189:      tname = 'zsin_complexd'
        1:16190:      erri = ER
        -:16191:
      257:16192:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16193:          call random_number(x)
call    0 returned 100%
      256:16194:          call random_number(y)
call    0 returned 100%
      257:16195:          B(i) = dcmplx(x * W + S, y * W + S)
        -:16196:      enddo
        -:16197:
        -:16198:!dvm$ actual(B)
        -:16199:!dvm$ region
        -:16200:!dvm$ parallel (i) on A(i)
      257:16201:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16202:          A(i) = zsin(B(i))
        -:16203:      enddo
        -:16204:!dvm$ end region
        -:16205:!dvm$ get_actual(A)
        -:16206:
        -:16207:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16208:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16209:          tmp = zsin(B(i))
      257:16210:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16211:              erri = min(erri, i)
        -:16212:          endif
        -:16213:      enddo
        -:16214:
        1:16215:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16216:          call ansyes(tname)
call    0 returned 100%
        -:16217:      else
    #####:16218:          call ansno(tname)
call    0 never executed
        -:16219:      endif 
        -:16220:      
       1*:16221:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16222:
        -:16223:C -------------------------------------------------
        -:16224:
function sinh1_ called 1 returned 100% blocks executed 79%
        1:16225:      subroutine sinh1
        -:16226:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:16227:      real, parameter :: EPS = 1e-6
        -:16228:      character*24 tname
        -:16229:      real A(N), B(N)
        -:16230:      integer erri, i, asize, clock
        1:16231:      integer, allocatable :: seed(:)
        -:16232:      real tmp
        -:16233:
        -:16234:!dvm$ distribute A(BLOCK)
        -:16235:
        1:16236:      call random_seed(size = asize)
call    0 returned 100%
       3*:16237:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16238:      call system_clock(count = clock)
call    0 returned 100%
      34*:16239:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16240:      call random_seed(put = seed)
call    0 returned 100%
       1*:16241:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16242:
        1:16243:      tname = 'sinh_float'
        1:16244:      erri = ER
        -:16245:
      257:16246:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16247:          call random_number(B(i))
call    0 returned 100%
      257:16248:          B(i) = B(i) * W + S
        -:16249:      enddo
        -:16250:
        -:16251:!dvm$ actual(B)	  
        -:16252:!dvm$ region
        -:16253:!dvm$ parallel (i) on A(i)
      257:16254:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16255:          A(i) = sinh(B(i))
        -:16256:      enddo
        -:16257:!dvm$ end region
        -:16258:!dvm$ get_actual(A)
        -:16259:
        -:16260:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16261:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16262:          tmp = sinh(B(i))
      257:16263:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16264:              erri = min(erri, i)
        -:16265:          endif
        -:16266:      enddo
        -:16267:
        1:16268:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16269:          call ansyes(tname)
call    0 returned 100%
        -:16270:      else
    #####:16271:          call ansno(tname)
call    0 never executed
        -:16272:      endif 
        -:16273:      
       1*:16274:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16275:
        -:16276:C -------------------------------------------------
        -:16277:
function sinh2_ called 1 returned 100% blocks executed 79%
        1:16278:      subroutine sinh2
        -:16279:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:16280:      real*8, parameter :: EPS = 1d-15
        -:16281:      character*24 tname
        -:16282:      real*8 A(N), B(N)
        -:16283:      integer erri, i, asize, clock
        1:16284:      integer, allocatable :: seed(:)
        -:16285:      real*8 tmp
        -:16286:
        -:16287:!dvm$ distribute A(BLOCK)
        -:16288:
        1:16289:      call random_seed(size = asize)
call    0 returned 100%
       3*:16290:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16291:      call system_clock(count = clock)
call    0 returned 100%
      34*:16292:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16293:      call random_seed(put = seed)
call    0 returned 100%
       1*:16294:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16295:
        1:16296:      tname = 'sinh_double'
        1:16297:      erri = ER
        -:16298:
      257:16299:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16300:          call random_number(B(i))
call    0 returned 100%
      257:16301:          B(i) = B(i) * W + S
        -:16302:      enddo
        -:16303:
        -:16304:!dvm$ actual(B)
        -:16305:!dvm$ region
        -:16306:!dvm$ parallel (i) on A(i)
      257:16307:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16308:          A(i) = sinh(B(i))
        -:16309:      enddo
        -:16310:!dvm$ end region
        -:16311:!dvm$ get_actual(A)
        -:16312:
        -:16313:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16314:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16315:          tmp = sinh(B(i))
      257:16316:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16317:              erri = min(erri, i)
        -:16318:          endif
        -:16319:      enddo
        -:16320:
        1:16321:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16322:          call ansyes(tname)
call    0 returned 100%
        -:16323:      else
    #####:16324:          call ansno(tname)
call    0 never executed
        -:16325:      endif 
        -:16326:      
       1*:16327:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16328:
        -:16329:C -------------------------------------------------
        -:16330:
function sinh3_ called 1 returned 100% blocks executed 79%
        1:16331:      subroutine sinh3
        -:16332:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:16333:      real*8, parameter :: EPS = 1d-15
        -:16334:      character*24 tname
        -:16335:      real*8 A(N), B(N)
        -:16336:      integer erri, i, asize, clock
        1:16337:      integer, allocatable :: seed(:)
        -:16338:      real*8 tmp
        -:16339:
        -:16340:!dvm$ distribute A(BLOCK)
        -:16341:
        1:16342:      call random_seed(size = asize)
call    0 returned 100%
       3*:16343:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16344:      call system_clock(count = clock)
call    0 returned 100%
      34*:16345:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16346:      call random_seed(put = seed)
call    0 returned 100%
       1*:16347:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16348:
        1:16349:      tname = 'dsinh_double'
        1:16350:      erri = ER
        -:16351:
      257:16352:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16353:          call random_number(B(i))
call    0 returned 100%
      257:16354:          B(i) = B(i) * W + S
        -:16355:      enddo
        -:16356:
        -:16357:!dvm$ actual(B)
        -:16358:!dvm$ region
        -:16359:!dvm$ parallel (i) on A(i)
      257:16360:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16361:          A(i) = dsinh(B(i))
        -:16362:      enddo
        -:16363:!dvm$ end region
        -:16364:!dvm$ get_actual(A)
        -:16365:
        -:16366:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16367:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16368:          tmp = dsinh(B(i))
      257:16369:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16370:              erri = min(erri, i)
        -:16371:          endif
        -:16372:      enddo
        -:16373:
        1:16374:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16375:          call ansyes(tname)
call    0 returned 100%
        -:16376:      else
    #####:16377:          call ansno(tname)
call    0 never executed
        -:16378:      endif 
        -:16379:      
       1*:16380:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16381:
        -:16382:C -------------------------------------------------
        -:16383:
function sqrt1_ called 1 returned 100% blocks executed 79%
        1:16384:      subroutine sqrt1
        -:16385:      integer, parameter :: N = 256, ER = N + 1, W = 100
        -:16386:      real, parameter :: EPS = 1e-6
        -:16387:      character*24 tname
        -:16388:      real A(N), B(N)
        -:16389:      integer erri, i, asize, clock
        1:16390:      integer, allocatable :: seed(:)
        -:16391:      real tmp
        -:16392:
        -:16393:!dvm$ distribute A(BLOCK)
        -:16394:
        1:16395:      call random_seed(size = asize)
call    0 returned 100%
       3*:16396:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16397:      call system_clock(count = clock)
call    0 returned 100%
      34*:16398:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16399:      call random_seed(put = seed)
call    0 returned 100%
       1*:16400:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16401:
        1:16402:      tname = 'sqrt_float'
        1:16403:      erri = ER
        -:16404:
      257:16405:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16406:          call random_number(B(i))
call    0 returned 100%
      257:16407:          B(i) = B(i) * W
        -:16408:      enddo
        -:16409:
        -:16410:!dvm$ actual(B)	  
        -:16411:!dvm$ region
        -:16412:!dvm$ parallel (i) on A(i)
      257:16413:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16414:          A(i) = sqrt(B(i))
        -:16415:      enddo
        -:16416:!dvm$ end region
        -:16417:!dvm$ get_actual(A)
        -:16418:
        -:16419:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16420:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16421:          tmp = sqrt(B(i))
      257:16422:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16423:              erri = min(erri, i)
        -:16424:          endif
        -:16425:      enddo
        -:16426:
        1:16427:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16428:          call ansyes(tname)
call    0 returned 100%
        -:16429:      else
    #####:16430:          call ansno(tname)
call    0 never executed
        -:16431:      endif 
        -:16432:      
       1*:16433:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16434:
        -:16435:C -------------------------------------------------
        -:16436:
function sqrt2_ called 1 returned 100% blocks executed 79%
        1:16437:      subroutine sqrt2
        -:16438:      integer, parameter :: N = 256, ER = N + 1, W = 100, S = -100
        -:16439:      real*8, parameter :: EPS = 1d-15
        -:16440:      character*24 tname
        -:16441:      real*8 A(N), B(N)
        -:16442:      integer erri, i, asize, clock
        1:16443:      integer, allocatable :: seed(:)
        -:16444:      real*8 tmp
        -:16445:
        -:16446:!dvm$ distribute A(BLOCK)
        -:16447:
        1:16448:      call random_seed(size = asize)
call    0 returned 100%
       3*:16449:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16450:      call system_clock(count = clock)
call    0 returned 100%
      34*:16451:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16452:      call random_seed(put = seed)
call    0 returned 100%
       1*:16453:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16454:
        1:16455:      tname = 'sqrt_double'
        1:16456:      erri = ER
        -:16457:
      257:16458:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16459:          call random_number(B(i))
call    0 returned 100%
      257:16460:          B(i) = B(i) * W + S
        -:16461:      enddo
        -:16462:
        -:16463:!dvm$ actual(B)
        -:16464:!dvm$ region
        -:16465:!dvm$ parallel (i) on A(i)
      257:16466:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16467:          A(i) = sqrt(B(i))
        -:16468:      enddo
        -:16469:!dvm$ end region
        -:16470:!dvm$ get_actual(A)
        -:16471:
        -:16472:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16473:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16474:          tmp = sqrt(B(i))
      257:16475:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16476:              erri = min(erri, i)
        -:16477:          endif
        -:16478:      enddo
        -:16479:
        1:16480:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16481:          call ansyes(tname)
call    0 returned 100%
        -:16482:      else
    #####:16483:          call ansno(tname)
call    0 never executed
        -:16484:      endif 
        -:16485:      
       1*:16486:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16487:
        -:16488:C -------------------------------------------------
        -:16489:
function sqrt3_ called 1 returned 100% blocks executed 80%
        1:16490:      subroutine sqrt3
        -:16491:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:16492:      real*8, parameter :: EPS = 1e-6
        -:16493:      character*24 tname
        -:16494:      complex A(N), B(N)
        -:16495:      real x, y
        -:16496:      integer erri, i, asize, clock
        1:16497:      integer, allocatable :: seed(:)
        -:16498:      complex tmp
        -:16499:
        -:16500:!dvm$ distribute A(BLOCK)
        -:16501:
        1:16502:      call random_seed(size = asize)
call    0 returned 100%
       3*:16503:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16504:      call system_clock(count = clock)
call    0 returned 100%
      34*:16505:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16506:      call random_seed(put = seed)
call    0 returned 100%
       1*:16507:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16508:
        1:16509:      tname = 'sqrt_complexf'
        1:16510:      erri = ER
        -:16511:
      257:16512:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16513:          call random_number(x)
call    0 returned 100%
      256:16514:          call random_number(y)
call    0 returned 100%
      257:16515:          B(i) = cmplx(x * W + S, y * W + S)
        -:16516:      enddo
        -:16517:
        -:16518:!dvm$ actual(B)
        -:16519:!dvm$ region
        -:16520:!dvm$ parallel (i) on A(i)
      257:16521:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16522:          A(i) = sqrt(B(i))
        -:16523:      enddo
        -:16524:!dvm$ end region
        -:16525:!dvm$ get_actual(A)
        -:16526:
        -:16527:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16528:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16529:          tmp = sqrt(B(i))
      257:16530:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16531:              erri = min(erri, i)
        -:16532:          endif
        -:16533:      enddo
        -:16534:
        1:16535:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16536:          call ansyes(tname)
call    0 returned 100%
        -:16537:      else
    #####:16538:          call ansno(tname)
call    0 never executed
        -:16539:      endif 
        -:16540:      
       1*:16541:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16542:
        -:16543:C -------------------------------------------------
        -:16544:
function sqrt4_ called 1 returned 100% blocks executed 80%
        1:16545:      subroutine sqrt4
        -:16546:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:16547:      real*8, parameter :: EPS = 1d-15
        -:16548:      character*24 tname
        -:16549:      double complex A(N), B(N)
        -:16550:      real*8 x, y
        -:16551:      integer erri, i, asize, clock
        1:16552:      integer, allocatable :: seed(:)
        -:16553:      double complex tmp
        -:16554:
        -:16555:!dvm$ distribute A(BLOCK)
        -:16556:
        1:16557:      call random_seed(size = asize)
call    0 returned 100%
       3*:16558:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16559:      call system_clock(count = clock)
call    0 returned 100%
      34*:16560:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16561:      call random_seed(put = seed)
call    0 returned 100%
       1*:16562:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16563:
        1:16564:      tname = 'sqrt_complexd'
        1:16565:      erri = ER
        -:16566:
      257:16567:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16568:          call random_number(x)
call    0 returned 100%
      256:16569:          call random_number(y)
call    0 returned 100%
      257:16570:          B(i) = dcmplx(x * W + S, y * W + S)
        -:16571:      enddo
        -:16572:
        -:16573:!dvm$ actual(B)
        -:16574:!dvm$ region
        -:16575:!dvm$ parallel (i) on A(i)
      257:16576:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16577:          A(i) = sqrt(B(i))
        -:16578:      enddo
        -:16579:!dvm$ end region
        -:16580:!dvm$ get_actual(A)
        -:16581:
        -:16582:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16583:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16584:          tmp = sqrt(B(i))
      257:16585:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16586:              erri = min(erri, i)
        -:16587:          endif
        -:16588:      enddo
        -:16589:
        1:16590:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16591:          call ansyes(tname)
call    0 returned 100%
        -:16592:      else
    #####:16593:          call ansno(tname)
call    0 never executed
        -:16594:      endif 
        -:16595:      
       1*:16596:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16597:
        -:16598:C -------------------------------------------------
        -:16599:
function sqrt5_ called 1 returned 100% blocks executed 79%
        1:16600:      subroutine sqrt5
        -:16601:      integer, parameter :: N = 256, ER = N + 1, W = 100, S = -100
        -:16602:      real*8, parameter :: EPS = 1d-15
        -:16603:      character*24 tname
        -:16604:      real*8 A(N), B(N)
        -:16605:      integer erri, i, asize, clock
        1:16606:      integer, allocatable :: seed(:)
        -:16607:      real*8 tmp
        -:16608:
        -:16609:!dvm$ distribute A(BLOCK)
        -:16610:
        1:16611:      call random_seed(size = asize)
call    0 returned 100%
       3*:16612:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16613:      call system_clock(count = clock)
call    0 returned 100%
      34*:16614:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16615:      call random_seed(put = seed)
call    0 returned 100%
       1*:16616:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16617:
        1:16618:      tname = 'dsqrt_double'
        1:16619:      erri = ER
        -:16620:
      257:16621:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16622:          call random_number(B(i))
call    0 returned 100%
      257:16623:          B(i) = B(i) * W + S
        -:16624:      enddo
        -:16625:
        -:16626:!dvm$ actual(B)
        -:16627:!dvm$ region
        -:16628:!dvm$ parallel (i) on A(i)
      257:16629:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16630:          A(i) = dsqrt(B(i))
        -:16631:      enddo
        -:16632:!dvm$ end region
        -:16633:!dvm$ get_actual(A)
        -:16634:
        -:16635:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16636:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16637:          tmp = dsqrt(B(i))
      257:16638:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16639:              erri = min(erri, i)
        -:16640:          endif
        -:16641:      enddo
        -:16642:
        1:16643:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16644:          call ansyes(tname)
call    0 returned 100%
        -:16645:      else
    #####:16646:          call ansno(tname)
call    0 never executed
        -:16647:      endif 
        -:16648:      
       1*:16649:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16650:
        -:16651:C -------------------------------------------------
        -:16652:
function sqrt6_ called 1 returned 100% blocks executed 80%
        1:16653:      subroutine sqrt6
        -:16654:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:16655:      real*8, parameter :: EPS = 1e-6
        -:16656:      character*24 tname
        -:16657:      complex A(N), B(N)
        -:16658:      real x, y
        -:16659:      integer erri, i, asize, clock
        1:16660:      integer, allocatable :: seed(:)
        -:16661:      complex tmp
        -:16662:
        -:16663:!dvm$ distribute A(BLOCK)
        -:16664:
        1:16665:      call random_seed(size = asize)
call    0 returned 100%
       3*:16666:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16667:      call system_clock(count = clock)
call    0 returned 100%
      34*:16668:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16669:      call random_seed(put = seed)
call    0 returned 100%
       1*:16670:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16671:
        1:16672:      tname = 'csqrt_complexf'
        1:16673:      erri = ER
        -:16674:
      257:16675:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16676:          call random_number(x)
call    0 returned 100%
      256:16677:          call random_number(y)
call    0 returned 100%
      257:16678:          B(i) = cmplx(x * W + S, y * W + S)
        -:16679:      enddo
        -:16680:
        -:16681:!dvm$ actual(B)
        -:16682:!dvm$ region
        -:16683:!dvm$ parallel (i) on A(i)
      257:16684:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16685:          A(i) = csqrt(B(i))
        -:16686:      enddo
        -:16687:!dvm$ end region
        -:16688:!dvm$ get_actual(A)
        -:16689:
        -:16690:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16691:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16692:          tmp = csqrt(B(i))
      257:16693:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16694:              erri = min(erri, i)
        -:16695:          endif
        -:16696:      enddo
        -:16697:
        1:16698:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16699:          call ansyes(tname)
call    0 returned 100%
        -:16700:      else
    #####:16701:          call ansno(tname)
call    0 never executed
        -:16702:      endif 
        -:16703:      
       1*:16704:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16705:
        -:16706:C -------------------------------------------------
        -:16707:
function sqrt7_ called 1 returned 100% blocks executed 80%
        1:16708:      subroutine sqrt7
        -:16709:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:16710:      real*8, parameter :: EPS = 1d-15
        -:16711:      character*24 tname
        -:16712:      double complex A(N), B(N)
        -:16713:      real*8 x, y
        -:16714:      integer erri, i, asize, clock
        1:16715:      integer, allocatable :: seed(:)
        -:16716:      double complex tmp
        -:16717:
        -:16718:!dvm$ distribute A(BLOCK)
        -:16719:
        1:16720:      call random_seed(size = asize)
call    0 returned 100%
       3*:16721:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16722:      call system_clock(count = clock)
call    0 returned 100%
      34*:16723:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16724:      call random_seed(put = seed)
call    0 returned 100%
       1*:16725:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16726:
        1:16727:      tname = 'cdsqrt_complexd'
        1:16728:      erri = ER
        -:16729:
      257:16730:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16731:          call random_number(x)
call    0 returned 100%
      256:16732:          call random_number(y)
call    0 returned 100%
      257:16733:          B(i) = dcmplx(x * W + S, y * W + S)
        -:16734:      enddo
        -:16735:
        -:16736:!dvm$ actual(B)
        -:16737:!dvm$ region
        -:16738:!dvm$ parallel (i) on A(i)
      257:16739:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16740:          A(i) = cdsqrt(B(i))
        -:16741:      enddo
        -:16742:!dvm$ end region
        -:16743:!dvm$ get_actual(A)
        -:16744:
        -:16745:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16746:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16747:          tmp = cdsqrt(B(i))
      257:16748:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16749:              erri = min(erri, i)
        -:16750:          endif
        -:16751:      enddo
        -:16752:
        1:16753:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16754:          call ansyes(tname)
call    0 returned 100%
        -:16755:      else
    #####:16756:          call ansno(tname)
call    0 never executed
        -:16757:      endif 
        -:16758:      
       1*:16759:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16760:
        -:16761:C -------------------------------------------------
        -:16762:
function sqrt8_ called 1 returned 100% blocks executed 80%
        1:16763:      subroutine sqrt8
        -:16764:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:16765:      real*8, parameter :: EPS = 1d-15
        -:16766:      character*24 tname
        -:16767:      double complex A(N), B(N)
        -:16768:      real*8 x, y
        -:16769:      integer erri, i, asize, clock
        1:16770:      integer, allocatable :: seed(:)
        -:16771:      double complex tmp
        -:16772:
        -:16773:!dvm$ distribute A(BLOCK)
        -:16774:
        1:16775:      call random_seed(size = asize)
call    0 returned 100%
       3*:16776:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16777:      call system_clock(count = clock)
call    0 returned 100%
      34*:16778:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16779:      call random_seed(put = seed)
call    0 returned 100%
       1*:16780:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16781:
        1:16782:      tname = 'zsqrt_complexd'
        1:16783:      erri = ER
        -:16784:
      257:16785:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16786:          call random_number(x)
call    0 returned 100%
      256:16787:          call random_number(y)
call    0 returned 100%
      257:16788:          B(i) = dcmplx(x * W + S, y * W + S)
        -:16789:      enddo
        -:16790:
        -:16791:!dvm$ actual(B)
        -:16792:!dvm$ region
        -:16793:!dvm$ parallel (i) on A(i)
      257:16794:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16795:          A(i) = zsqrt(B(i))
        -:16796:      enddo
        -:16797:!dvm$ end region
        -:16798:!dvm$ get_actual(A)
        -:16799:
        -:16800:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16801:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16802:          tmp = zsqrt(B(i))
      257:16803:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16804:              erri = min(erri, i)
        -:16805:          endif
        -:16806:      enddo
        -:16807:
        1:16808:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16809:          call ansyes(tname)
call    0 returned 100%
        -:16810:      else
    #####:16811:          call ansno(tname)
call    0 never executed
        -:16812:      endif 
        -:16813:      
       1*:16814:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16815:
        -:16816:C -------------------------------------------------
        -:16817:
function tan1_ called 1 returned 100% blocks executed 79%
        1:16818:      subroutine tan1
        -:16819:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:16820:      real, parameter :: EPS = 1e-6
        -:16821:      character*24 tname
        -:16822:      real A(N), B(N)
        -:16823:      integer erri, i, asize, clock
        1:16824:      integer, allocatable :: seed(:)
        -:16825:      real tmp
        -:16826:
        -:16827:!dvm$ distribute A(BLOCK)
        -:16828:
        1:16829:      call random_seed(size = asize)
call    0 returned 100%
       3*:16830:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16831:      call system_clock(count = clock)
call    0 returned 100%
      34*:16832:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16833:      call random_seed(put = seed)
call    0 returned 100%
       1*:16834:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16835:
        1:16836:      tname = 'tan_float'
        1:16837:      erri = ER
        -:16838:
      257:16839:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16840:          call random_number(B(i))
call    0 returned 100%
      257:16841:          B(i) = B(i) * W + S
        -:16842:      enddo
        -:16843:
        -:16844:!dvm$ actual(B)	  
        -:16845:!dvm$ region
        -:16846:!dvm$ parallel (i) on A(i)
      257:16847:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16848:          A(i) = tan(B(i))
        -:16849:      enddo
        -:16850:!dvm$ end region
        -:16851:!dvm$ get_actual(A)
        -:16852:
        -:16853:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16854:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16855:          tmp = tan(B(i))
      257:16856:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16857:              erri = min(erri, i)
        -:16858:          endif
        -:16859:      enddo
        -:16860:
        1:16861:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16862:          call ansyes(tname)
call    0 returned 100%
        -:16863:      else
    #####:16864:          call ansno(tname)
call    0 never executed
        -:16865:      endif 
        -:16866:      
       1*:16867:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16868:
        -:16869:C -------------------------------------------------
        -:16870:
function tan2_ called 1 returned 100% blocks executed 79%
        1:16871:      subroutine tan2
        -:16872:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:16873:      real*8, parameter :: EPS = 1d-15
        -:16874:      character*24 tname
        -:16875:      real*8 A(N), B(N)
        -:16876:      integer erri, i, asize, clock
        1:16877:      integer, allocatable :: seed(:)
        -:16878:      real*8 tmp
        -:16879:
        -:16880:!dvm$ distribute A(BLOCK)
        -:16881:
        1:16882:      call random_seed(size = asize)
call    0 returned 100%
       3*:16883:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16884:      call system_clock(count = clock)
call    0 returned 100%
      34*:16885:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16886:      call random_seed(put = seed)
call    0 returned 100%
       1*:16887:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16888:
        1:16889:      tname = 'tan_double'
        1:16890:      erri = ER
        -:16891:
      257:16892:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16893:          call random_number(B(i))
call    0 returned 100%
      257:16894:          B(i) = B(i) * W + S
        -:16895:      enddo
        -:16896:
        -:16897:!dvm$ actual(B)
        -:16898:!dvm$ region
        -:16899:!dvm$ parallel (i) on A(i)
      257:16900:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16901:          A(i) = tan(B(i))
        -:16902:      enddo
        -:16903:!dvm$ end region
        -:16904:!dvm$ get_actual(A)
        -:16905:
        -:16906:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16907:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16908:          tmp = tan(B(i))
      257:16909:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16910:              erri = min(erri, i)
        -:16911:          endif
        -:16912:      enddo
        -:16913:
        1:16914:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16915:          call ansyes(tname)
call    0 returned 100%
        -:16916:      else
    #####:16917:          call ansno(tname)
call    0 never executed
        -:16918:      endif 
        -:16919:      
       1*:16920:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16921:
        -:16922:C -------------------------------------------------
        -:16923:
function tan3_ called 1 returned 100% blocks executed 80%
        1:16924:      subroutine tan3
        -:16925:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:16926:      real*8, parameter :: EPS = 1e-6
        -:16927:      character*24 tname
        -:16928:      complex A(N), B(N)
        -:16929:      real x, y
        -:16930:      integer erri, i, asize, clock
        1:16931:      integer, allocatable :: seed(:)
        -:16932:      complex tmp
        -:16933:
        -:16934:!dvm$ distribute A(BLOCK)
        -:16935:
        1:16936:      call random_seed(size = asize)
call    0 returned 100%
       3*:16937:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16938:      call system_clock(count = clock)
call    0 returned 100%
      34*:16939:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16940:      call random_seed(put = seed)
call    0 returned 100%
       1*:16941:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16942:
        1:16943:      tname = 'tan_complexf'
        1:16944:      erri = ER
        -:16945:
      257:16946:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16947:          call random_number(x)
call    0 returned 100%
      256:16948:          call random_number(y)
call    0 returned 100%
      257:16949:          B(i) = cmplx(x * W + S, y * W + S)
        -:16950:      enddo
        -:16951:
        -:16952:!dvm$ actual(B)
        -:16953:!dvm$ region
        -:16954:!dvm$ parallel (i) on A(i)
      257:16955:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:16956:          A(i) = tan(B(i))
        -:16957:      enddo
        -:16958:!dvm$ end region
        -:16959:!dvm$ get_actual(A)
        -:16960:
        -:16961:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:16962:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:16963:          tmp = tan(B(i))
      257:16964:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:16965:              erri = min(erri, i)
        -:16966:          endif
        -:16967:      enddo
        -:16968:
        1:16969:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:16970:          call ansyes(tname)
call    0 returned 100%
        -:16971:      else
    #####:16972:          call ansno(tname)
call    0 never executed
        -:16973:      endif 
        -:16974:      
       1*:16975:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:16976:
        -:16977:C -------------------------------------------------
        -:16978:
function tan4_ called 1 returned 100% blocks executed 80%
        1:16979:      subroutine tan4
        -:16980:      integer, parameter :: N = 256, ER = N + 1, W = 2, S = -1
        -:16981:      real*8, parameter :: EPS = 1d-15
        -:16982:      character*24 tname
        -:16983:      double complex A(N), B(N)
        -:16984:      real*8 x, y
        -:16985:      integer erri, i, asize, clock
        1:16986:      integer, allocatable :: seed(:)
        -:16987:      double complex tmp
        -:16988:
        -:16989:!dvm$ distribute A(BLOCK)
        -:16990:
        1:16991:      call random_seed(size = asize)
call    0 returned 100%
       3*:16992:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:16993:      call system_clock(count = clock)
call    0 returned 100%
      34*:16994:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:16995:      call random_seed(put = seed)
call    0 returned 100%
       1*:16996:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:16997:
        1:16998:      tname = 'tan_complexd'
        1:16999:      erri = ER
        -:17000:
      257:17001:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17002:          call random_number(x)
call    0 returned 100%
      256:17003:          call random_number(y)
call    0 returned 100%
      257:17004:          B(i) = dcmplx(x * W + S, y * W + S)
        -:17005:      enddo
        -:17006:
        -:17007:!dvm$ actual(B)
        -:17008:!dvm$ region
        -:17009:!dvm$ parallel (i) on A(i)
      257:17010:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17011:          A(i) = tan(B(i))
        -:17012:      enddo
        -:17013:!dvm$ end region
        -:17014:!dvm$ get_actual(A)
        -:17015:
        -:17016:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:17017:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17018:          tmp = tan(B(i))
      257:17019:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:17020:              erri = min(erri, i)
        -:17021:          endif
        -:17022:      enddo
        -:17023:
        1:17024:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17025:          call ansyes(tname)
call    0 returned 100%
        -:17026:      else
    #####:17027:          call ansno(tname)
call    0 never executed
        -:17028:      endif 
        -:17029:      
       1*:17030:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17031:
        -:17032:C -------------------------------------------------
        -:17033:
function tan5_ called 1 returned 100% blocks executed 79%
        1:17034:      subroutine tan5
        -:17035:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:17036:      real*8, parameter :: EPS = 1d-15
        -:17037:      character*24 tname
        -:17038:      real*8 A(N), B(N)
        -:17039:      integer erri, i, asize, clock
        1:17040:      integer, allocatable :: seed(:)
        -:17041:      real*8 tmp
        -:17042:
        -:17043:!dvm$ distribute A(BLOCK)
        -:17044:
        1:17045:      call random_seed(size = asize)
call    0 returned 100%
       3*:17046:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:17047:      call system_clock(count = clock)
call    0 returned 100%
      34*:17048:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:17049:      call random_seed(put = seed)
call    0 returned 100%
       1*:17050:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:17051:
        1:17052:      tname = 'dtan_double'
        1:17053:      erri = ER
        -:17054:
      257:17055:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17056:          call random_number(B(i))
call    0 returned 100%
      257:17057:          B(i) = B(i) * W + S
        -:17058:      enddo
        -:17059:
        -:17060:!dvm$ actual(B)
        -:17061:!dvm$ region
        -:17062:!dvm$ parallel (i) on A(i)
      257:17063:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17064:          A(i) = dtan(B(i))
        -:17065:      enddo
        -:17066:!dvm$ end region
        -:17067:!dvm$ get_actual(A)
        -:17068:
        -:17069:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:17070:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17071:          tmp = dtan(B(i))
      257:17072:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:17073:              erri = min(erri, i)
        -:17074:          endif
        -:17075:      enddo
        -:17076:
        1:17077:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17078:          call ansyes(tname)
call    0 returned 100%
        -:17079:      else
    #####:17080:          call ansno(tname)
call    0 never executed
        -:17081:      endif 
        -:17082:      
       1*:17083:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17084:
        -:17085:C -------------------------------------------------
        -:17086:
function tanh1_ called 1 returned 100% blocks executed 79%
        1:17087:      subroutine tanh1
        -:17088:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:17089:      real, parameter :: EPS = 1e-6
        -:17090:      character*24 tname
        -:17091:      real A(N), B(N)
        -:17092:      integer erri, i, asize, clock
        1:17093:      integer, allocatable :: seed(:)
        -:17094:      real tmp
        -:17095:
        -:17096:!dvm$ distribute A(BLOCK)
        -:17097:
        1:17098:      call random_seed(size = asize)
call    0 returned 100%
       3*:17099:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:17100:      call system_clock(count = clock)
call    0 returned 100%
      34*:17101:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:17102:      call random_seed(put = seed)
call    0 returned 100%
       1*:17103:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:17104:
        1:17105:      tname = 'tanh_float'
        1:17106:      erri = ER
        -:17107:
      257:17108:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17109:          call random_number(B(i))
call    0 returned 100%
      257:17110:          B(i) = B(i) * W + S
        -:17111:      enddo
        -:17112:
        -:17113:!dvm$ actual(B)	  
        -:17114:!dvm$ region
        -:17115:!dvm$ parallel (i) on A(i)
      257:17116:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17117:          A(i) = tanh(B(i))
        -:17118:      enddo
        -:17119:!dvm$ end region
        -:17120:!dvm$ get_actual(A)
        -:17121:
        -:17122:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:17123:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17124:          tmp = tanh(B(i))
      257:17125:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:17126:              erri = min(erri, i)
        -:17127:          endif
        -:17128:      enddo
        -:17129:
        1:17130:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17131:          call ansyes(tname)
call    0 returned 100%
        -:17132:      else
    #####:17133:          call ansno(tname)
call    0 never executed
        -:17134:      endif 
        -:17135:      
       1*:17136:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17137:
        -:17138:C -------------------------------------------------
        -:17139:
function tanh2_ called 1 returned 100% blocks executed 79%
        1:17140:      subroutine tanh2
        -:17141:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:17142:      real*8, parameter :: EPS = 1d-15
        -:17143:      character*24 tname
        -:17144:      real*8 A(N), B(N)
        -:17145:      integer erri, i, asize, clock
        1:17146:      integer, allocatable :: seed(:)
        -:17147:      real*8 tmp
        -:17148:
        -:17149:!dvm$ distribute A(BLOCK)
        -:17150:
        1:17151:      call random_seed(size = asize)
call    0 returned 100%
       3*:17152:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:17153:      call system_clock(count = clock)
call    0 returned 100%
      34*:17154:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:17155:      call random_seed(put = seed)
call    0 returned 100%
       1*:17156:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:17157:
        1:17158:      tname = 'tanh_double'
        1:17159:      erri = ER
        -:17160:
      257:17161:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17162:          call random_number(B(i))
call    0 returned 100%
      257:17163:          B(i) = B(i) * W + S
        -:17164:      enddo
        -:17165:
        -:17166:!dvm$ actual(B)
        -:17167:!dvm$ region
        -:17168:!dvm$ parallel (i) on A(i)
      257:17169:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17170:          A(i) = tanh(B(i))
        -:17171:      enddo
        -:17172:!dvm$ end region
        -:17173:!dvm$ get_actual(A)
        -:17174:
        -:17175:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:17176:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17177:          tmp = tanh(B(i))
      257:17178:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:17179:              erri = min(erri, i)
        -:17180:          endif
        -:17181:      enddo
        -:17182:
        1:17183:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17184:          call ansyes(tname)
call    0 returned 100%
        -:17185:      else
    #####:17186:          call ansno(tname)
call    0 never executed
        -:17187:      endif 
        -:17188:      
       1*:17189:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17190:
        -:17191:C -------------------------------------------------
        -:17192:
function tanh3_ called 1 returned 100% blocks executed 79%
        1:17193:      subroutine tanh3
        -:17194:      integer, parameter :: N = 256, ER = N + 1, W = 200, S = -100
        -:17195:      real*8, parameter :: EPS = 1d-15
        -:17196:      character*24 tname
        -:17197:      real*8 A(N), B(N)
        -:17198:      integer erri, i, asize, clock
        1:17199:      integer, allocatable :: seed(:)
        -:17200:      real*8 tmp
        -:17201:
        -:17202:!dvm$ distribute A(BLOCK)
        -:17203:
        1:17204:      call random_seed(size = asize)
call    0 returned 100%
       3*:17205:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:17206:      call system_clock(count = clock)
call    0 returned 100%
      34*:17207:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:17208:      call random_seed(put = seed)
call    0 returned 100%
       1*:17209:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:17210:
        1:17211:      tname = 'dtanh_double'
        1:17212:      erri = ER
        -:17213:
      257:17214:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17215:          call random_number(B(i))
call    0 returned 100%
      257:17216:          B(i) = B(i) * W + S
        -:17217:      enddo
        -:17218:
        -:17219:!dvm$ actual(B)
        -:17220:!dvm$ region
        -:17221:!dvm$ parallel (i) on A(i)
      257:17222:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17223:          A(i) = dtanh(B(i))
        -:17224:      enddo
        -:17225:!dvm$ end region
        -:17226:!dvm$ get_actual(A)
        -:17227:
        -:17228:!dvm$ parallel (i) on A(i), reduction(min(erri)), private(tmp)
      257:17229:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17230:          tmp = dtanh(B(i))
      257:17231:          if (abs(tmp - A(i))/abs(tmp) .gt. EPS) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:17232:              erri = min(erri, i)
        -:17233:          endif
        -:17234:      enddo
        -:17235:
        1:17236:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17237:          call ansyes(tname)
call    0 returned 100%
        -:17238:      else
    #####:17239:          call ansno(tname)
call    0 never executed
        -:17240:      endif 
        -:17241:      
       1*:17242:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17243:
        -:17244:C -------------------------------------------------
        -:17245:
function trailz1_ called 1 returned 100% blocks executed 82%
        1:17246:      subroutine trailz1
        -:17247:      integer, parameter :: N = 256, ER = N + 1, W = 8
        -:17248:      character*24 tname
        -:17249:      integer*1 A(N), B(N)
        -:17250:      integer erri, i, asize, clock
        1:17251:      integer, allocatable :: seed(:)
        -:17252:      real tmp
        -:17253:
        -:17254:!dvm$ distribute A(BLOCK)
        -:17255:
        1:17256:      call random_seed(size = asize)
call    0 returned 100%
       3*:17257:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:17258:      call system_clock(count = clock)
call    0 returned 100%
      34*:17259:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:17260:      call random_seed(put = seed)
call    0 returned 100%
       1*:17261:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:17262:
        1:17263:      tname = 'trailz_char'
        1:17264:      erri = ER
        -:17265:
      257:17266:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17267:          call random_number(tmp)
call    0 returned 100%
      257:17268:          B(i) = 2 ** int(tmp * W)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:17269:      enddo
        -:17270:
        -:17271:!dvm$ actual(B)
        -:17272:!dvm$ region
        -:17273:!dvm$ parallel (i) on A(i)
      257:17274:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17275:          A(i) = trailz(B(i))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:17276:      enddo
        -:17277:!dvm$ end region
        -:17278:!dvm$ get_actual(A)
        -:17279:
        -:17280:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:17281:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17282:          if (trailz(B(i)) .ne. A(i)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:17283:              erri = min(erri, i)
        -:17284:          endif
        -:17285:      enddo
        -:17286:
        1:17287:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17288:          call ansyes(tname)
call    0 returned 100%
        -:17289:      else
    #####:17290:          call ansno(tname)
call    0 never executed
        -:17291:      endif 
        -:17292:      
       1*:17293:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17294:
        -:17295:C -------------------------------------------------
        -:17296:
function trailz2_ called 1 returned 100% blocks executed 82%
        1:17297:      subroutine trailz2
        -:17298:      integer, parameter :: N = 256, ER = N + 1, W = 16
        -:17299:      character*24 tname
        -:17300:      integer*2 A(N), B(N)
        -:17301:      integer erri, i, asize, clock
        1:17302:      integer, allocatable :: seed(:)
        -:17303:      real tmp
        -:17304:
        -:17305:!dvm$ distribute A(BLOCK)
        -:17306:
        -:17307:
        1:17308:      call random_seed(size = asize)
call    0 returned 100%
       3*:17309:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:17310:      call system_clock(count = clock)
call    0 returned 100%
      34*:17311:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:17312:      call random_seed(put = seed)
call    0 returned 100%
       1*:17313:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:17314:
        1:17315:      tname = 'trailz_short'
        1:17316:      erri = ER
        -:17317:
      257:17318:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17319:          call random_number(tmp)
call    0 returned 100%
      257:17320:          B(i) = 2 ** int(tmp * W)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:17321:      enddo
        -:17322:
        -:17323:!dvm$ actual(B)
        -:17324:!dvm$ region
        -:17325:!dvm$ parallel (i) on A(i)
      257:17326:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17327:          A(i) = trailz(B(i))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:17328:      enddo
        -:17329:!dvm$ end region
        -:17330:!dvm$ get_actual(A)
        -:17331:
        -:17332:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:17333:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17334:          if (trailz(B(i)) .ne. A(i)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:17335:              erri = min(erri, i)
        -:17336:          endif
        -:17337:      enddo
        -:17338:
        1:17339:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17340:          call ansyes(tname)
call    0 returned 100%
        -:17341:      else
    #####:17342:          call ansno(tname)
call    0 never executed
        -:17343:      endif 
        -:17344:      
       1*:17345:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17346:
        -:17347:C -------------------------------------------------
        -:17348:
function trailz3_ called 1 returned 100% blocks executed 82%
        1:17349:      subroutine trailz3
        -:17350:      integer, parameter :: N = 256, ER = N + 1, W = 32
        -:17351:      character*24 tname
        -:17352:      integer*4 A(N), B(N)
        -:17353:      integer erri, i, asize, clock
        1:17354:      integer, allocatable :: seed(:)
        -:17355:      real tmp
        -:17356:
        -:17357:!dvm$ distribute A(BLOCK)
        -:17358:
        1:17359:      call random_seed(size = asize)
call    0 returned 100%
       3*:17360:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:17361:      call system_clock(count = clock)
call    0 returned 100%
      34*:17362:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:17363:      call random_seed(put = seed)
call    0 returned 100%
       1*:17364:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:17365:
        1:17366:      tname = 'trailz_long'
        1:17367:      erri = ER
        -:17368:
      257:17369:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17370:          call random_number(tmp)
call    0 returned 100%
      257:17371:          B(i) = 2 ** int(tmp * W)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:17372:      enddo
        -:17373:
        -:17374:!dvm$ actual(B)
        -:17375:!dvm$ region
        -:17376:!dvm$ parallel (i) on A(i)
      257:17377:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17378:          A(i) = trailz(B(i))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:17379:      enddo
        -:17380:!dvm$ end region
        -:17381:!dvm$ get_actual(A)
        -:17382:
        -:17383:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:17384:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17385:          if (trailz(B(i)) .ne. A(i)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:17386:              erri = min(erri, i)
        -:17387:          endif
        -:17388:      enddo
        -:17389:
        1:17390:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17391:          call ansyes(tname)
call    0 returned 100%
        -:17392:      else
    #####:17393:          call ansno(tname)
call    0 never executed
        -:17394:      endif 
        -:17395:      
       1*:17396:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17397:
        -:17398:C -------------------------------------------------
        -:17399:
function trailz4_ called 1 returned 100% blocks executed 82%
        1:17400:      subroutine trailz4
        -:17401:      integer, parameter :: N = 256, ER = N + 1, W = 64
        -:17402:      character*24 tname
        -:17403:      integer*8 A(N), B(N)
        -:17404:      integer erri, i, asize, clock
        1:17405:      integer, allocatable :: seed(:)
        -:17406:      real tmp
        -:17407:
        -:17408:!dvm$ distribute A(BLOCK)
        -:17409:
        1:17410:      call random_seed(size = asize)
call    0 returned 100%
       3*:17411:      allocate(seed(asize))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
call   10 never executed
branch 11 taken 0% (fallthrough)
branch 12 taken 100%
call   13 never executed
branch 14 taken 0% (fallthrough)
branch 15 taken 100%
call   16 never executed
        1:17412:      call system_clock(count = clock)
call    0 returned 100%
      34*:17413:      seed = clock + 37 * (/(i - 1, i = 1, asize)/)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
branch  5 taken 50% (fallthrough)
branch  6 taken 50%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
branch  9 taken 89% (fallthrough)
branch 10 taken 11%
branch 11 taken 100% (fallthrough)
branch 12 taken 0%
branch 13 taken 0% (fallthrough)
branch 14 taken 100%
branch 15 never executed (fallthrough)
branch 16 never executed
branch 17 taken 89% (fallthrough)
branch 18 taken 11%
        1:17414:      call random_seed(put = seed)
call    0 returned 100%
       1*:17415:      deallocate(seed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:17416:
        1:17417:      tname = 'trailz_longlong'
        1:17418:      erri = ER
        -:17419:
      257:17420:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      256:17421:          call random_number(tmp)
call    0 returned 100%
      257:17422:          B(i) = 2 ** int(tmp * W)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:17423:      enddo
        -:17424:
        -:17425:!dvm$ actual(B)
        -:17426:!dvm$ region
        -:17427:!dvm$ parallel (i) on A(i)
      257:17428:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17429:          A(i) = trailz(B(i))
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:17430:      enddo
        -:17431:!dvm$ end region
        -:17432:!dvm$ get_actual(A)
        -:17433:
        -:17434:!dvm$ parallel (i) on A(i), reduction(min(erri))
      257:17435:      do i = 1, N
branch  0 taken 100% (fallthrough)
branch  1 taken 1%
      257:17436:          if (trailz(B(i)) .ne. A(i)) then
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:17437:              erri = min(erri, i)
        -:17438:          endif
        -:17439:      enddo
        -:17440:
        1:17441:      if (erri .eq. ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:17442:          call ansyes(tname)
call    0 returned 100%
        -:17443:      else
    #####:17444:          call ansno(tname)
call    0 never executed
        -:17445:      endif 
        -:17446:      
       1*:17447:      end
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:17448:
        -:17449:C -------------------------------------------------
        -:17450:
function ansyes_ called 314 returned 100% blocks executed 100%
      314:17451:      subroutine ansyes(name)
        -:17452:      character*24 name
      314:17453:      print *, name, '  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
      314:17454:      end
        -:17455:
function ansno_ called 0 returned 0% blocks executed 0%
    #####:17456:      subroutine ansno(name)
        -:17457:      character*24 name
    #####:17458:      print *, name, '  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:17459:      end
