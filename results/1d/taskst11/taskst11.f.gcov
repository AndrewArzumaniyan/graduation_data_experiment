        -:    0:Source:results/1d/taskst11/taskst11.f
        -:    0:Graph:./results\1d\taskst11\taskst11.gcno
        -:    0:Data:./results\1d\taskst11\taskst11.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 89%
        1:    1:	PROGRAM    taskst11
        -:    2:!	rectangular grid is distributed on two blocks
        -:    3:!
        -:    4:!	
        -:    5:	PARAMETER   (K=8, N1 = 4, ITMAX=20, N2 = K-N1, ER = 10000)
        1:    6:	REAL,ALLOCATABLE :: A(:,:),A1(:,:),A2(:,:)
        1:    7:        REAL,ALLOCATABLE :: B(:,:),B1(:,:),B2(:,:),B_1(:,:),B_2(:,:) 
        -:    8:        INTEGER LP(2),HP(2), ERRT1, ERRT2
        -:    9:        CHARACTER*8:: TNAME='taskst11'
        -:   10:!DVM$	PROCESSORS    P(NUMBER_OF_PROCESSORS( ))
        -:   11:!DVM$	TASK  MB( 2 )
        -:   12:!DVM$	DISTRIBUTE   A(*,BLOCK) ONTO P
        -:   13:!DVM$	ALIGN   B( I, J )  WITH  A( I, J )
        -:   14:!DVM$	ALIGN   B1( I, J )  WITH  A1( I, J ) 
        -:   15:!DVM$	ALIGN   B2( I, J )  WITH  A2( I, J ) 
        -:   16:!DVM$	DISTRIBUTE  ::  A1, A2 
        -:   17:
        1:   18:        PRINT *,  '===START OF taskst11 ====================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        1:   19:        CALL DPT(LP,HP,2)
        -:   20:!DVM$	MAP  MB( 1 )  ONTO  P( LP(1) : HP(1) )
    #####:   21:        ALLOCATE(A1(N1+1,K))
call    0 never executed
        -:   22:!DVM$	REDISTRIBUTE  A1( *, BLOCK )  ONTO  MB( 1 )
       1*:   23:        ALLOCATE(B1(N1+1,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   24:!DVM$	MAP  MB( 2 )   ONTO  P( LP(2) : HP(2) )
       1*:   25:        ALLOCATE(A2(N2+1,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   26:!DVM$	REDISTRIBUTE  A2( *, BLOCK )  ONTO  MB( 2 )
       1*:   27:        ALLOCATE(B2(N2+1,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       1*:   28:        ALLOCATE(A(K,K),B(K,K),B_1(K,K),B_2(K,K))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 100% (fallthrough)
branch 10 taken 0%
call   11 never executed
        -:   29:!		Initialization
        -:   30:!DVM$   TASK_REGION MB
        -:   31:!DVM$   ON MB(1)
        -:   32:!DVM$   REGION
        -:   33:!DVM$	PARALLEL    ( J, I )   ON   A1(I, J)
        9:   34:	DO  J  =  1, K
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       41:   35:	   DO I  =  1, N1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       40:   36:		IF(I.EQ.1 .OR. J.EQ.1 .OR. J.EQ.K) THEN
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
       14:   37:			A1(I, J) = 0.
       14:   38:			B1(I, J) = 0.
        -:   39:		ELSE
       18:   40:			B1(I, J)  = 1. + I + J 
       18:   41:			A1(I, J) = B1(I, J)
        -:   42:		ENDIF
        -:   43:           ENDDO
        -:   44:        ENDDO
        -:   45:!DVM$   END REGION
        -:   46:!DVM$   END ON
        -:   47:!DVM$   ON MB(2)
        -:   48:!DVM$   REGION
        -:   49:!DVM$	PARALLEL    ( J, I )   ON   A2(I, J)
        9:   50:	DO  J  =  1, K
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       41:   51:           DO  I  =  2, N2+1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       40:   52:		IF(I.EQ.N2+1 .OR. J.EQ.1 .OR. J.EQ.K) THEN
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
       14:   53:			A2(I, J) = 0.
       14:   54:			B2(I, J) = 0.
        -:   55:		ELSE
       18:   56:			B2(I, J)  = 1. + (I+N1-1) + J 
       18:   57:			A2(I, J) = B2(I, J)
        -:   58:		ENDIF
        -:   59:           ENDDO
        -:   60:        ENDDO
        -:   61:!DVM$   END REGION
        -:   62:!DVM$   END ON
        -:   63:!DVM$   END TASK_REGION
        -:   64:      
       21:   65:	DO  2   IT  =  1, ITMAX
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:   66:
        -:   67:!		exchange bounds
        -:   68:!DVM$   GET_ACTUAL (B2(2,:),B1(N1, :))
        -:   69:!DVM$	PARALLEL    ( J )   ON   A1(N1+1, J),
        -:   70:!DVM$*  REMOTE_ACCESS  (B2( 2, J ) )
      180:   71:	DO  J  =  1, K
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
      180:   72:            A1(N1+1, J) = B2(2, J)
        -:   73:        ENDDO
        -:   74:!DVM$	PARALLEL    ( J )   ON   A2( 1, J),
        -:   75:!DVM$*  REMOTE_ACCESS  (B1( N1, J ) )
      180:   76:	DO  J  =  1, K
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
      180:   77:            A2(1, J) = B1(N1, J)
        -:   78:        ENDDO
        -:   79:!DVM$   ACTUAL (A2(1, :),A1(N1+1,:))
        -:   80:!DVM$	TASK_REGION MB
        -:   81:!DVM$	ON   MB( 1 )
        -:   82:!DVM$   REGION
        -:   83:!DVM$	PARALLEL    ( J, I )   ON   B1(I, J),
        -:   84:!DVM$*  SHADOW_RENEW ( A1 )
      140:   85:	DO  J  =  2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      500:   86:            DO  I  =  2, N1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   87:                 B1(I, J)=(A1(I-1, J) + A1(I,J-1) + 
      480:   88:     *           A1(I+1,J) + A1(I,J+1))/4
        -:   89:            ENDDO
        -:   90:        ENDDO
        -:   91:
        -:   92:!DVM$	PARALLEL    ( J, I )   ON   A1(I, J)
      140:   93:	DO  J  =  2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      500:   94:   	    DO  I  =  2, N1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      480:   95:                A1(I, J) =  B1( I, J )
        -:   96:            ENDDO
        -:   97:        ENDDO 
        -:   98:!DVM$   END REGION
        -:   99:!DVM$	END ON
        -:  100:!DVM$	ON   MB( 2 )
        -:  101:!DVM$   REGION
        -:  102:!DVM$	PARALLEL    ( J, I )   ON   B2(I, J),
        -:  103:!DVM$*  SHADOW_RENEW ( A2 )
      140:  104:	DO  J  =  2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      500:  105:            DO  I  =  2, N2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  106:                B2(I,J) = (A2(I-1,J) + A2(I,J-1) + 
      480:  107:     *          A2(I+1,J) + A2(I,J+1))/4
        -:  108:            ENDDO
        -:  109:        ENDDO          
        -:  110:!DVM$	PARALLEL    ( J, I )   ON   A2(I, J)
      140:  111:	DO  J  =  2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      500:  112:            DO  I  =  2, N2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      480:  113:                A2(I, J) =  B2( I, J )
        -:  114:            ENDDO
        -:  115:        ENDDO 
        -:  116:!DVM$   END REGION
        -:  117:!DVM$	END ON
        -:  118:!DVM$	END  TASK_REGION
        1:  119:2       CONTINUE
        -:  120:!1-task JACOBI   
        -:  121:
        -:  122:!DVM$   REGION   
        -:  123:!DVM$   PARALLEL    (J,I)   ON   A(I, J)
        -:  124:!		nest of two parallel loops, iteration (i,j) will be executed on 
        -:  125:!		processor, which is owner of element A(i,j) 
        9:  126:            DO  J  =  1, K
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  127:                DO  I  =  1, K
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       64:  128:                    A(I,  J)  =  0.
       72:  129:                    IF(I.EQ.1.OR.J.EQ.1.OR.I.EQ.K.OR.J.EQ.K) THEN
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
branch  2 taken 27% (fallthrough)
branch  3 taken 73%
       28:  130:                       B(I,  J) = 0.
        -:  131:                    ELSE
       36:  132:                       B(I,  J)  = ( 1. + I + J )
        -:  133:                    ENDIF
        -:  134:                ENDDO
        -:  135:            ENDDO
        -:  136:!DVM$   END REGION            
       21:  137:        DO  IT  =  1,  ITMAX
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  138:!DVM$  REGION       
        -:  139:!DVM$   PARALLEL  (J,  I)   ON  A(I,  J)
        -:  140:!		variable EPS is used for calculation of maximum value
      140:  141:                  DO  J  =  2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      860:  142:                      DO  I  =  2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      840:  143:                         A(I, J)  =  B(I, J)
        -:  144:                      ENDDO
        -:  145:                  ENDDO
        -:  146:!DVM$   PARALLEL  (J,  I)   ON  B(I,  J),   SHADOW_RENEW   (A)
        -:  147:!		Copying shadow elements of array A from 
        -:  148:!		neighbouring processors before loop execution
      141:  149:                  DO  J = 2,  K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
      860:  150:                      DO  I = 2,  K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:  151:        B(I, J) =  (A( I-1, J ) + A( I, J-1 ) + A( I+1, J)+
      840:  152:     *                        A( I, J+1 )) / 4
        -:  153:                      ENDDO
        -:  154:                  ENDDO
        -:  155:!DVM$ END REGION
        -:  156:        ENDDO
        -:  157:!DVM$ GET_ACTUAL (B,B1,B2)
        4:  158:      ERRT1 = ER
        4:  159:      ERRT2 = ER
        -:  160:!   compare 2-task JACOBI with 1-task JACOBI
        -:  161:!DVM$ PARALLEL (I,J)  ON B1(I,J),REMOTE_ACCESS (B(I,J))
        4:  162:      DO I = 2,N1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       22:  163:         DO J = 2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       21:  164:            B_1(I,J) = B(I,J)
        -:  165:         ENDDO
        -:  166:      ENDDO 
        -:  167:!DVM$ PARALLEL (I,J)  ON B2(I,J),REMOTE_ACCESS (B(I+(N1-1),J))
        4:  168:      DO I = 2,N2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       22:  169:         DO J = 2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       21:  170:            B_2(I,J) = B(I+(N1-1),J)
        -:  171:         ENDDO
        -:  172:      ENDDO 
        -:  173:
        -:  174:!DVM$ TASK_REGION MB
        -:  175:!DVM$ ON MB(1) 
        -:  176:!DVM$ PARALLEL (I,J)  ON B1(I,J), REDUCTION(MIN(ERRT1))
        4:  177:      DO I = 2,N1
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       22:  178:         DO J = 2, K-1            
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       21:  179:            IF(B1(I,J).NE.B_1(I,J)) THEN
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  180:              ERRT1 = MIN(ERRT1, I)  
        -:  181:            ENDIF 
        -:  182:         ENDDO
        -:  183:      ENDDO 
        -:  184:!DVM$ END ON
        -:  185:!DVM$ ON MB(2)
        -:  186:!DVM$ PARALLEL (I,J)  ON B2(I,J), REDUCTION(MIN(ERRT2))
        4:  187:      DO I = 2,N2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       22:  188:         DO J = 2, K-1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       21:  189:            IF(B2(I,J).NE.B_2(I,J)) THEN   
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  190:              ERRT2 = MIN(ERRT2, I)  
        -:  191:            ENDIF 
        -:  192:         ENDDO
        -:  193:      ENDDO 
        -:  194:!DVM$ END ON
        -:  195:!DVM$ END TASK_REGION
        -:  196:!DVM$ GET_ACTUAL(ERRT1,ERRT2)
        1:  197:      IF (ERRT1 .EQ. ER .AND. ERRT2 .EQ. ER) THEN    
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  198:          CALL ANSYES(TNAME)
call    0 returned 100%
        -:  199:      ELSE
    #####:  200:          CALL ANSNO (TNAME)
call    0 never executed
        -:  201:      ENDIF
       1*:  202:      DEALLOCATE (B,B_1,B_2,B1,B2,A,A1,A2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
branch 21 taken 0% (fallthrough)
branch 22 taken 100%
call   23 never executed
        -:  203:   
        1:  204:      PRINT *,  '=== END OF taskst11 ======================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:  205:      END
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  206:
function dpt_ called 0 returned 0% blocks executed 0%
    #####:  207:      SUBROUTINE DPT(LP,HP,NT)
        -:  208:!     distributing processors for NT tasks (NT = 2)      
        -:  209:      INTEGER LP(2), HP(2)
        -:  210:      NUMBER_OF_PROCESSORS() = 1
        -:  211:!DVM$ DEBUG 1 (D = 0)
       1*:  212:      NP = NUMBER_OF_PROCESSORS()
       1*:  213:      NTP = NP/NT
        -:  214:      IF(NP.EQ.1) THEN
       1*:  215:         LP(1) = 1
       1*:  216:         HP(1) = 1
       1*:  217:         LP(2) = 1
       1*:  218:         HP(2) = 1
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  219:      ELSE
        -:  220:         LP(1) = 1
        -:  221:         HP(1) = NTP
        -:  222:         LP(2) = NTP+1
        -:  223:         HP(2) = NP
        -:  224:      END IF
        -:  225:!DVM$ ENDDEBUG 1
    #####:  226:      END
        -:  227:C -------------------------------------------------
        -:  228:
function ansyes_ called 1 returned 100% blocks executed 100%
        1:  229:      SUBROUTINE ANSYES(NAME)
        -:  230:      CHARACTER*8 NAME
        1:  231:      PRINT *, NAME, '  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        1:  232:      END
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  233:      SUBROUTINE ANSNO (NAME)
        -:  234:      CHARACTER*8 NAME
    #####:  235:      PRINT *, NAME, '  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  236:      END
