        -:    0:Source:results/1d/sha11/sha11.f
        -:    0:Graph:./results\1d\sha11\sha11.gcno
        -:    0:Data:./results\1d\sha11\sha11.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program SHA11
        -:    2:     
        -:    3:c    TESTING OF THE SHADOW_GROUP DIRECTIVE ,SHADOW_START DIRECRIVE AND
        -:    4:c    SHADOW_WAIT DIRECTIVE.       
        -:    5:c    DISTRIBUTED ARRAYES A(N),D(N),F(N) IS TO HAVE DIFFERENT 
        -:    6:c    SHADOW WIDTH ON BOTH SIDES 
        -:    7:
        1:    8:      print *,'===START OF SHA11========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    9:C --------------------------------------------------
        1:   10:      call sha1101
call    0 returned 100%
        -:   11:C --------------------------------------------------
        1:   12:      call sha1102
call    0 returned 100%
        -:   13:C --------------------------------------------------
        1:   14:      call sha1103
call    0 returned 100%
        -:   15:C -------------------------------------------------
        1:   16:      call sha1104
call    0 returned 100%
        -:   17:C -------------------------------------------------
        -:   18: 
        -:   19:C
        -:   20:C
        1:   21:      print *,'=== END OF SHA11 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   22:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   23:C ---------------------------------------------SHA1101
function sha1101_ called 1 returned 100% blocks executed 67%
        1:   24:      subroutine SHA1101
        -:   25:     
        -:   26:      integer, parameter :: N = 32,NL=1000
        -:   27:
        -:   28:
        -:   29:      character*7 tname 
        1:   30:      integer, allocatable :: A(:),BA(:),BD(:),BF(:),C(:),D(:),F(:)
        -:   31:      integer nloop 
        -:   32:                      
        -:   33:cdvm$ distribute BA(BLOCK)     
        -:   34:cdvm$ shadow D(2:2)
        -:   35:cdvm$ shadow F(3:3)
        -:   36:cdvm$ align (I) with BA(I) ::A,D,F,BD,BF
        -:   37:
        1:   38:      tname='SHA1101'
       1*:   39:      allocate (BA(N),A(N),BD(N),BF(N),C(N),D(N),F(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
call   20 never executed
        -:   40:cdvm$ shadow_group ADF(A(1:1),D(2:2),F(3:3))
        -:   41:
        -:   42:      NNL=NL    
       33:   43:      call serial1(C,N,NNL)
       33:   44:      nloopa=NL
       33:   45:      nloopd=NL
       33:   46:      nloopf=NL
        -:   47:*dvm$ parallel (i) on A(i)
       33:   48:      do i=1,N
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       32:   49:        A(i) = NL+i
       32:   50:        D(i) =NL+i
       33:   51:        F(i) =NL+i
        -:   52:      enddo
        -:   53:
        -:   54:cdvm$ shadow_start ADF
        -:   55:cdvm$ shadow_wait ADF               
        -:   56:
        -:   57:*dvm$ parallel (i) on BA(i)
       27:   58:      do i=4,N-3
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       26:   59:         BA(i) = A(i-1)+A(i+1)
       26:   60:         BD(i)=  D(i-2)+D(i+2)
       27:   61:         BF(i)=  F(i-3)+F(i+3)         
        -:   62:      enddo 
        -:   63:  
        -:   64:*dvm$ parallel (i) on BA(i), reduction( min( nloopa),
        -:   65:*dvm$* min(nloopd),min(nloopf) )
       27:   66:      do i=4,N-3
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      26*:   67:          if (BA(i).ne.(C(i-1)+c(i+1))) nloopa=min(nloopa,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      26*:   68:          if (BD(i).ne.(C(i-2)+c(i+2))) nloopd=min(nloopd,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      27*:   69:          if (BF(i).ne.(C(i-3)+c(i+3))) nloopf=min(nloopf,i)          
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:   70:      enddo 
        -:   71:      
        1:   72:      if ((nloopa .eq.NL).and.(nloopd.eq.NL).and.(nloopf.eq.NL)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   73:          call ansyes(tname)
call    0 returned 100%
        -:   74:      else
    #####:   75:          call ansno(tname)
call    0 never executed
        -:   76:      endif 
       1*:   77:      deallocate (A,BA,BD,BF,C,D,F)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
        -:   78:      
        1:   79:      end
        -:   80:
        -:   81:C ---------------------------------------------SHA1102
function sha1102_ called 1 returned 100% blocks executed 67%
        1:   82:      subroutine SHA1102     
        -:   83:      integer, parameter :: N = 16,NL=1000
        -:   84:      character*7 tname 
        1:   85:      integer, allocatable :: A(:),BA(:),BD(:),BF(:),C(:),D(:),F(:)
        -:   86:      integer nloop 
        -:   87:                      
        -:   88:cdvm$ distribute BA(BLOCK)   
        -:   89:cdvm$ shadow D(2:2)
        -:   90:cdvm$ shadow F(3:3)
        -:   91:cdvm$ align (I) with BA(I) ::A,D,F,BD,BF
        -:   92:
        1:   93:      tname='SHA1102'
       1*:   94:      allocate (BA(N),A(N),BD(N),BF(N),C(N),D(N),F(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
call   20 never executed
        -:   95:cdvm$ shadow_group ADF(A(1:1),D(2:2),F(3:3))
        -:   96:
        -:   97:      NNL=NL    
       17:   98:      call serial1(C,N,NNL)
       17:   99:      nloopa=NL
       17:  100:      nloopd=NL
       17:  101:      nloopf=NL
        -:  102:
        -:  103:*dvm$ parallel (i) on A(i)
       17:  104:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       16:  105:        A(i) = NL+i
       16:  106:        D(i) =NL+i
       17:  107:        F(i) =NL+i
        -:  108:      enddo
        -:  109:
        -:  110:cdvm$ shadow_start ADF
        -:  111:     
        -:  112:*dvm$ parallel (i) on BA(i),shadow_wait ADF
       11:  113:      do i=4,N-3
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       10:  114:         BA(i) = A(i-1)+A(i+1)
       10:  115:         BD(i)=  D(i-2)+D(i+2)
       11:  116:         BF(i)=  F(i-3)+F(i+3)         
        -:  117:      enddo 
        -:  118:    
        -:  119:*dvm$ parallel (i) on BA(i), reduction( min( nloopa),
        -:  120:*dvm$* min(nloopd),min(nloopf) )
       11:  121:      do i=4,N-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      10*:  122:          if (BA(i).ne.(C(i-1)+c(i+1))) nloopa=min(nloopa,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      10*:  123:          if (BD(i).ne.(C(i-2)+c(i+2))) nloopd=min(nloopd,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      11*:  124:          if (BF(i).ne.(C(i-3)+c(i+3))) nloopf=min(nloopf,i)          
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  125:      enddo 
        -:  126:     
        1:  127:      if ((nloopa .eq.NL).and.(nloopd.eq.NL).and.(nloopf.eq.NL)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  128:          call ansyes(tname)
call    0 returned 100%
        -:  129:      else
    #####:  130:          call ansno(tname)
call    0 never executed
        -:  131:      endif 
       1*:  132:      deallocate (A,BA,BD,BF,C,D,F)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
        -:  133:      
        1:  134:      end
        -:  135:
        -:  136:C ---------------------------------------------SHA1103
        -:  137:   
        -:  138:
function sha1103_ called 1 returned 100% blocks executed 67%
        1:  139:      subroutine SHA1103
        -:  140:      integer, parameter :: N = 16,NL=1000
        -:  141:      character*7 tname 
        1:  142:      integer, allocatable :: A(:),BA(:),BD(:),BF(:),C(:),D(:),F(:)
        -:  143:      integer nloop 
        -:  144:                      
        -:  145:cdvm$ distribute BA(BLOCK)    
        -:  146:cdvm$ shadow D(2:2)
        -:  147:cdvm$ shadow F(3:3)
        -:  148:cdvm$ align (I) with BA(I) ::A,D,F,BD,BF
        -:  149:
        1:  150:      tname='SHA1103'
       1*:  151:      allocate (BA(N),A(N),BD(N),BF(N),C(N),D(N),F(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
call   20 never executed
        -:  152:cdvm$ shadow_group ADF(A(1:1),D(2:2),F(3:3))
        -:  153:
        -:  154:      NNL=NL    
       17:  155:      call serial1(C,N,NNL)
       17:  156:      nloopa=NL
       17:  157:      nloopd=NL
       17:  158:      nloopf=NL
        -:  159:
        -:  160:*dvm$ parallel (i) on A(i),shadow_start ADF
       17:  161:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       16:  162:        A(i) = NL+i
       16:  163:        D(i) =NL+i
       17:  164:        F(i) =NL+i
        -:  165:      enddo
        -:  166:
        -:  167:cdvm$ shadow_wait ADF 
        -:  168:*dvm$ parallel (i) on BA(i)
       11:  169:      do i=4,N-3
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       10:  170:         BA(i) = A(i-1)+A(i+1)
       10:  171:         BD(i)=  D(i-2)+D(i+2)
       11:  172:         BF(i)=  F(i-3)+F(i+3)
        -:  173:      enddo 
        -:  174:     
        -:  175:*dvm$ parallel (i) on BA(i), reduction( min( nloopa),
        -:  176:*dvm$* min(nloopd),min(nloopf) )
       11:  177:      do i=4,N-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      10*:  178:          if (BA(i).ne.(C(i-1)+c(i+1))) nloopa=min(nloopa,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      10*:  179:          if (BD(i).ne.(C(i-2)+c(i+2))) nloopd=min(nloopd,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      11*:  180:          if (BF(i).ne.(C(i-3)+c(i+3))) nloopf=min(nloopf,i)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  181:      enddo 
        -:  182:      
        1:  183:      if ((nloopa .eq.NL).and.(nloopd.eq.NL).and.(nloopf.eq.NL)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  184:          call ansyes(tname)
call    0 returned 100%
        -:  185:      else
    #####:  186:          call ansno(tname)
call    0 never executed
        -:  187:      endif 
       1*:  188:      deallocate (A,BA,BD,BF,C,D,F)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
        -:  189:      
        1:  190:      end
        -:  191:C ---------------------------------------------SHA1104
function sha1104_ called 1 returned 100% blocks executed 67%
        1:  192:      subroutine SHA1104
        -:  193:      integer, parameter :: N = 16,NL=1000
        -:  194:      character*7 tname 
        1:  195:      integer, allocatable :: A(:),BA(:),BD(:),BF(:),C(:),D(:),F(:)
        -:  196:      integer nloop 
        -:  197:                      
        -:  198:cdvm$ distribute BA(BLOCK)     
        -:  199:cdvm$ shadow D(2:2)
        -:  200:cdvm$ shadow F(3:3)
        -:  201:cdvm$ align (I) with BA(I) ::A,D,F,BD,BF
        -:  202:
        1:  203:      tname='SHA1104'
       1*:  204:      allocate (BA(N),A(N),BD(N),BF(N),C(N),D(N),F(N))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 100% (fallthrough)
branch 19 taken 0%
call   20 never executed
        -:  205:cdvm$ shadow_group ADF(A(1:1),D(2:2),F(3:3))
        -:  206:
        -:  207:      NNL=NL    
       17:  208:      call serial1(C,N,NNL)
       17:  209:      nloopa=NL
       17:  210:      nloopd=NL
       17:  211:      nloopf=NL
        -:  212:
        -:  213:*dvm$ parallel (i) on A(i),shadow_start ADF
       17:  214:      do i=1,N
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       16:  215:        A(i) = NL+i
       16:  216:        D(i) =NL+i
       17:  217:        F(i) =NL+i
        -:  218:      enddo
        -:  219:
        -:  220:*dvm$ parallel (i) on BA(i),shadow_wait ADF
       11:  221:      do i=4,N-3
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
       10:  222:         BA(i) = A(i-1)+A(i+1)
       10:  223:         BD(i)=  D(i-2)+D(i+2)
       11:  224:         BF(i)=  F(i-3)+F(i+3)
        -:  225:      enddo 
        -:  226:      
        -:  227:*dvm$ parallel (i) on BA(i), reduction( min( nloopa),
        -:  228:*dvm$* min(nloopd),min(nloopf) )
       11:  229:      do i=4,N-3
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      10*:  230:          if (BA(i).ne.(C(i-1)+c(i+1))) nloopa=min(nloopa,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      10*:  231:          if (BD(i).ne.(C(i-2)+c(i+2))) nloopd=min(nloopd,i)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      11*:  232:          if (BF(i).ne.(C(i-3)+c(i+3))) nloopf=min(nloopf,i)          
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  233:      enddo 
        -:  234:      
        1:  235:      if ((nloopa .eq.NL).and.(nloopd.eq.NL).and.(nloopf.eq.NL)) then
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  236:          call ansyes(tname)
call    0 returned 100%
        -:  237:      else
    #####:  238:          call ansno(tname)
call    0 never executed
        -:  239:      endif 
       1*:  240:      deallocate (A,BA,BD,BF,C,D,F)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
branch  6 taken 0% (fallthrough)
branch  7 taken 100%
call    8 never executed
branch  9 taken 0% (fallthrough)
branch 10 taken 100%
call   11 never executed
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 never executed
branch 15 taken 0% (fallthrough)
branch 16 taken 100%
call   17 never executed
branch 18 taken 0% (fallthrough)
branch 19 taken 100%
call   20 never executed
        -:  241:      
        1:  242:      end
        -:  243:C -----------------------------------------------         
function serial1_ called 0 returned 0% blocks executed 0%
    #####:  244:      subroutine serial1(AR,N,NL)
        -:  245:      integer AR(N)
        -:  246:      integer NL 
      84*:  247:      do i=1,N
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
branch  6 never executed (fallthrough)
branch  7 never executed
branch  8 taken 6% (fallthrough)
branch  9 taken 94%
      84*:  248:        AR(i) = NL+i
        -:  249:      enddo                   
    #####:  250:      end 
        -:  251:
        -:  252:
function ansyes_ called 4 returned 100% blocks executed 100%
        4:  253:       subroutine ansyes(name)
        -:  254:      character*7 name
        4:  255:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4:  256:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  257:      subroutine ansno(name)
        -:  258:      character*7 name
    #####:  259:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  260:      end
