        -:    0:Source:results/4d/distr4/distr4.f
        -:    0:Graph:./results\4d\distr4\distr4.gcno
        -:    0:Data:./results\4d\distr4\distr4.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program DISTR4
        -:    2:
        -:    3:c    TESTING distr CLAUSE .       
        -:    4:
        1:    5:      print *,'===START OF distr4========================'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C -------------------------------------------------
        -:    7:c 44  DISTRIBUTE arrA4[*][*][*][*] REDISTRIBUTE arrA4[BLOCK][BLOCK][BLOCK][BLOCK]
        1:    8:      call distr44
call    0 returned 100%
        -:    9:C -------------------------------------------------
        -:   10:c 45  DISTRIBUTE arrA4[BLOCK][BLOCK][BLOCK][BLOCK] REDISTRIBUTE arrA4[*][*][*][*]
        1:   11:      call distr45
call    0 returned 100%
        -:   12:C -------------------------------------------------
        -:   13:c 46  DISTRIBUTE arrA4[*][*][*][*] REDISTRIBUTE arrA4[BLOCK][BLOCK][BLOCK][BLOCK]
        -:   14:c     small array
        1:   15:      call distr46
call    0 returned 100%
        -:   16:C -------------------------------------------------
        -:   17:c 47  DISTRIBUTE arrA4[BLOCK][BLOCK][BLOCK][BLOCK] REDISTRIBUTE arrA4[*][*][*][*]
        -:   18:c     small array
        1:   19:      call distr47
call    0 returned 100%
        -:   20:C -------------------------------------------------
        -:   21:C
        1:   22:      print *,'=== END OF distr4 ========================= '    
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   23:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   24:
        -:   25:
        -:   26:C ----------------------------------------------------distr44
        -:   27:c 44  DISTRIBUTE arrA4[*][*][*][*] REDISTRIBUTE arrA4[BLOCK][BLOCK][BLOCK][BLOCK]
function distr44_ called 1 returned 100% blocks executed 90%
        1:   28:      subroutine distr44
        -:   29:      integer, parameter :: AN1=8,AN2=8,AN3=8,AN4=8,NL=1000,ER=100000
        -:   30:      integer :: erri=ER,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb
        1:   31:      integer, allocatable :: A4(:,:,:,:)
        -:   32:      character(9), parameter :: tname = 'distr44'
        -:   33:               
        -:   34:!dvm$ distribute A4(*,*,*,*)   
        -:   35:!dvm$ dynamic A4
        -:   36:
       1*:   37:      allocate ( A4(AN1,AN2,AN3,AN4))     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:   38:
        -:   39:c *dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        9:   40:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:   41:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:   42:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:   43:                do m=1,AN4
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:   44:                     A4(i,j,n,m) = i*NL/10+j*NL/100+n*NL/1000+m
        -:   45:                enddo
        -:   46:             enddo
        -:   47:          enddo
        -:   48:      enddo
        -:   49:
        -:   50:!dvm$ redistribute A4(BLOCK,BLOCK,BLOCK,BLOCK)    
        -:   51:
        -:   52:!dvm$ actual(erri)
        -:   53:!dvm$ region 
        -:   54:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), reduction( min( erri ) )
        9:   55:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:   56:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:   57:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:   58:              do m=1,AN4
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:   59:                if (A4(i,j,n,m) .eq.(i*NL/10+j*NL/100+n*NL/1000+m)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   60:                else
    #####:   61:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:   62:                endif 
        -:   63:              enddo
        -:   64:            enddo
        -:   65:          enddo
        -:   66:      enddo
        -:   67:!dvm$ end region 
        -:   68: 
        -:   69:!dvm$ get_actual(erri) 
        1:   70:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   71:          call ansyes(tname)
call    0 returned 100%
        -:   72:      else
    #####:   73:          call ansno(tname)
call    0 never executed
        -:   74:      endif 
       1*:   75:      deallocate (A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   76:
        1:   77:      end
        -:   78:
        -:   79:C ----------------------------------------------------distr45
        -:   80:c 45  DISTRIBUTE arrA4[BLOCK][BLOCK][BLOCK][BLOCK] REDISTRIBUTE arrA4[*][*][*][*]
function distr45_ called 1 returned 100% blocks executed 90%
        1:   81:      subroutine distr45
        -:   82:      integer, parameter :: AN1=8,AN2=8,AN3=8,AN4=8,NL=1000,ER=100000
        -:   83:      integer :: erri=ER,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb
        1:   84:      integer, allocatable :: A4(:,:,:,:)
        -:   85:      character(9), parameter :: tname = 'distr45'
        -:   86:               
        -:   87:!dvm$ distribute A4(BLOCK,BLOCK,BLOCK,BLOCK)   
        -:   88:!dvm$ dynamic A4
        -:   89:
       1*:   90:      allocate ( A4(AN1,AN2,AN3,AN4))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:   91:
        -:   92:!dvm$ region 
        -:   93:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        9:   94:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:   95:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:   96:             do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:   97:                do m=1,AN4
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:   98:                     A4(i,j,n,m) = i*NL/10+j*NL/100+n*NL/1000+m
        -:   99:                enddo
        -:  100:             enddo
        -:  101:          enddo
        -:  102:      enddo
        -:  103:!dvm$ end region 
        -:  104:
        -:  105:!dvm$ redistribute A4(*,*,*,*)    
        -:  106:
        -:  107:!dvm$ actual(erri)
        -:  108:!dvm$ region 
        -:  109:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), reduction( min( erri ) )
        9:  110:      do i=1,AN1
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       73:  111:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      584:  112:            do n=1,AN3
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4672:  113:              do m=1,AN4
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     4608:  114:                if (A4(i,j,n,m) .eq.(i*NL/10+j*NL/100+n*NL/1000+m)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  115:                else
    #####:  116:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  117:                endif 
        -:  118:              enddo
        -:  119:            enddo
        -:  120:          enddo
        -:  121:      enddo
        -:  122:!dvm$ end region 
        -:  123:     
        -:  124:!dvm$ get_actual(erri) 
        1:  125:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  126:          call ansyes(tname)
call    0 returned 100%
        -:  127:      else
    #####:  128:          call ansno(tname)
call    0 never executed
        -:  129:      endif 
       1*:  130:      deallocate (A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  131:
        1:  132:      end
        -:  133:
        -:  134:C ----------------------------------------------------distr46
        -:  135:c 46  DISTRIBUTE arrA4[*][*][*][*] REDISTRIBUTE arrA4[BLOCK][BLOCK][BLOCK][BLOCK]
function distr46_ called 1 returned 100% blocks executed 90%
        1:  136:      subroutine distr46
        -:  137:      integer, parameter :: AN1=5,AN2=4,AN3=3,AN4=2,NL=1000,ER=100000
        -:  138:      integer :: erri=ER,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb
        1:  139:      integer, allocatable :: A4(:,:,:,:)
        -:  140:      character(9), parameter :: tname = 'distr46'
        -:  141:               
        -:  142:!dvm$ distribute A4(*,*,*,*)   
        -:  143:!dvm$ dynamic A4
        -:  144:
       1*:  145:      allocate ( A4(AN1,AN2,AN3,AN4))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
        -:  146:
        -:  147:c *dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        6:  148:      do i=1,AN1
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       26:  149:          do j=1,AN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       85:  150:             do n=1,AN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      200:  151:                do m=1,AN4
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      180:  152:                     A4(i,j,n,m) = i*NL/10+j*NL/100+n*NL/1000+m
        -:  153:                enddo
        -:  154:             enddo
        -:  155:          enddo
        -:  156:      enddo
        -:  157:
        -:  158:!dvm$ redistribute A4(BLOCK,BLOCK,BLOCK,BLOCK)    
        -:  159:
        -:  160:!dvm$ actual(erri)
        -:  161:!dvm$ region 
        -:  162:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), reduction( min( erri ) )
        6:  163:      do i=1,AN1
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       26:  164:          do j=1,AN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       85:  165:            do n=1,AN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      200:  166:              do m=1,AN4
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      180:  167:                if (A4(i,j,n,m) .eq.(i*NL/10+j*NL/100+n*NL/1000+m)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  168:                else
    #####:  169:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  170:                endif 
        -:  171:              enddo
        -:  172:            enddo
        -:  173:          enddo
        -:  174:      enddo
        -:  175:!dvm$ end region 
        -:  176: 
        -:  177:!dvm$ get_actual(erri) 
        1:  178:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  179:          call ansyes(tname)
call    0 returned 100%
        -:  180:      else
    #####:  181:          call ansno(tname)
call    0 never executed
        -:  182:      endif 
       1*:  183:      deallocate (A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  184:
        1:  185:      end
        -:  186:
        -:  187:C ----------------------------------------------------distr47
        -:  188:c 47  DISTRIBUTE arrA4[BLOCK][BLOCK][BLOCK][BLOCK] REDISTRIBUTE arrA4[*][*][*][*]
function distr47_ called 1 returned 100% blocks executed 90%
        1:  189:      subroutine distr47
        -:  190:      integer, parameter :: AN1=1,AN2=2,AN3=3,AN4=4,NL=1000,ER=100000
        -:  191:      integer :: erri=ER,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb
        1:  192:      integer, allocatable :: A4(:,:,:,:)
        -:  193:      character(9), parameter :: tname = 'distr47'
        -:  194:               
        -:  195:!dvm$ distribute A4(BLOCK,BLOCK,BLOCK,BLOCK)   
        -:  196:!dvm$ dynamic A4
        -:  197:
       1*:  198:      allocate ( A4(AN1,AN2,AN3,AN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  199:
        -:  200:!dvm$ region 
        -:  201:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m)
        2:  202:      do i=1,AN1
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        4:  203:          do j=1,AN2
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        9:  204:             do n=1,AN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       32:  205:                do m=1,AN4
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       30:  206:                     A4(i,j,n,m) = i*NL/10+j*NL/100+n*NL/1000+m
        -:  207:                enddo
        -:  208:             enddo
        -:  209:          enddo
        -:  210:      enddo
        -:  211:!dvm$ end region 
        -:  212:
        -:  213:!dvm$ redistribute A4(*,*,*,*)    
        -:  214:
        -:  215:!dvm$ actual(erri)
        -:  216:!dvm$ region 
        -:  217:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), reduction( min( erri ) )
        2:  218:      do i=1,AN1
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        4:  219:          do j=1,AN2
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        9:  220:            do n=1,AN3
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       32:  221:              do m=1,AN4
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       30:  222:                if (A4(i,j,n,m) .eq.(i*NL/10+j*NL/100+n*NL/1000+m)) then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  223:                else
    #####:  224:                    erri = min(erri,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  225:                endif 
        -:  226:              enddo
        -:  227:            enddo
        -:  228:          enddo
        -:  229:      enddo
        -:  230:!dvm$ end region 
        -:  231:     
        -:  232:!dvm$ get_actual(erri) 
        1:  233:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  234:          call ansyes(tname)
call    0 returned 100%
        -:  235:      else
    #####:  236:          call ansno(tname)
call    0 never executed
        -:  237:      endif 
       1*:  238:      deallocate (A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  239:
        1:  240:      end
        -:  241:C -------------------------------------------------
        -:  242:
function ansyes_ called 4 returned 100% blocks executed 100%
        4:  243:      subroutine ansyes(name)
        -:  244:      character*9 name
        4:  245:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4:  246:      end
        -:  247:
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  248:      subroutine ansno(name)
        -:  249:      character*9 name
    #####:  250:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  251:      end
