        -:    0:Source:results/4d/realign44/realign44.f
        -:    0:Graph:./results\4d\realign44\realign44.gcno
        -:    0:Data:./results\4d\realign44\realign44.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program REALIGN44
        -:    2:
        -:    3:c    Testing REALIGN directive
        -:    4:       
        1:    5:      print *,'===START OF realign44===================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C --------------------------------------------------
        -:    7:c 441 ALIGN arrB[i][j][n][m] WITH arrA[i][j][n][m]
        -:    8:c     REALIGN arrB[][j][k][] WITH arrA[j][k][1][3]
        1:    9:      call realign441
call    0 returned 100%
        -:   10:C -------------------------------------------------
        -:   11:c 442 ALIGN arrB[][j][n][i] WITH arrA[i][j][ ][n]
        -:   12:c     REALIGN arrB[i][j][ ][m] WITH arrA[i][j][2][m]
        1:   13:      call realign442
call    0 returned 100%
        -:   14:C --------------------------------------------------
        -:   15:c 443 ALIGN arrB[i][j][n][m] WITH arrA[i][2*j][3*n][4*m]
        -:   16:c     REALIGN arrB[i][j][n][m] WITH arrA[i+1][j+2][n+3][m+4]
        1:   17:      call realign443
call    0 returned 100%
        -:   18:C -------------------------------------------------
        -:   19:c 444 ALIGN arrB[i][j][n][m] WITH arrA[m][i+1][j][2*n]
        -:   20:c     REALIGN arrB[i][j][n][m] WITH arrA[i+2][3*j-2][2*n-2][m+1]
        1:   21:      call realign444
call    0 returned 100%
        -:   22:C -------------------------------------------------
        -:   23:C
        1:   24:      print *,'=== END OF realign44 ===================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   25:
function main called 1 returned 100% blocks executed 100%
        1:   26:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   27:
        -:   28:C ----------------------------------------------------realign441
        -:   29:c 441 ALIGN arrB[i][j][n][m] WITH arrA[i][j][n][m]
        -:   30:c     REALIGN arrB[][j][n][] WITH arrA[j][n][1][3]
        -:   31:
function realign441_ called 1 returned 100% blocks executed 92%
        1:   32:      subroutine realign441
        -:   33:      integer, parameter ::  AN1=6,AN2=8,AN3=5,AN4=7
        -:   34:      integer, parameter ::  BN1=2,BN2=5,BN3=4,BN4=3
        -:   35:      integer, parameter ::  NL=10000,ER=100000
        -:   36:c     parameters for ALIGN arrB[i][j][n][m] WITH arrA[k1i*i+li][k2j*j+lj][k3n*n+ln][k4m*m+lm]
        -:   37:      integer, parameter ::  k1i=1,li=0
        -:   38:      integer, parameter ::  k2j=1,lj=0
        -:   39:      integer, parameter ::  k3n=1,ln=0
        -:   40:      integer, parameter ::  k4m=1,lm=0
        -:   41:c     parameters for REALIGN arrB[*][j][n][*] WITH arrA[kr2j*j+lrj][kr3n*n+lrn][lri][lrm]
        -:   42:      integer, parameter ::  kr1i=0,lri=1
        -:   43:      integer, parameter ::  kr2j=1,lrj=0
        -:   44:      integer, parameter ::  kr3n=1,lrn=0
        -:   45:      integer, parameter ::  kr4m=0,lrm=3
        1:   46:      integer, allocatable :: A4(:,:,:,:),B4(:,:,:,:)
        -:   47:      integer :: s=0,cs,erria=ER, errib=ER,
        -:   48:     >           i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb
        -:   49:
        -:   50:      character(10) :: tname='realign441'
        -:   51:
        -:   52:!dvm$ distribute A4(BLOCK,BLOCK,BLOCK,BLOCK)    
        -:   53:!dvm$ ALIGN B4(i,j,n,m) WITH A4(k1i*i+li,k2j*j+lj,k3n*n+ln,k4m*m+lm)
        -:   54:!dvm$ DYNAMIC B4
        -:   55:
       1*:   56:      allocate (A4(AN1,AN2,AN3,AN4),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:   57:
        -:   58:!dvm$ region  out(A4,B4)
        -:   59:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m)
        3:   60:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       13:   61:          do j=1,BN2
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       52:   62:             do n=1,BN3
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      170:   63:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      160:   64:                    B4(i,j,n,m) = 0
        -:   65:                enddo
        -:   66:             enddo
        -:   67:          enddo 
        -:   68:      enddo
        -:   69:
        -:   70:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), private(ib,jb, nb, mb)
        7:   71:      do i=1,AN1
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
       55:   72:          do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
      294:   73:            do n=1,AN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
     1968:   74:              do m=1,AN4
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
     1680:   75:                A4(i,j,n,m) = i*NL/10+j*NL/100+n*NL/1000+m
        -:   76:                      if (
        -:   77:     *                  ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        -:   78:     *                  ((j-lj) .eq.(((j-lj)/k2j) * k2j)) .and.
        -:   79:     *                  ((n-ln) .eq.(((n-ln)/k3n) * k3n)) .and.
        -:   80:     *                  ((m-lm) .eq.(((m-lm)/k4m) * k4m)) .and.
        -:   81:     *                  (((i-li)/k1i) .gt. 0)  .and.
        -:   82:     *                  (((j-lj)/k2j) .gt. 0)  .and.
        -:   83:     *                  (((n-ln)/k3n) .gt. 0)  .and.
        -:   84:     *                  (((m-lm)/k4m) .gt. 0)  .and.
        -:   85:     *                  (((i-li)/k1i) .le. BN1)  .and.
        -:   86:     *                  (((j-lj)/k2j) .le. BN2)  .and.
     1680:   87:     *                  (((n-ln)/k3n) .le. BN3)  .and.
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
branch  2 taken 34% (fallthrough)
branch  3 taken 66%
        -:   88:     *                  (((m-lm)/k4m) .le. BN4)
      240:   89:     *                  )  then 
      120:   90:                        ib = (i-li)/k1i
      120:   91:                        jb = (j-lj)/k2j
      120:   92:                        nb = (n-ln)/k3n
      120:   93:                        mb = (m-lm)/k4m
      120:   94:                        B4(ib,jb,nb,mb)=ib*NL/10+jb*NL/100+nb*NL/1000+mb 
        -:   95:                      endif 
        -:   96:              enddo
        -:   97:            enddo
        -:   98:          enddo 
        -:   99:      enddo
        -:  100:!dvm$ end region
        -:  101:
        -:  102:!dvm$ REALIGN B4(*,j,n,*) WITH A4(kr2j*j+lrj,kr3n*n+lrn,lri,lrm)
        -:  103:
        -:  104:!dvm$ actual(erria, errib, s)
        -:  105:
        -:  106:!dvm$ region
        -:  107:
        -:  108:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m),
        -:  109:!dvm$*         reduction(min(erria),min(errib),sum(s)),
        -:  110:!dvm$*         private(ia,ja, na, ma)
        3:  111:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       13:  112:          do j=1,BN2
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       52:  113:            do n=1,BN3
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      170:  114:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      120:  115:                  s = s + B4(i,j,n,m)
      120:  116:                  if (B4(i,j,n,m)/= (i*NL/10+j*NL/100+n*NL/1000+m))then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  117:                    errib = min(errib,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  118:                  endif
      120:  119:                  ia=kr2j*j+lrj
      120:  120:                  ja=kr3n*n+lrn
      120:  121:                  na=lri
      120:  122:                  ma=lrm
      120:  123:                  if (A4(ia,ja,na,ma) /=
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       40:  124:     *              (ia*NL/10+ja*NL/100+na*NL/1000+ma))then     
    #####:  125:                     erria = min(erria,ia*NL/10+ja*NL/100+na*NL/1000+ma)
        -:  126:                  endif
        -:  127:                enddo
        -:  128:            enddo
        -:  129:          enddo 
        -:  130:      enddo
        -:  131:!dvm$ end region
        -:  132:  
        -:  133:      cs = 0
        3:  134:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       13:  135:          do j=1,BN2
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       52:  136:            do n=1,BN3
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      170:  137:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      160:  138:                    cs = cs + i*NL/10 + j*NL/100+ n*NL/1000+ m
        -:  139:                enddo
        -:  140:            enddo
        -:  141:          enddo
        -:  142:      enddo
        -:  143:     
        -:  144:!dvm$ get_actual(erria, errib, s)
        -:  145:
        1:  146:      if ((erria == ER) .and. (errib == ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  147:     *   (s == cs)) then     
        1:  148:         call ansyes(tname)
call    0 returned 100%
        -:  149:      else
    #####:  150:         call ansno(tname)
call    0 never executed
        -:  151:      endif 
        -:  152:
       1*:  153:      deallocate (B4,A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  154:
        1:  155:      end
        -:  156:
        -:  157:C ----------------------------------------------------realign442
        -:  158:c 442 ALIGN arrB[*][j][n][i] WITH arrA[i][j][*][n] 
        -:  159:c     REALIGN arrB[i][j][*][m] WITH arrA[i][j][2][m]  
        -:  160:
function realign442_ called 1 returned 100% blocks executed 92%
        1:  161:      subroutine realign442
        -:  162:      integer, parameter ::  AN1=5,AN2=5,AN3=5,AN4=5
        -:  163:      integer, parameter ::  BN1=2,BN2=2,BN3=2,BN4=2
        -:  164:      integer, parameter ::  NL=10000,ER=100000
        -:  165:c     parameters for ALIGN arrB[*][j][n][i] WITH arrA4(k1i*i+li,k2j*j+lj,*,k3m*n+lm)                                               
        -:  166:      integer, parameter ::  k1i=1, li=0
        -:  167:      integer, parameter ::  k2j=1, lj=0
        -:  168:      integer, parameter ::  k3n=0, ln=0
        -:  169:      integer, parameter ::  k3m=1, lm=0
        -:  170:c     parameters for REALIGN arrB[i][j][*][m] WITH arrA(kr1i*i+lri,kr2j*j+lrj,lrn,kr4m*m+lrm)                                               
        -:  171:      integer, parameter ::  kr1i=1, lri=0
        -:  172:      integer, parameter ::  kr2j=1, lrj=0
        -:  173:      integer, parameter ::  kr3n=0, lrn=2
        -:  174:      integer, parameter ::  kr4m=1, lrm=0
        1:  175:      integer, allocatable :: A4(:,:,:,:),B4(:,:,:,:)
        -:  176:      integer :: s=0,cs,erria=ER, errib=ER,
        -:  177:     >           i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb
        -:  178:      character(10) :: tname='realign442'
        -:  179:               
        -:  180:!dvm$ distribute A4(BLOCK,BLOCK,BLOCK,BLOCK)    
        -:  181:!dvm$ ALIGN B4(*,j,n,i) WITH A4(k1i*i+li,k2j*j+lj,*,k3m*n+lm)
        -:  182:!dvm$ DYNAMIC B4
        -:  183:
       1*:  184:      allocate (A4(AN1,AN2,AN3,AN4),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  185:
        -:  186:!dvm$ region inout(A4, B4)
        -:  187:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m)
        3:  188:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        7:  189:          do j=1,BN2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:  190:             do n=1,BN3
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       28:  191:                do m=1,BN4
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       24:  192:                    B4(i,j,n,m) = 0     
        -:  193:                enddo
        -:  194:             enddo
        -:  195:          enddo 
        -:  196:      enddo
        -:  197:
        -:  198:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), private(ib,jb, nb, mb,k)
        6:  199:      do i=1,AN1
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       31:  200:          do j=1,AN2
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      155:  201:            do n=1,AN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      775:  202:              do m=1,AN4
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      625:  203:                A4(i,j,n,m) = i*NL/10+j*NL/100+n*NL/1000+m
     2000:  204:                    do k = 1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  205:                      if ( 
        -:  206:     *                  ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        -:  207:     *                  ((j-lj) .eq.(((j-lj)/k2j) *k2j)) .and.
        -:  208:     *                  ((m-lm) .eq.(((m-lm)/k3m) *k3m)) .and.
        -:  209:     *                  (((i-li)/k1i) .gt. 0)  .and.
        -:  210:     *                  (((j-lj)/k2j) .gt. 0)  .and.
        -:  211:     *                  (((m-lm)/k3m) .gt. 0)  .and.
        -:  212:     *                  (((i-li)/k1i) .le. BN4)  .and.
     1250:  213:     *                  (((j-lj)/k2j) .le. BN2)  .and.
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 16% (fallthrough)
branch  3 taken 84%
        -:  214:     *                  (((m-lm)/k3m) .le. BN3)
      625:  215:     *                  )  then 
       80:  216:                        mb = (i-li)/k1i
       80:  217:                        jb = (j-lj)/k2j
       80:  218:                        ib = k
       80:  219:                        nb = (m-lm)/k3m
       80:  220:                        B4(ib,jb,nb,mb)=ib*NL/10+jb*NL/100+nb*NL/1000+mb 
        -:  221:                      endif 
        -:  222:                   enddo
        -:  223:              enddo
        -:  224:            enddo
        -:  225:          enddo 
        -:  226:      enddo
        -:  227:!dvm$ end region
        -:  228:
        -:  229:!dvm$ REALIGN B4(i,j,*,m) WITH A4(kr1i*i+lri,kr2j*j+lrj,lrn,kr4m*m+lrm)
        -:  230:
        -:  231:!dvm$ actual(erria, errib, s)
        -:  232:
        -:  233:!dvm$ region
        -:  234:
        -:  235:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m), 
        -:  236:!dvm$*         reduction(min(erria),min(errib),sum(s)),
        -:  237:!dvm$*         private(ia,ja,na,ma)
        3:  238:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        7:  239:        do j=1,BN2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:  240:          do n=1,BN3
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       28:  241:            do m=1,BN4
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       16:  242:                s = s + B4(i,j,n,m)
       16:  243:                if (B4(i,j,n,m) /= (i*NL/10+j*NL/100+n*NL/1000+m)) then
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  244:                   errib = min(errib,i*NL/10 + j*NL/100+ n*NL/1000+ m)
        -:  245:                endif
       16:  246:                ia=kr1i*i+lri
       16:  247:                ja=kr2j*j+lrj
       16:  248:                na=lrn
       16:  249:                ma=kr4m*m+lrm
       16:  250:                if (A4(ia,ja,na,ma) /=
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        8:  251:     *             (ia*NL/10+ja*NL/100+na*NL/1000+ma)) then
    #####:  252:                    erria = min(erria,i*NL/10 + j*NL/100+ n*NL/1000+ m)
        -:  253:                endif
        -:  254:              enddo
        -:  255:          enddo
        -:  256:        enddo 
        -:  257:      enddo
        -:  258:!dvm$ end region
        -:  259:  
        -:  260:      cs = 0              
        3:  261:      do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        7:  262:          do j=1,BN2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:  263:            do n=1,BN3
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       28:  264:                do m=1,BN4
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       24:  265:                    cs = cs + i*NL/10 + j*NL/100+ n*NL/1000+ m
        -:  266:                enddo
        -:  267:            enddo
        -:  268:          enddo
        -:  269:      enddo
        -:  270:     
        -:  271:!dvm$ get_actual(erria, errib, s)
        -:  272:
        1:  273:      if ((erria == ER) .and. (errib == ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  274:     *     (s == cs)) then     
        1:  275:          call ansyes(tname)
call    0 returned 100%
        -:  276:      else
    #####:  277:          call ansno(tname)
call    0 never executed
        -:  278:      endif 
        -:  279:
       1*:  280:      deallocate (B4,A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  281:
        1:  282:      end
        -:  283:
        -:  284:C ----------------------------------------------------realign443
        -:  285:c 443 ALIGN arrB[i][j][n][m] WITH arrA[i][2*j][3*n][4*m]    
        -:  286:c     REALIGN arrB[i][j][n][m] WITH arrA[i+1][j+2][n+3][m+4] 
        -:  287:
function realign443_ called 1 returned 100% blocks executed 92%
        1:  288:      subroutine realign443
        -:  289:      integer, parameter ::  AN1=10,AN2=8,AN3=15,AN4=12
        -:  290:      integer, parameter ::  BN1=4,BN2=3,BN3=5,BN4=3
        -:  291:      integer, parameter ::  NL=10000,ER=100000
        -:  292:c     parameters for ALIGN arrB[i][j][n][m] WITH arrA[k1i*i+li][k2j*j+lj][k3n*n+ln][k4m*m+lm]
        -:  293:      integer, parameter ::  k1i=1,li=0
        -:  294:      integer, parameter ::  k2j=2,lj=0
        -:  295:      integer, parameter ::  k3n=3,ln=0
        -:  296:      integer, parameter ::  k4m=4,lm=0
        -:  297:c     parameters for REALIGN arrB[i][j][n][m] WITH arrA[kr1i*i+lri][kr2j*j+lrj][kr3n*n+lrn][kr4m*m+lrm]
        -:  298:      integer, parameter ::  kr1i=1,lri=1
        -:  299:      integer, parameter ::  kr2j=1,lrj=2
        -:  300:      integer, parameter ::  kr3n=1,lrn=3
        -:  301:      integer, parameter ::  kr4m=1,lrm=4
        -:  302:
        1:  303:      integer, allocatable :: A4(:,:,:,:),B4(:,:,:,:)
        -:  304:      integer :: s=0,cs,erria=ER, errib=ER,
        -:  305:     >           i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb
        -:  306:
        -:  307:      character(10) :: tname='realign443'
        -:  308:
        -:  309:               
        -:  310:!dvm$ distribute A4(BLOCK,BLOCK,BLOCK,BLOCK)    
        -:  311:!dvm$ ALIGN B4(i,j,n,m) WITH A4(k1i*i+li,k2j*j+lj,k3n*n+ln,k4m*m+lm)
        -:  312:!dvm$ DYNAMIC B4
        -:  313:
       1*:  314:      allocate (A4(AN1,AN2,AN3,AN4),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  315:
        -:  316:!dvm$ region  out(A4,B4)
        -:  317:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m)
        5:  318:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       17:  319:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       76:  320:             do n=1,BN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      252:  321:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      240:  322:                    B4(i,j,n,m) = 5     
        -:  323:                enddo
        -:  324:             enddo
        -:  325:          enddo 
        -:  326:      enddo
        -:  327:
        -:  328:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), private(ib,jb, nb, mb)
       11:  329:      do i=1,AN1
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       91:  330:         do j=1,AN2
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
     1290:  331:            do n=1,AN3
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    15680:  332:               do m=1,AN4
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
    14400:  333:                  A4(i,j,n,m) = i*NL/10+j*NL/100+n*NL/1000+m+1
        -:  334:                      if ( 
        -:  335:     *                  ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        -:  336:     *                  ((j-lj) .eq.(((j-lj)/k2j) * k2j)) .and.
        -:  337:     *                  ((n-ln) .eq.(((n-ln)/k3n) * k3n)) .and.
        -:  338:     *                  ((m-lm) .eq.(((m-lm)/k4m) * k4m)) .and.
        -:  339:     *                  (((i-li)/k1i) .gt. 0)  .and.
        -:  340:     *                  (((j-lj)/k2j) .gt. 0)  .and.
        -:  341:     *                  (((n-ln)/k3n) .gt. 0)  .and.
        -:  342:     *                  (((m-lm)/k4m) .gt. 0)  .and.
        -:  343:     *                  (((i-li)/k1i) .le. BN1)  .and.
        -:  344:     *                  (((j-lj)/k2j) .le. BN2)  .and.
    14400:  345:     *                  (((n-ln)/k3n) .le. BN3)  .and.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 30% (fallthrough)
branch  9 taken 70%
        -:  346:     *                  (((m-lm)/k4m) .le. BN4)
     1200:  347:     *                  )  then 
      180:  348:                        ib = (i-li)/k1i
      180:  349:                        jb = (j-lj)/k2j
      180:  350:                        nb = (n-ln)/k3n
      180:  351:                        mb = (m-lm)/k4m
        -:  352:                        B4(ib,jb,nb,mb)=B4(ib,jb,nb,mb)+
      180:  353:     *                               ib*NL/10+jb*NL/100+nb*NL/1000+mb 
        -:  354:                      endif 
        -:  355:                enddo
        -:  356:             enddo
        -:  357:          enddo 
        -:  358:      enddo
        -:  359:!dvm$ end region
        -:  360:
        -:  361:!dvm$ REALIGN B4(i,j,n,m)
        -:  362:!dvm$*   WITH A4(kr1i*i+lri,kr2j*j+lrj,kr3n*n+lrn,kr4m*m+lrm)
        -:  363:
        -:  364:!dvm$ actual(erria, errib, s)
        -:  365:
        -:  366:!dvm$ region
        -:  367:
        -:  368:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m),
        -:  369:!dvm$*         reduction(min(erria),min(errib),sum(s)),
        -:  370:!dvm$*         private(ia,ja, na, ma)
        5:  371:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       17:  372:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       76:  373:            do n=1,BN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      252:  374:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      180:  375:                  s = s + B4(i,j,n,m)
      180:  376:                  if (B4(i,j,n,m)/= (i*NL/10+j*NL/100+n*NL/1000+m+5))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  377:     *            then     
    #####:  378:                    errib = min(errib,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  379:                  endif
      180:  380:                  ia=kr1i*i+lri
      180:  381:                  ja=kr2j*j+lrj
      180:  382:                  na=kr3n*n+lrn
      180:  383:                  ma=kr4m*m+lrm
      180:  384:                  if (A4(ia,ja,na,ma) /=
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       60:  385:     *               (ia*NL/10+ja*NL/100+na*NL/1000+ma+1)) then     
    #####:  386:                      erria = min(erria,i*NL/10+j*NL/100+n*NL/1000+m)
        -:  387:                  endif
        -:  388:                enddo
        -:  389:            enddo
        -:  390:          enddo 
        -:  391:      enddo
        -:  392:!dvm$ end region
        -:  393:  
        -:  394:      cs = 0              
        5:  395:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       17:  396:          do j=1,BN2
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       76:  397:            do n=1,BN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      252:  398:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      240:  399:                    cs = cs + i*NL/10 + j*NL/100+ n*NL/1000 + m + 5
        -:  400:                enddo
        -:  401:            enddo
        -:  402:          enddo
        -:  403:      enddo
        -:  404:     
        -:  405:!dvm$ get_actual(erria, errib, s)
        -:  406:
        1:  407:      if ((erria == ER) .and. (errib == ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  408:     *     (s == cs)) then     
        1:  409:          call ansyes(tname)
call    0 returned 100%
        -:  410:      else
    #####:  411:          call ansno(tname)
call    0 never executed
        -:  412:      endif 
        -:  413:
       1*:  414:      deallocate (B4,A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  415:
        1:  416:      end
        -:  417:
        -:  418:C ----------------------------------------------------realign444
        -:  419:c 444 ALIGN arrB[i][j][n][m] WITH arrA[m][i+1][j][2*n] 
        -:  420:c     REALIGN arrB[i][j][n][m] WITH arrA[i+2][3*j-2][2*n-2][m+1]  
        -:  421:
function realign444_ called 1 returned 100% blocks executed 92%
        1:  422:      subroutine realign444
        -:  423:      integer, parameter ::  AN1=12,AN2=15,AN3=16,AN4=10
        -:  424:      integer, parameter ::  BN1=4,BN2=4,BN3=5,BN4=3
        -:  425:      integer, parameter ::  NL=10000,ER=100000
        -:  426:c     parameters for ALIGN arrB[i][j][n][m] WITH arrA4(k4m*m+lm,k1i*i+li,k2j*j+lj,k3n*n+ln)
        -:  427:      integer, parameter ::  k1i=1, li=1
        -:  428:      integer, parameter ::  k2j=1, lj=0
        -:  429:      integer, parameter ::  k3n=2, ln=0
        -:  430:      integer, parameter ::  k4m=1, lm=0
        -:  431:c     parameters for REALIGN arrB[i][j][n][m] WITH arrA(kr1i*i+lri,kr2j*j+lrj,k3n*n+lrn,kr4m*m+lrm)
        -:  432:      integer, parameter ::  kr1i=1, lri=2
        -:  433:      integer, parameter ::  kr2j=3, lrj=-2
        -:  434:      integer, parameter ::  kr3n=2, lrn=-1
        -:  435:      integer, parameter ::  kr4m=1, lrm=1
        -:  436:
        1:  437:      integer, allocatable :: A4(:,:,:,:),B4(:,:,:,:)
        -:  438:      integer :: s=0,cs,erria=ER, errib=ER,
        -:  439:     >           i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb
        -:  440:      character(10) :: tname='realign444'
        -:  441:               
        -:  442:!dvm$ distribute A4(BLOCK,BLOCK,BLOCK,BLOCK)    
        -:  443:!dvm$ ALIGN B4(i,j,n,m) WITH A4(k4m*m+lm,k1i*i+li,k2j*j+lj,k3n*n+ln)
        -:  444:!dvm$ DYNAMIC B4
        -:  445:
       1*:  446:      allocate (A4(AN1,AN2,AN3,AN4),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        -:  447:
        -:  448:!dvm$ region inout(A4, B4)
        -:  449:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m)
        5:  450:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:  451:          do j=1,BN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      100:  452:             do n=1,BN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      336:  453:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      320:  454:                    B4(i,j,n,m) = 4     
        -:  455:                enddo
        -:  456:             enddo
        -:  457:          enddo 
        -:  458:      enddo
        -:  459:
        -:  460:!dvm$ parallel (i,j,n,m) on A4(i,j,n,m), private(ib, jb, nb, mb)
       13:  461:      do i=1,AN1
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
      193:  462:          do j=1,AN2
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
     3072:  463:            do n=1,AN3
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
    31860:  464:              do m=1,AN4
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
    28800:  465:                A4(i,j,n,m) = 10+i*NL/10+j*NL/100+n*NL/1000+m
        -:  466:                  if ( 
        -:  467:     *               ((i-lm) == (((i-lm)/k4m) * k4m)) .and.
        -:  468:     *               ((j-li) == (((j-li)/k1i) * k1i)) .and.
        -:  469:     *               ((n-lj) == (((n-lj)/k2j) * k2j)) .and.
        -:  470:     *               ((m-ln) == (((m-ln)/k3n) * k3n)) .and.
        -:  471:     *               (((i-lm)/k4m) > 0) .and.
        -:  472:     *               (((j-li)/k1i) > 0) .and.
        -:  473:     *               (((n-lj)/k2j) > 0) .and.
        -:  474:     *               (((m-ln)/k3n) > 0) .and.
        -:  475:     *               (((i-lm)/k4m) <= BN4) .and.
        -:  476:     *               (((j-li)/k1i) <= BN1) .and.
    28800:  477:     *               (((n-lj)/k2j) <= BN2) .and.
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 93% (fallthrough)
branch  3 taken 7%
branch  4 taken 7% (fallthrough)
branch  5 taken 93%
branch  6 taken 25% (fallthrough)
branch  7 taken 75%
        -:  478:     *               (((m-ln)/k3n) <= BN3) 
     2880:  479:     *               ) then
      240:  480:                        ib = (j-li)/k1i
      240:  481:                        jb = (n-lj)/k2j
      240:  482:                        nb = (m-ln)/k3n
      240:  483:                        mb = (i-lm)/k4m
        -:  484:                        B4(ib,jb,nb,mb) = B4(ib,jb,nb,mb) +
      240:  485:     *                          ib*NL/10+jb*NL/100+nb*NL/1000+mb;
        -:  486:                      endif
        -:  487:                enddo
        -:  488:             enddo
        -:  489:          enddo 
        -:  490:      enddo
        -:  491:!dvm$ end region
        -:  492:
        -:  493:!dvm$ REALIGN B4(i,j,n,m)
        -:  494:!dvm$*        WITH A4(kr1i*i+lri,kr2j*j+lrj,kr3n*n+lrn,kr4m*m+lrm)
        -:  495:
        -:  496:!dvm$ actual(erria, errib, s)
        -:  497:
        -:  498:!dvm$ region
        -:  499:
        -:  500:!dvm$ parallel (i,j,n,m) on B4(i,j,n,m), 
        -:  501:!dvm$*         reduction(min(erria),min(errib),sum(s)),
        -:  502:!dvm$*         private(ia,ja,na,ma)
        5:  503:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:  504:        do j=1,BN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      100:  505:          do n=1,BN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      336:  506:            do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      240:  507:                s = s + B4(i,j,n,m)
      240:  508:                if (B4(i,j,n,m) /= (i*NL/10+j*NL/100+n*NL/1000+m+4))then     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  509:                   errib = min(errib,i*NL/10 + j*NL/100+ n*NL/1000 + m)
        -:  510:                endif
      240:  511:                ia=kr1i*i+lri;
      240:  512:                ja=kr2j*j+lrj;
      240:  513:                na=kr3n*n+lrn;
      240:  514:                ma=kr4m*m+lrm;
      240:  515:                if (A4(ia,ja,na,ma) /=
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
       80:  516:     *             (ia*NL/10+ja*NL/100+na*NL/1000+ma+10))then     
    #####:  517:                    erria = min(erria,i*NL/10 + j*NL/100+ n*NL/1000+ m)
        -:  518:                endif
        -:  519:              enddo
        -:  520:          enddo
        -:  521:        enddo 
        -:  522:      enddo
        -:  523:!dvm$ end region
        -:  524:  
        -:  525:      cs = 0              
        5:  526:      do i=1,BN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:  527:          do j=1,BN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      100:  528:            do n=1,BN3
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
      336:  529:                do m=1,BN4
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
      320:  530:                    cs = cs + i*NL/10 + j*NL/100+ n*NL/1000+ m + 4
        -:  531:                enddo
        -:  532:            enddo
        -:  533:          enddo
        -:  534:      enddo
        -:  535:     
        -:  536:!dvm$ get_actual(erria, errib, s)
        -:  537:
        1:  538:      if ((erria == ER) .and. (errib == ER) .and.
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  539:     *     (s == cs)) then     
        1:  540:          call ansyes(tname)
call    0 returned 100%
        -:  541:      else
    #####:  542:          call ansno(tname)
call    0 never executed
        -:  543:      endif 
        -:  544:
       1*:  545:      deallocate (B4,A4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  546:
        1:  547:      end
        -:  548:
        -:  549:C -------------------------------------------------
function ansyes_ called 4 returned 100% blocks executed 100%
        4:  550:      subroutine ansyes(name)
        -:  551:      character(*) name
        4:  552:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        4:  553:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  554:      subroutine ansno(name)
        -:  555:      character(*) name
    #####:  556:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  557:      end
