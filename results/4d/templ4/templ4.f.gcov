        -:    0:Source:results/4d/templ4/templ4.f
        -:    0:Graph:./results\4d\templ4\templ4.gcno
        -:    0:Data:./results\4d\templ4\templ4.gcda
        -:    0:Runs:1
function MAIN__ called 1 returned 100% blocks executed 100%
        1:    1:      program TEMPL4
        -:    2:
        -:    3:c    TESTING template CLAUSE .       
        -:    4:
        1:    5:      print *,'===START OF templ4======================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:    6:C --------------------------------------------------
        -:    7:c 441 TEMPLATE arrA4[BLOCK][BLOCK][BLOCK][BLOCK]
        -:    8:c                     arrB[i][j][k][l] WITH arrA[i+2][ j][k][ l+3] 
        -:    9:c                     ALIGN arrC[i][j] WITH arrA[i+2][2][3][ l+3] 
        1:   10:      call templ441
call    0 returned 100%
        -:   11:C --------------------------------------------------
        -:   12:c 442 TEMPLATE arrA1[BLOCK][BLOCK][BLOCK][BLOCK]
        -:   13:c                     ALIGN arrB[i][j][k][l] WITH  arrA[l][i][j][k] 
        -:   14:c                     ALIGN arrC[i][j][k][l] WITH [i+2][ j][k][ l+3] 
        1:   15:      call templ442
call    0 returned 100%
        -:   16:C --------------------------------------------------
        1:   17:      print *,'=== END OF templ4 ======================='
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
function main called 1 returned 100% blocks executed 100%
        1:   18:      end
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   19:
        -:   20:C ----------------------------------------------------templ441
        -:   21:c 441 TEMPLATE arrA4[BLOCK][BLOCK][BLOCK][BLOCK]
        -:   22:c                     arrB[i][j][k][l] WITH arrA[i+2][ j][k][ l+3] 
        -:   23:c                     ALIGN arrC[i][j] WITH arrA[i+2][2][3][ l+3] 
function templ441_ called 1 returned 100% blocks executed 90%
        1:   24:      subroutine templ441
        -:   25:      integer, parameter :: AN1=7,AN2=7,AN3=7,AN4=7
        -:   26:      integer, parameter :: BN1=2,BN2=2,BN3=2,BN4=2
        -:   27:      integer, parameter :: CN1=4,CN2=4
        -:   28:      integer, parameter :: NL=10000,ER=100000
        -:   29:
        -:   30:c     parameters for ALIGN arrB[i][j][n][m] WITH arrA4(k1i*i+li,k2j*j+lj,k3n*n+ln,k4m*m+lm)                                               
        -:   31:      integer, parameter :: k1i=1,k2i=0,k3i=0,k4i=0,li=2
        -:   32:      integer, parameter :: k1j=0,k2j=1,k3j=0,k4j=0,lj=0
        -:   33:      integer, parameter :: k1n=0,k2n=0,k3n=1,k4n=0,ln=0
        -:   34:      integer, parameter :: k1m=0,k2m=0,k3m=0,k4m=1,lm=3
        -:   35:c     parameters for ALIGN arrC[i][j] WITH arrA4(kc1i*i+lci,lcj,lcn,kc2m*j+lcm)                                               
        -:   36:      integer, parameter :: kc1i=1,kc2i=0,kc3i=0,kc4i=0,lci=2
        -:   37:      integer, parameter :: kc1j=0,kc2j=0,kc3j=0,kc4j=0,lcj=2
        -:   38:      integer, parameter :: kc1n=0,kc2n=0,kc3n=0,kc4n=0,lcn=3
        -:   39:      integer, parameter :: kc1m=0,kc2m=1,kc3m=0,kc4m=0,lcm=3
        -:   40:
        -:   41:      character*9 tname
        1:   42:      integer, allocatable :: C2(:,:), B4(:,:,:,:)
        -:   43:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,ic,jc,nc,mc
        -:   44:
        -:   45:cdvm$ template A4(AN1,AN2,AN3,AN4)              
        -:   46:cdvm$ ALIGN B4(i,j,n,m) WITH A4(k1i*i+li,k2j*j+lj,k3n*n+ln,k4m*m+lm)
        -:   47:cdvm$ ALIGN C2(i,j) WITH A4(kc1i*i+lci,lcj,lcn,kc2m*j+lcm)
        -:   48:cdvm$ distribute A4(BLOCK,BLOCK,BLOCK,BLOCK)    
        -:   49:
        1:   50:      tname='templ441'
       1*:   51:      allocate (C2(CN1,CN2),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        3:   52:      erri= ER
        -:   53:      NNL=NL 
        -:   54:!dvm$ actual (erri)
        -:   55:!dvm$ region
        -:   56:
        -:   57:
        -:   58:*dvm$ parallel (m,n,j,i) on B4(i,j,n,m)
        3:   59:      do m=1,BN4
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        7:   60:          do n=1,BN3
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:   61:             do j=1,BN2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       28:   62:                do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       24:   63:                    B4(i,j,n,m) =(i*NL/10+j*NL/100+n*NL/1000+m)     
        -:   64:                enddo
        -:   65:             enddo
        -:   66:          enddo
        -:   67:      enddo
        -:   68:
        -:   69:*dvm$ parallel (j,i) on C2(i,j)
        5:   70:      do j=1,CN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:   71:          do i=1,CN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       20:   72:            C2(i,j) =(i*NL+j)     
        -:   73:          enddo
        -:   74:      enddo
        -:   75:
        -:   76:*dvm$  parallel (m,n,j,i) on A4(i,j,n,m),private(ib,jb,nb,mb,ic,jc,erri)
        8:   77:       do m=1,AN4
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
       57:   78:          do n=1,AN3
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
      399:   79:            do j=1,AN2
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
     2793:   80:              do i=1,AN1
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
        -:   81:                      if ( 
        -:   82:     *                  ((i-li) .eq.(((i-li)/k1i) * k1i)) .and.
        -:   83:     *                  ((j-lj) .eq.(((j-lj)/k2j) *k2j)) .and.
        -:   84:     *                  ((n-ln) .eq.(((n-ln)/k3n) * k3n)) .and.
        -:   85:     *                  ((m-lm) .eq.(((m-lm)/k4m) *k4m)) .and.
        -:   86:     *                  (((i-li)/k1i) .gt. 0)  .and.
        -:   87:     *                  (((j-lj)/k2j) .gt. 0)  .and.
        -:   88:     *                  (((n-ln)/k3n) .gt. 0)  .and.
        -:   89:     *                  (((m-lm)/k4m) .gt. 0)  .and.
        -:   90:     *                  (((i-li)/k1i) .le. BN1)  .and.
        -:   91:     *                  (((j-lj)/k2j) .le. BN2)  .and.
     2401:   92:     *                  (((n-ln)/k3n) .le. BN3)  .and.
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
branch  4 taken 11% (fallthrough)
branch  5 taken 89%
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
        -:   93:     *                  (((m-lm)/k4m) .le. BN4)
        -:   94:     *                  )  then 
       16:   95:                        ib = (i-li)/k1i
       16:   96:                        jb = (j-lj)/k2j
       16:   97:                        nb = (n-ln)/k3n
       16:   98:                        mb = (m-lm)/k4m
       16:   99:                        if  (B4(ib,jb,nb,mb).eq.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  100:     *                      (ib*NL/10+jb*NL/100+nb*NL/1000+mb))then     
        -:  101:                        else
    #####:  102:                            erri = i*NL/10 + j*NL/100+ n*NL/1000+ m
        -:  103:                        endif
        -:  104:                      endif 
        -:  105:             if (
        -:  106:     *          (j .eq. lcj) .and. (n .eq. lcn) .and.
        -:  107:     *          ((i-lci) .eq.(((i-lci)/kc1i) * kc1i)) .and.
        -:  108:     *          ((m-lcm) .eq.(((m-lcm)/kc2m) *kc2m)) .and.
        -:  109:     *          (((i-lci)/kc1i) .gt. 0)  .and.
        -:  110:     *          (((m-lcm)/kc2m) .gt. 0)  .and.
     2401:  111:     *          (((i-lci)/kc1i) .le. CN1)  .and.
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 59%
branch  3 taken 41% (fallthrough)
branch  4 taken 20%
branch  5 taken 80% (fallthrough)
      343:  112:     *          (((m-lcm)/kc2m) .le. CN2))  then 
       16:  113:                ic = (i-lci)/kc1i
       16:  114:                jc = (m-lcm)/kc2m  
       16:  115:                if (C2(ic,jc) .eq.(ic*NL+jc)) then     
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  116:                else
     2401:  117:                    erri = i
        -:  118:                endif
        -:  119:             endif 
        -:  120:              enddo
        -:  121:            enddo
        -:  122:          enddo
        -:  123:      enddo
        -:  124:
        -:  125:!dvm$ end region
        -:  126:!dvm$ get_actual (erri)
        -:  127:
        1:  128:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  129:          call ansyes(tname)
call    0 returned 100%
        -:  130:      else
    #####:  131:          call ansno(tname)
call    0 never executed
        -:  132:      endif 
       1*:  133:      deallocate (C2,B4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  134:
        1:  135:      end
        -:  136:C ----------------------------------------------------templ442
        -:  137:c 442 TEMPLATE arrA1[BLOCK][BLOCK][BLOCK][BLOCK]
        -:  138:c                     ALIGN arrB[i][j][k][l] WITH  arrA[l][i][j][k] 
        -:  139:c                     ALIGN arrC[i][j][k][l] WITH [i+2][ j][k][ l+3] 
        -:  140:    
function templ442_ called 1 returned 100% blocks executed 90%
        1:  141:      subroutine templ442
        -:  142:      integer, parameter :: AN1=7,AN2=7,AN3=7,AN4=7
        -:  143:      integer, parameter :: BN1=2,BN2=2,BN3=2,BN4=2
        -:  144:      integer, parameter :: CN1=4,CN2=4,CN3=4,CN4=4
        -:  145:      integer, parameter :: NL=10000,ER=100000
        -:  146:c     parameters for ALIGN arrB[i][j][n][m] WITH arrA4(k4i*m+li,k1j*i+lj,k2n*j+ln,k3m*n+lm)                                              
        -:  147:      integer, parameter :: k1i=0,k2i=0,k3i=0,k4i=1,li=0
        -:  148:      integer, parameter :: k1j=1,k2j=0,k3j=0,k4j=0,lj=0
        -:  149:      integer, parameter :: k1n=0,k2n=1,k3n=0,k4n=0,ln=0
        -:  150:      integer, parameter :: k1m=0,k2m=0,k3m=1,k4m=0,lm=0
        -:  151:c     parameters for ALIGN arrC[i][j][n][m] WITH arrA4(kc1i*i+lci,kc2j*j+lcj,kc3n*n+lcn,kc4m*m+lcm)                                               
        -:  152:      integer, parameter :: kc1i=1,kc2i=0,kc3i=0,kc4i=0,lci=2
        -:  153:      integer, parameter :: kc1j=0,kc2j=1,kc3j=0,kc4j=0,lcj=0
        -:  154:      integer, parameter :: kc1n=0,kc2n=0,kc3n=1,kc4n=0,lcn=0
        -:  155:      integer, parameter :: kc1m=0,kc2m=0,kc3m=0,kc4m=1,lcm=3
        -:  156:
        -:  157:      character*9 tname
        1:  158:      integer, allocatable :: C4(:,:,:,:),B4(:,:,:,:)
        -:  159:      integer s,cs,erri,i,j,n,m,ia,ja,na,ma,ib,jb,nb,mb,ic,jc,nc,mc
        -:  160:cdvm$ template A4(AN1,AN2,AN3,AN4)              
        -:  161:cdvm$ ALIGN B4(i,j,n,m) WITH A4(k4i*m+li,k1j*i+lj,k2n*j+ln,k3m*n+lm)
        -:  162:cdvm$ ALIGN C4(i,j,n,m) WITH A4(kc1i*i+lci,kc2j*j+lcj,
        -:  163:cdvm$*kc3n*n+lcn,kc4m*m+lcm)
        -:  164:cdvm$ distribute A4(BLOCK,BLOCK,BLOCK,BLOCK)    
        -:  165:
        1:  166:      tname='templ442'
       1*:  167:      allocate (C4(CN1,CN2,CN3,CN4),B4(BN1,BN2,BN3,BN4))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 never executed
        3:  168:      erri= ER
        -:  169:      NNL=NL 
        -:  170:
        -:  171:!dvm$ actual (erri)
        -:  172:!dvm$ region
        -:  173:
        -:  174:*dvm$ parallel (m,n,j,i) on B4(i,j,n,m)
        3:  175:      do m=1,BN4
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        7:  176:          do n=1,BN3
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       14:  177:             do j=1,BN2
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       28:  178:                do i=1,BN1
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       24:  179:                    B4(i,j,n,m) =(i*NL/10+j*NL/100+n*NL/1000+m)     
        -:  180:                enddo
        -:  181:             enddo
        -:  182:          enddo
        -:  183:      enddo
        -:  184:
        -:  185:*dvm$ parallel (m,n,j,i) on C4(i,j,n,m)
        5:  186:      do m=1,CN4
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       21:  187:          do n=1,CN3
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       84:  188:             do j=1,CN2
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      336:  189:                do i=1,CN1
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
      320:  190:                    C4(i,j,n,m) =(i*NL/10+j*NL/100+n*NL/1000+m)     
        -:  191:                enddo
        -:  192:             enddo
        -:  193:          enddo
        -:  194:      enddo
        -:  195:
        -:  196:*dvm$ parallel (m,n,j,i) on A4(i,j,n,m),
        -:  197:*dvm$*private(ib,jb,nb,mb,ic,jc,nc,mc,erri)
        8:  198:      do m=1,AN4
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
       57:  199:          do n=1,AN3
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
      399:  200:            do j=1,AN2
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
     2793:  201:              do i=1,AN1
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
        -:  202:                      if ( 
        -:  203:     *                  ((i-li) .eq.(((i-li)/k4i) * k4i)) .and.
        -:  204:     *                  ((j-lj) .eq.(((j-lj)/k1j) *k1j)) .and.
        -:  205:     *                  ((n-ln) .eq.(((n-ln)/k2n) * k2n)) .and.
        -:  206:     *                  ((m-lm) .eq.(((m-lm)/k3m) *k3m)) .and.
        -:  207:     *                  (((i-li)/k4i) .gt. 0)  .and.
        -:  208:     *                  (((j-lj)/k1j) .gt. 0)  .and.
        -:  209:     *                  (((n-ln)/k2n) .gt. 0)  .and.
        -:  210:     *                  (((m-lm)/k3m) .gt. 0)  .and.
        -:  211:     *                  (((i-li)/k4i) .le. BN4)  .and.
        -:  212:     *                  (((j-lj)/k1j) .le. BN1)  .and.
     2401:  213:     *                  (((n-ln)/k2n) .le. BN2)  .and.
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  214:     *                  (((m-lm)/k3m) .le. BN3)
        -:  215:     *                  )  then 
       16:  216:                        mb = (i-li)/k4i
       16:  217:                        ib = (j-lj)/k1j
       16:  218:                        jb = (n-ln)/k2n
       16:  219:                        nb = (m-lm)/k3m
       16:  220:                        if  (B4(ib,jb,nb,mb).eq.
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  221:     *                      (ib*NL/10+jb*NL/100+nb*NL/1000+mb))then     
        -:  222:                        else
    #####:  223:                            erri = i*NL/10 + j*NL/100+ n*NL/1000+ m
        -:  224:                        endif
        -:  225:                      endif 
        -:  226:                      if ( 
        -:  227:     *                  ((i-lci) .eq.(((i-lci)/kc1i) * kc1i)) .and.
        -:  228:     *                  ((j-lcj) .eq.(((j-lcj)/kc2j) *kc2j)) .and.
        -:  229:     *                  ((n-lcn) .eq.(((n-lcn)/kc3n) * kc3n)) .and.
        -:  230:     *                  ((m-lcm) .eq.(((m-lcm)/kc4m) *kc4m)) .and.
        -:  231:     *                  (((i-lci)/kc1i) .gt. 0)  .and.
        -:  232:     *                  (((j-lcj)/kc2j) .gt. 0)  .and.
        -:  233:     *                  (((n-lcn)/kc3n) .gt. 0)  .and.
        -:  234:     *                  (((m-lcm)/kc4m) .gt. 0)  .and.
        -:  235:     *                  (((i-lci)/kc1i) .le. BN1)  .and.
        -:  236:     *                  (((j-lcj)/kc2j) .le. BN2)  .and.
     2401:  237:     *                  (((n-lcn)/kc3n) .le. BN3)  .and.
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 57% (fallthrough)
branch  3 taken 43%
branch  4 taken 11% (fallthrough)
branch  5 taken 89%
branch  6 taken 14% (fallthrough)
branch  7 taken 86%
        -:  238:     *                  (((m-lcm)/kc4m) .le. BN4)
      343:  239:     *                  )  then 
       16:  240:                        ic = (i-lci)/kc1i
       16:  241:                        jc = (j-lcj)/kc2j
       16:  242:                        nc = (n-lcn)/kc3n
       16:  243:                        mc = (m-lcm)/kc4m
       16:  244:                        if (C4(ic,jc,nc,mc) .eq.     
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  245:     *                      (ic*NL/10+jc*NL/100+nc*NL/1000+mc))then     
        -:  246:                        else
    #####:  247:                            erri = i*NL/10 + j*NL/100+ n*NL/1000+ m
        -:  248:                        endif
        -:  249:             endif 
        -:  250:              enddo
        -:  251:            enddo
        -:  252:          enddo
        -:  253:      enddo
        -:  254:
        -:  255:!dvm$ end region
        -:  256:!dvm$ get_actual(erri)
        -:  257:
        1:  258:      if (erri .eq.ER) then     
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  259:          call ansyes(tname)
call    0 returned 100%
        -:  260:      else
    #####:  261:          call ansno(tname)
call    0 never executed
        -:  262:      endif 
       1*:  263:      deallocate (C4,B4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
call    5 never executed
        -:  264:
        1:  265:      end
        -:  266:C -------------------------------------------------
        -:  267:
function ansyes_ called 2 returned 100% blocks executed 100%
        2:  268:      subroutine ansyes(name)
        -:  269:      character*9 name
        2:  270:      print *,name,'  -  complete'
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
        2:  271:      end
function ansno_ called 0 returned 0% blocks executed 0%
    #####:  272:      subroutine ansno(name)
        -:  273:      character*9 name
    #####:  274:      print *,name,'  -  ***error'
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  275:      end
        -:  276:         
